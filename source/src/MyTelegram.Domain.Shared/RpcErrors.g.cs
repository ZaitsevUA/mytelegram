// <auto-generated/>
using System.Collections.Frozen;

namespace MyTelegram;

public class RpcErrors
{
    /// <summary>
    /// Rpc 303 errors
    /// </summary>
    public static class RpcErrors303
    {
        public const int ErrorCode = 303;
        /// <summary>
        /// Your IP address is associated to DC <c>{0}</c>, please re-send the query to that DC.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError NetworkMigrateX = new(ErrorCode, "NETWORK_MIGRATE_{0}");

        /// <summary>
        /// Your phone number is associated to DC <c>{0}</c>, please re-send the query to that DC.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError PhoneMigrateX = new(ErrorCode, "PHONE_MIGRATE_{0}");

        /// <summary>
        /// Channel statistics for the specified channel are stored on DC <c>{0}</c>, please re-send the query to that DC.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError StatsMigrateX = new(ErrorCode, "STATS_MIGRATE_{0}");

        /// <summary>
        /// Your account is associated to DC <c>{0}</c>, please re-send the query to that DC.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError UserMigrateX = new(ErrorCode, "USER_MIGRATE_{0}");
    }

    /// <summary>
    /// Rpc 400 errors
    /// </summary>
    public static class RpcErrors400
    {
        public const int ErrorCode = 400;
        /// <summary>
        /// About string too long.
        /// <code>
        /// account.updateProfile
        /// </code>
        /// </summary>
        public static readonly RpcError AboutTooLong = new(ErrorCode, "ABOUT_TOO_LONG");

        /// <summary>
        /// Access token expired.
        /// <code>
        /// auth.importBotAuthorization
        /// </code>
        /// </summary>
        public static readonly RpcError AccessTokenExpired = new(ErrorCode, "ACCESS_TOKEN_EXPIRED");

        /// <summary>
        /// Access token invalid.
        /// <code>
        /// auth.importBotAuthorization
        /// </code>
        /// </summary>
        public static readonly RpcError AccessTokenInvalid = new(ErrorCode, "ACCESS_TOKEN_INVALID");

        /// <summary>
        /// The ad has expired (too old or not found).
        /// <code>
        /// channels.reportSponsoredMessage
        /// </code>
        /// </summary>
        public static readonly RpcError AdExpired = new(ErrorCode, "AD_EXPIRED");

        /// <summary>
        /// The specified geopoint address is invalid.
        /// <code>
        /// channels.createChannel
        /// </code>
        /// </summary>
        public static readonly RpcError AddressInvalid = new(ErrorCode, "ADDRESS_INVALID");

        /// <summary>
        /// The specified admin ID is invalid.
        /// <code>
        /// messages.deleteRevokedExportedChatInvites
        /// messages.getExportedChatInvites
        /// </code>
        /// </summary>
        public static readonly RpcError AdminIdInvalid = new(ErrorCode, "ADMIN_ID_INVALID");

        /// <summary>
        /// An admin rank cannot contain emojis.
        /// <code>
        /// channels.editAdmin
        /// </code>
        /// </summary>
        public static readonly RpcError AdminRankEmojiNotAllowed = new(ErrorCode, "ADMIN_RANK_EMOJI_NOT_ALLOWED");

        /// <summary>
        /// The specified admin rank is invalid.
        /// <code>
        /// channels.editAdmin
        /// </code>
        /// </summary>
        public static readonly RpcError AdminRankInvalid = new(ErrorCode, "ADMIN_RANK_INVALID");

        /// <summary>
        /// The chatAdminRights constructor passed in keyboardButtonRequestPeer.peer_type.user_admin_rights has no rights set (i.e. flags is 0).
        /// <code>
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError AdminRightsEmpty = new(ErrorCode, "ADMIN_RIGHTS_EMPTY");

        /// <summary>
        /// There are too many admins.
        /// <code>
        /// channels.editAdmin
        /// </code>
        /// </summary>
        public static readonly RpcError AdminsTooMuch = new(ErrorCode, "ADMINS_TOO_MUCH");

        /// <summary>
        /// You have uploaded too many profile photos, delete some before retrying.
        /// <code>
        /// photos.updateProfilePhoto
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError AlbumPhotosTooMany = new(ErrorCode, "ALBUM_PHOTOS_TOO_MANY");

        /// <summary>
        /// API ID invalid.
        /// <code>
        /// auth.exportLoginToken
        /// auth.importBotAuthorization
        /// auth.importWebTokenAuthorization
        /// auth.sendCode
        /// </code>
        /// </summary>
        public static readonly RpcError ApiIdInvalid = new(ErrorCode, "API_ID_INVALID");

        /// <summary>
        /// This API id was published somewhere, you can't use it now.
        /// <code>
        /// auth.exportLoginToken
        /// auth.importBotAuthorization
        /// auth.sendCode
        /// </code>
        /// </summary>
        public static readonly RpcError ApiIdPublishedFlood = new(ErrorCode, "API_ID_PUBLISHED_FLOOD");

        /// <summary>
        /// The title of the article is empty.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError ArticleTitleEmpty = new(ErrorCode, "ARTICLE_TITLE_EMPTY");

        /// <summary>
        /// The remote URL specified in the content field is empty.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError AudioContentUrlEmpty = new(ErrorCode, "AUDIO_CONTENT_URL_EMPTY");

        /// <summary>
        /// An empty audio title was provided.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError AudioTitleEmpty = new(ErrorCode, "AUDIO_TITLE_EMPTY");

        /// <summary>
        /// The provided authorization is invalid.
        /// <code>
        /// auth.importAuthorization
        /// invokeWithLayer
        /// </code>
        /// </summary>
        public static readonly RpcError AuthBytesInvalid = new(ErrorCode, "AUTH_BYTES_INVALID");

        /// <summary>
        /// The specified auth token was already accepted.
        /// <code>
        /// auth.acceptLoginToken
        /// auth.importLoginToken
        /// </code>
        /// </summary>
        public static readonly RpcError AuthTokenAlreadyAccepted = new(ErrorCode, "AUTH_TOKEN_ALREADY_ACCEPTED");

        /// <summary>
        /// An error occurred while importing the auth token.
        /// <code>
        /// auth.acceptLoginToken
        /// </code>
        /// </summary>
        public static readonly RpcError AuthTokenException = new(ErrorCode, "AUTH_TOKEN_EXCEPTION");

        /// <summary>
        /// The authorization token has expired.
        /// <code>
        /// auth.acceptLoginToken
        /// auth.importLoginToken
        /// </code>
        /// </summary>
        public static readonly RpcError AuthTokenExpired = new(ErrorCode, "AUTH_TOKEN_EXPIRED");

        /// <summary>
        /// The specified auth token is invalid.
        /// <code>
        /// auth.importLoginToken
        /// </code>
        /// </summary>
        public static readonly RpcError AuthTokenInvalid = new(ErrorCode, "AUTH_TOKEN_INVALID");

        /// <summary>
        /// The specified auth token is invalid.
        /// <code>
        /// auth.acceptLoginToken
        /// auth.importLoginToken
        /// </code>
        /// </summary>
        public static readonly RpcError AuthTokenInvalidx = new(ErrorCode, "AUTH_TOKEN_INVALIDX");

        /// <summary>
        /// The autoarchive setting is not available at this time: please check the value of the [autoarchive_setting_available field in client config ](https://core.telegram.org/api/config#client-configuration) before calling this method.
        /// <code>
        /// account.setGlobalPrivacySettings
        /// </code>
        /// </summary>
        public static readonly RpcError AutoarchiveNotAvailable = new(ErrorCode, "AUTOARCHIVE_NOT_AVAILABLE");

        /// <summary>
        /// The transaction cannot be completed because the current [Telegram Stars balance](https://core.telegram.org/api/stars) is too low.
        /// <code>
        /// payments.sendStarsForm
        /// </code>
        /// </summary>
        public static readonly RpcError BalanceTooLow = new(ErrorCode, "BALANCE_TOO_LOW");

        /// <summary>
        /// The specified card number is invalid.
        /// <code>
        /// payments.getBankCardData
        /// </code>
        /// </summary>
        public static readonly RpcError BankCardNumberInvalid = new(ErrorCode, "BANK_CARD_NUMBER_INVALID");

        /// <summary>
        /// You provided some invalid flags in the banned rights.
        /// <code>
        /// messages.editChatDefaultBannedRights
        /// </code>
        /// </summary>
        public static readonly RpcError BannedRightsInvalid = new(ErrorCode, "BANNED_RIGHTS_INVALID");

        /// <summary>
        /// An invalid age was specified, must be between 0 and 150 years.
        /// <code>
        /// account.updateBirthday
        /// </code>
        /// </summary>
        public static readonly RpcError BirthdayInvalid = new(ErrorCode, "BIRTHDAY_INVALID");

        /// <summary>
        /// You're already [boosting](https://core.telegram.org/api/boost) the specified channel.
        /// <code>
        /// messages
        /// stories.applyBoost
        /// stories.canApplyBoost
        /// </code>
        /// </summary>
        public static readonly RpcError BoostNotModified = new(ErrorCode, "BOOST_NOT_MODIFIED");

        /// <summary>
        /// The specified `boost_peer` is invalid.
        /// <code>
        /// payments.getPaymentForm
        /// </code>
        /// </summary>
        public static readonly RpcError BoostPeerInvalid = new(ErrorCode, "BOOST_PEER_INVALID");

        /// <summary>
        /// No boost slots were specified.
        /// <code>
        /// premium.applyBoost
        /// </code>
        /// </summary>
        public static readonly RpcError BoostsEmpty = new(ErrorCode, "BOOSTS_EMPTY");

        /// <summary>
        /// The specified channel must first be [boosted by its users](https://core.telegram.org/api/boost) in order to perform this action.
        /// <code>
        /// channels.updateColor
        /// stories.canSendStory
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError BoostsRequired = new(ErrorCode, "BOOSTS_REQUIRED");

        /// <summary>
        /// The connected business bot was already disabled for the specified peer.
        /// <code>
        /// account.disablePeerConnectedBot
        /// </code>
        /// </summary>
        public static readonly RpcError BotAlreadyDisabled = new(ErrorCode, "BOT_ALREADY_DISABLED");

        /// <summary>
        /// The bot_id passed in the inputBotAppShortName constructor is invalid.
        /// <code>
        /// messages.getBotApp
        /// messages.requestAppWebView
        /// </code>
        /// </summary>
        public static readonly RpcError BotAppBotInvalid = new(ErrorCode, "BOT_APP_BOT_INVALID");

        /// <summary>
        /// The specified bot app is invalid.
        /// <code>
        /// messages.getBotApp
        /// messages.requestAppWebView
        /// </code>
        /// </summary>
        public static readonly RpcError BotAppInvalid = new(ErrorCode, "BOT_APP_INVALID");

        /// <summary>
        /// The specified bot app short name is invalid.
        /// <code>
        /// messages.getBotApp
        /// messages.requestAppWebView
        /// </code>
        /// </summary>
        public static readonly RpcError BotAppShortnameInvalid = new(ErrorCode, "BOT_APP_SHORTNAME_INVALID");

        /// <summary>
        /// The specified bot is not a business bot (the [user](https://core.telegram.org/constructor/user).`bot_business` flag is not set).
        /// <code>
        /// account.updateConnectedBot
        /// </code>
        /// </summary>
        public static readonly RpcError BotBusinessMissing = new(ErrorCode, "BOT_BUSINESS_MISSING");

        /// <summary>
        /// Bots can't edit admin privileges.
        /// <code>
        /// channels.editAdmin
        /// </code>
        /// </summary>
        public static readonly RpcError BotChannelsNa = new(ErrorCode, "BOT_CHANNELS_NA");

        /// <summary>
        /// The specified command description is invalid.
        /// <code>
        /// bots.setBotCommands
        /// </code>
        /// </summary>
        public static readonly RpcError BotCommandDescriptionInvalid = new(ErrorCode, "BOT_COMMAND_DESCRIPTION_INVALID");

        /// <summary>
        /// The specified command is invalid.
        /// <code>
        /// bots.setBotCommands
        /// </code>
        /// </summary>
        public static readonly RpcError BotCommandInvalid = new(ErrorCode, "BOT_COMMAND_INVALID");

        /// <summary>
        /// Bot domain invalid.
        /// <code>
        /// messages.editMessage
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError BotDomainInvalid = new(ErrorCode, "BOT_DOMAIN_INVALID");

        /// <summary>
        /// Games can't be sent to channels.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError BotGamesDisabled = new(ErrorCode, "BOT_GAMES_DISABLED");

        /// <summary>
        /// This bot can't be added to groups.
        /// <code>
        /// channels.editAdmin
        /// channels.inviteToChannel
        /// messages.addChatUser
        /// </code>
        /// </summary>
        public static readonly RpcError BotGroupsBlocked = new(ErrorCode, "BOT_GROUPS_BLOCKED");

        /// <summary>
        /// This bot can't be used in inline mode.
        /// <code>
        /// messages.getInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError BotInlineDisabled = new(ErrorCode, "BOT_INLINE_DISABLED");

        /// <summary>
        /// This is not a valid bot.
        /// <code>
        /// account.acceptAuthorization
        /// account.getAuthorizationForm
        /// bots.addPreviewMedia
        /// bots.allowSendMessage
        /// bots.canSendMessage
        /// bots.checkDownloadFileParams
        /// bots.deletePreviewMedia
        /// bots.editPreviewMedia
        /// bots.getBotInfo
        /// bots.getPreviewInfo
        /// bots.getPreviewMedias
        /// bots.invokeWebViewCustomMethod
        /// bots.reorderPreviewMedias
        /// bots.reorderUsernames
        /// bots.setBotInfo
        /// bots.toggleUserEmojiStatusPermission
        /// bots.toggleUsername
        /// bots.updateStarRefProgram
        /// messages.editMessage
        /// messages.getAttachMenuBot
        /// messages.getInlineBotResults
        /// messages.prolongWebView
        /// messages.requestMainWebView
        /// messages.requestSimpleWebView
        /// messages.requestWebView
        /// messages.sendMessage
        /// messages.sendWebViewData
        /// messages.startBot
        /// messages.toggleBotInAttachMenu
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError BotInvalid = new(ErrorCode, "BOT_INVALID");

        /// <summary>
        /// The specified invoice is invalid.
        /// <code>
        /// payments.getPaymentForm
        /// payments.sendStarsForm
        /// </code>
        /// </summary>
        public static readonly RpcError BotInvoiceInvalid = new(ErrorCode, "BOT_INVOICE_INVALID");

        /// <summary>
        /// No [business bot](https://core.telegram.org/api/business#connected-bots) is connected to the currently logged in user.
        /// <code>
        /// account.disablePeerConnectedBot
        /// </code>
        /// </summary>
        public static readonly RpcError BotNotConnectedYet = new(ErrorCode, "BOT_NOT_CONNECTED_YET");

        /// <summary>
        /// Bots can't pin messages in PM just for themselves.
        /// <code>
        /// messages.updatePinnedMessage
        /// </code>
        /// </summary>
        public static readonly RpcError BotOnesideNotAvail = new(ErrorCode, "BOT_ONESIDE_NOT_AVAIL");

        /// <summary>
        /// Please enable bot payments in botfather before calling this method.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError BotPaymentsDisabled = new(ErrorCode, "BOT_PAYMENTS_DISABLED");

        /// <summary>
        /// A timeout occurred while fetching data from the bot.
        /// <code>
        /// messages.getBotCallbackAnswer
        /// messages.getInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError BotResponseTimeout = new(ErrorCode, "BOT_RESPONSE_TIMEOUT");

        /// <summary>
        /// The score wasn't modified.
        /// <code>
        /// messages.setGameScore
        /// </code>
        /// </summary>
        public static readonly RpcError BotScoreNotModified = new(ErrorCode, "BOT_SCORE_NOT_MODIFIED");

        /// <summary>
        /// A webview cannot be opened in the specified conditions: emitted for example if `from_bot_menu` or `url` are set and `peer` is not the chat with the bot.
        /// <code>
        /// messages.requestWebView
        /// </code>
        /// </summary>
        public static readonly RpcError BotWebviewDisabled = new(ErrorCode, "BOT_WEBVIEW_DISABLED");

        /// <summary>
        /// There are too many bots in this chat/channel.
        /// <code>
        /// channels.editAdmin
        /// channels.inviteToChannel
        /// </code>
        /// </summary>
        public static readonly RpcError BotsTooMuch = new(ErrorCode, "BOTS_TOO_MUCH");

        /// <summary>
        /// Broadcast ID invalid.
        /// <code>
        /// channels.setDiscussionGroup
        /// </code>
        /// </summary>
        public static readonly RpcError BroadcastIdInvalid = new(ErrorCode, "BROADCAST_ID_INVALID");

        /// <summary>
        /// You can't forward polls with public voters.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError BroadcastPublicVotersForbidden = new(ErrorCode, "BROADCAST_PUBLIC_VOTERS_FORBIDDEN");

        /// <summary>
        /// This method can only be called on a channel, please use stats.getMegagroupStats for supergroups.
        /// <code>
        /// stats.getBroadcastStats
        /// </code>
        /// </summary>
        public static readonly RpcError BroadcastRequired = new(ErrorCode, "BROADCAST_REQUIRED");

        /// <summary>
        /// Messages can't be set to the specified peer through the current [business connection](https://core.telegram.org/api/business#connected-bots).
        /// <code>
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// messages.setTyping
        /// </code>
        /// </summary>
        public static readonly RpcError BusinessPeerInvalid = new(ErrorCode, "BUSINESS_PEER_INVALID");

        /// <summary>
        /// You cannot send a message to a user through a [business connection](https://core.telegram.org/api/business#connected-bots) if the user hasn't recently contacted us.
        /// <code>
        /// messages.sendMessage
        /// messages.setTyping
        /// </code>
        /// </summary>
        public static readonly RpcError BusinessPeerUsageMissing = new(ErrorCode, "BUSINESS_PEER_USAGE_MISSING");

        /// <summary>
        /// You didn't set any flag in inputBusinessBotRecipients, thus the bot cannot work with *any* peer.
        /// <code>
        /// account.updateConnectedBot
        /// </code>
        /// </summary>
        public static readonly RpcError BusinessRecipientsEmpty = new(ErrorCode, "BUSINESS_RECIPIENTS_EMPTY");

        /// <summary>
        /// No work hours were specified.
        /// <code>
        /// account.updateBusinessWorkHours
        /// </code>
        /// </summary>
        public static readonly RpcError BusinessWorkHoursEmpty = new(ErrorCode, "BUSINESS_WORK_HOURS_EMPTY");

        /// <summary>
        /// The specified work hours are invalid, see [here ](https://core.telegram.org/api/business#opening-hours) for the exact requirements.
        /// <code>
        /// account.updateBusinessWorkHours
        /// </code>
        /// </summary>
        public static readonly RpcError BusinessWorkHoursPeriodInvalid = new(ErrorCode, "BUSINESS_WORK_HOURS_PERIOD_INVALID");

        /// <summary>
        /// The specified [keyboardButtonCopy](https://core.telegram.org/constructor/keyboardButtonCopy).`copy_text` is invalid.
        /// <code>
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ButtonCopyTextInvalid = new(ErrorCode, "BUTTON_COPY_TEXT_INVALID");

        /// <summary>
        /// The data of one or more of the buttons you provided is invalid.
        /// <code>
        /// messages.editInlineBotMessage
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError ButtonDataInvalid = new(ErrorCode, "BUTTON_DATA_INVALID");

        /// <summary>
        /// The specified button ID is invalid.
        /// <code>
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ButtonIdInvalid = new(ErrorCode, "BUTTON_ID_INVALID");

        /// <summary>
        /// The position of one of the keyboard buttons is invalid (i.e. a Game or Pay button not in the first position, and so on...).
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ButtonPosInvalid = new(ErrorCode, "BUTTON_POS_INVALID");

        /// <summary>
        /// The specified button text is invalid.
        /// <code>
        /// bots.setBotMenuButton
        /// </code>
        /// </summary>
        public static readonly RpcError ButtonTextInvalid = new(ErrorCode, "BUTTON_TEXT_INVALID");

        /// <summary>
        /// The type of one or more of the buttons you provided is invalid.
        /// <code>
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError ButtonTypeInvalid = new(ErrorCode, "BUTTON_TYPE_INVALID");

        /// <summary>
        /// Button URL invalid.
        /// <code>
        /// bots.setBotMenuButton
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.setInlineBotResults
        /// test.test
        /// </code>
        /// </summary>
        public static readonly RpcError ButtonUrlInvalid = new(ErrorCode, "BUTTON_URL_INVALID");

        /// <summary>
        /// The `user_id` passed to inputKeyboardButtonUserProfile is invalid!
        /// <code>
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ButtonUserInvalid = new(ErrorCode, "BUTTON_USER_INVALID");

        /// <summary>
        /// The privacy setting of the user specified in a [inputKeyboardButtonUserProfile](https://core.telegram.org/constructor/inputKeyboardButtonUserProfile) button do not allow creating such a button.
        /// <code>
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ButtonUserPrivacyRestricted = new(ErrorCode, "BUTTON_USER_PRIVACY_RESTRICTED");

        /// <summary>
        /// The call was already accepted.
        /// <code>
        /// phone.acceptCall
        /// phone.discardCall
        /// </code>
        /// </summary>
        public static readonly RpcError CallAlreadyAccepted = new(ErrorCode, "CALL_ALREADY_ACCEPTED");

        /// <summary>
        /// The call was already declined.
        /// <code>
        /// phone.acceptCall
        /// phone.confirmCall
        /// phone.receivedCall
        /// </code>
        /// </summary>
        public static readonly RpcError CallAlreadyDeclined = new(ErrorCode, "CALL_ALREADY_DECLINED");

        /// <summary>
        /// The call failed because the user is already making another call.
        /// <code>
        /// phone.discardCall
        /// </code>
        /// </summary>
        public static readonly RpcError CallOccupyFailed = new(ErrorCode, "CALL_OCCUPY_FAILED");

        /// <summary>
        /// The provided call peer object is invalid.
        /// <code>
        /// phone.acceptCall
        /// phone.confirmCall
        /// phone.discardCall
        /// phone.receivedCall
        /// phone.saveCallDebug
        /// phone.saveCallLog
        /// phone.sendSignalingData
        /// phone.setCallRating
        /// </code>
        /// </summary>
        public static readonly RpcError CallPeerInvalid = new(ErrorCode, "CALL_PEER_INVALID");

        /// <summary>
        /// Call protocol flags invalid.
        /// <code>
        /// phone.acceptCall
        /// phone.requestCall
        /// </code>
        /// </summary>
        public static readonly RpcError CallProtocolFlagsInvalid = new(ErrorCode, "CALL_PROTOCOL_FLAGS_INVALID");

        /// <summary>
        /// You can't call this method in a CDN DC.
        /// <code>
        /// invokeWithLayer
        /// updates.getDifference
        /// upload.getCdnFileHashes
        /// upload.getFile
        /// upload.reuploadCdnFile
        /// </code>
        /// </summary>
        public static readonly RpcError CdnMethodInvalid = new(ErrorCode, "CDN_METHOD_INVALID");

        /// <summary>
        /// This supergroup is not a forum.
        /// <code>
        /// channels.createForumTopic
        /// channels.deleteTopicHistory
        /// channels.editForumTopic
        /// channels.getForumTopics
        /// channels.getForumTopicsByID
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelForumMissing = new(ErrorCode, "CHANNEL_FORUM_MISSING");

        /// <summary>
        /// The specified supergroup ID is invalid.
        /// <code>
        /// channels.convertToGigagroup
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelIdInvalid = new(ErrorCode, "CHANNEL_ID_INVALID");

        /// <summary>
        /// The provided channel is invalid.
        /// <code>
        /// account.getNotifySettings
        /// account.updateNotifySettings
        /// channels.checkUsername
        /// channels.clickSponsoredMessage
        /// channels.convertToGigagroup
        /// channels.createForumTopic
        /// channels.deactivateAllUsernames
        /// channels.deleteChannel
        /// channels.deleteHistory
        /// channels.deleteMessages
        /// channels.deleteParticipantHistory
        /// channels.deleteTopicHistory
        /// channels.deleteUserHistory
        /// channels.editAbout
        /// channels.editAdmin
        /// channels.editBanned
        /// channels.editForumTopic
        /// channels.editLocation
        /// channels.editPhoto
        /// channels.editTitle
        /// channels.exportInvite
        /// channels.exportMessageLink
        /// channels.getAdminLog
        /// channels.getChannelRecommendations
        /// channels.getChannels
        /// channels.getForumTopics
        /// channels.getForumTopicsByID
        /// channels.getFullChannel
        /// channels.getMessages
        /// channels.getParticipant
        /// channels.getParticipants
        /// channels.getSendAs
        /// channels.getSponsoredMessages
        /// channels.inviteToChannel
        /// channels.joinChannel
        /// channels.leaveChannel
        /// channels.readHistory
        /// channels.readMessageContents
        /// channels.reorderPinnedForumTopics
        /// channels.reorderUsernames
        /// channels.reportAntiSpamFalsePositive
        /// channels.reportSpam
        /// channels.reportSponsoredMessage
        /// channels.restrictSponsoredMessages
        /// channels.setBoostsToUnblockRestrictions
        /// channels.setDiscussionGroup
        /// channels.setEmojiStickers
        /// channels.setStickers
        /// channels.toggleAntiSpam
        /// channels.toggleForum
        /// channels.toggleInvites
        /// channels.toggleJoinRequest
        /// channels.toggleJoinToSend
        /// channels.toggleParticipantsHidden
        /// channels.togglePreHistoryHidden
        /// channels.toggleSignatures
        /// channels.toggleSlowMode
        /// channels.toggleUsername
        /// channels.toggleViewForumAsMessages
        /// channels.updateColor
        /// channels.updateEmojiStatus
        /// channels.updatePinnedForumTopic
        /// channels.updatePinnedMessage
        /// channels.updateUsername
        /// channels.viewSponsoredMessage
        /// chatlists.editExportedInvite
        /// chatlists.exportChatlistInvite
        /// messages.editChatAbout
        /// messages.editMessage
        /// messages.exportChatInvite
        /// messages.forwardMessages
        /// messages.getBotCallbackAnswer
        /// messages.getChatInviteImporters
        /// messages.getDiscussionMessage
        /// messages.getExportedChatInvites
        /// messages.getHistory
        /// messages.getInlineBotResults
        /// messages.getMessagesReactions
        /// messages.getMessagesViews
        /// messages.getPeerDialogs
        /// messages.getPeerSettings
        /// messages.getReplies
        /// messages.getUnreadMentions
        /// messages.hideAllChatJoinRequests
        /// messages.importChatInvite
        /// messages.readMentions
        /// messages.report
        /// messages.search
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// messages.sendReaction
        /// messages.sendVote
        /// messages.setTyping
        /// messages.uploadMedia
        /// premium.getBoostsStatus
        /// stats.getBroadcastRevenueStats
        /// stats.getBroadcastRevenueTransactions
        /// stats.getBroadcastStats
        /// stats.getMegagroupStats
        /// stats.getMessagePublicForwards
        /// stats.getMessageStats
        /// stories.getBoostersList
        /// stories.getPeerStories
        /// stories.getStoriesByID
        /// stories.getStoriesViews
        /// updates.getChannelDifference
        /// updates.getDifference
        /// upload.getFile
        /// users.getFullUser
        /// users.getUsers
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelInvalid = new(ErrorCode, "CHANNEL_INVALID");

        /// <summary>
        /// The current user is not in the channel.
        /// <code>
        /// channels.deleteHistory
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelParicipantMissing = new(ErrorCode, "CHANNEL_PARICIPANT_MISSING");

        /// <summary>
        /// You haven't joined this channel/supergroup.
        /// <code>
        /// account.getNotifySettings
        /// account.reportPeer
        /// account.updateNotifySettings
        /// channels.checkUsername
        /// channels.deleteChannel
        /// channels.deleteHistory
        /// channels.deleteMessages
        /// channels.deleteParticipantHistory
        /// channels.deleteUserHistory
        /// channels.editAdmin
        /// channels.editBanned
        /// channels.editCreator
        /// channels.editPhoto
        /// channels.editTitle
        /// channels.exportMessageLink
        /// channels.getAdminLog
        /// channels.getChannelRecommendations
        /// channels.getChannels
        /// channels.getForumTopics
        /// channels.getFullChannel
        /// channels.getMessages
        /// channels.getParticipant
        /// channels.getParticipants
        /// channels.getSendAs
        /// channels.getSponsoredMessages
        /// channels.inviteToChannel
        /// channels.joinChannel
        /// channels.leaveChannel
        /// channels.readHistory
        /// channels.readMessageContents
        /// channels.togglePreHistoryHidden
        /// channels.toggleUsername
        /// channels.updateUsername
        /// channels.viewSponsoredMessage
        /// chatlists.exportChatlistInvite
        /// contacts.addContact
        /// contacts.block
        /// contacts.unblock
        /// folders.editPeerFolders
        /// messages.deleteHistory
        /// messages.editChatAbout
        /// messages.editChatDefaultBannedRights
        /// messages.editExportedChatInvite
        /// messages.editMessage
        /// messages.exportChatInvite
        /// messages.forwardMessages
        /// messages.getBotCallbackAnswer
        /// messages.getChatInviteImporters
        /// messages.getDiscussionMessage
        /// messages.getExportedChatInvite
        /// messages.getExportedChatInvites
        /// messages.getHistory
        /// messages.getInlineBotResults
        /// messages.getMessagesReactions
        /// messages.getMessagesViews
        /// messages.getOnlines
        /// messages.getPeerDialogs
        /// messages.getPeerSettings
        /// messages.getReplies
        /// messages.getUnreadMentions
        /// messages.hideAllChatJoinRequests
        /// messages.hideChatJoinRequest
        /// messages.importChatInvite
        /// messages.readHistory
        /// messages.readMentions
        /// messages.report
        /// messages.reportSpam
        /// messages.search
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// messages.sendReaction
        /// messages.sendVote
        /// messages.setTyping
        /// messages.toggleDialogPin
        /// messages.updatePinnedMessage
        /// messages.uploadMedia
        /// phone.createGroupCall
        /// stats.getBroadcastStats
        /// stories.getPeerStories
        /// stories.getStoriesByID
        /// stories.getStoriesViews
        /// updates.getChannelDifference
        /// updates.getDifference
        /// upload.getFile
        /// users.getFullUser
        /// users.getUsers
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelPrivate = new(ErrorCode, "CHANNEL_PRIVATE");

        /// <summary>
        /// This channel has too many participants (>1000) to be deleted.
        /// <code>
        /// channels.deleteHistory
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelTooBig = new(ErrorCode, "CHANNEL_TOO_BIG");

        /// <summary>
        /// Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change).
        /// <code>
        /// channels.deleteChannel
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelTooLarge = new(ErrorCode, "CHANNEL_TOO_LARGE");

        /// <summary>
        /// The user has reached the limit of public geogroups.
        /// <code>
        /// channels.createChannel
        /// channels.getAdminedPublicChannels
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelsAdminLocatedTooMuch = new(ErrorCode, "CHANNELS_ADMIN_LOCATED_TOO_MUCH");

        /// <summary>
        /// You're admin of too many public channels, make some channels private to change the username of this channel.
        /// <code>
        /// channels.checkUsername
        /// channels.editCreator
        /// channels.getAdminedPublicChannels
        /// channels.updateUsername
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelsAdminPublicTooMuch = new(ErrorCode, "CHANNELS_ADMIN_PUBLIC_TOO_MUCH");

        /// <summary>
        /// You have joined too many channels/supergroups.
        /// <code>
        /// channels.createChannel
        /// channels.joinChannel
        /// messages.hideAllChatJoinRequests
        /// messages.hideChatJoinRequest
        /// messages.importChatInvite
        /// messages.migrateChat
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelsTooMuch = new(ErrorCode, "CHANNELS_TOO_MUCH");

        /// <summary>
        /// The transaction was already refunded.
        /// <code>
        /// payments.refundStarsCharge
        /// </code>
        /// </summary>
        public static readonly RpcError ChargeAlreadyRefunded = new(ErrorCode, "CHARGE_ALREADY_REFUNDED");

        /// <summary>
        /// About text has not changed.
        /// <code>
        /// channels.editAbout
        /// messages.editChatAbout
        /// </code>
        /// </summary>
        public static readonly RpcError ChatAboutNotModified = new(ErrorCode, "CHAT_ABOUT_NOT_MODIFIED");

        /// <summary>
        /// Chat about too long.
        /// <code>
        /// channels.createChannel
        /// channels.editAbout
        /// messages.editChatAbout
        /// </code>
        /// </summary>
        public static readonly RpcError ChatAboutTooLong = new(ErrorCode, "CHAT_ABOUT_TOO_LONG");

        /// <summary>
        /// You must be an admin in this chat to do this.
        /// <code>
        /// channels.convertToGigagroup
        /// channels.deleteChannel
        /// channels.deleteHistory
        /// channels.deleteParticipantHistory
        /// channels.deleteUserHistory
        /// channels.editAbout
        /// channels.editAdmin
        /// channels.editBanned
        /// channels.editCreator
        /// channels.editLocation
        /// channels.editPhoto
        /// channels.editTitle
        /// channels.exportInvite
        /// channels.getAdminLog
        /// channels.getParticipant
        /// channels.getParticipants
        /// channels.inviteToChannel
        /// channels.reportSpam
        /// channels.setDiscussionGroup
        /// channels.toggleInvites
        /// channels.toggleJoinRequest
        /// channels.toggleJoinToSend
        /// channels.toggleParticipantsHidden
        /// channels.togglePreHistoryHidden
        /// channels.toggleSignatures
        /// channels.toggleSlowMode
        /// channels.toggleUsername
        /// channels.updatePinnedMessage
        /// channels.updateUsername
        /// chatlists.exportChatlistInvite
        /// messages.addChatUser
        /// messages.checkHistoryImportPeer
        /// messages.deleteChat
        /// messages.deleteChatUser
        /// messages.deleteHistory
        /// messages.editChatAbout
        /// messages.editChatDefaultBannedRights
        /// messages.editChatTitle
        /// messages.editExportedChatInvite
        /// messages.editMessage
        /// messages.exportChatInvite
        /// messages.forwardMessages
        /// messages.getAdminsWithInvites
        /// messages.getChatInviteImporters
        /// messages.getExportedChatInvite
        /// messages.getExportedChatInvites
        /// messages.getMessageEditData
        /// messages.getScheduledHistory
        /// messages.getScheduledMessages
        /// messages.hideAllChatJoinRequests
        /// messages.hideChatJoinRequest
        /// messages.initHistoryImport
        /// messages.migrateChat
        /// messages.search
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// messages.setChatAvailableReactions
        /// messages.setTyping
        /// messages.startBot
        /// messages.toggleNoForwards
        /// messages.unpinAllMessages
        /// messages.updatePinnedMessage
        /// messages.uploadImportedMedia
        /// messages.uploadMedia
        /// payments.getStarsTransactions
        /// phone.createGroupCall
        /// phone.getGroupCallStreamRtmpUrl
        /// premium.getBoostsList
        /// stats.getBroadcastRevenueStats
        /// stats.getBroadcastStats
        /// stats.getMegagroupStats
        /// stats.getMessagePublicForwards
        /// stats.getMessageStats
        /// stories.canSendStory
        /// stories.getBoostersList
        /// stories.getStoriesArchive
        /// </code>
        /// </summary>
        public static readonly RpcError ChatAdminRequired = new(ErrorCode, "CHAT_ADMIN_REQUIRED");

        /// <summary>
        /// You can't enable forum topics in a discussion group linked to a channel.
        /// <code>
        /// channels.toggleForum
        /// </code>
        /// </summary>
        public static readonly RpcError ChatDiscussionUnallowed = new(ErrorCode, "CHAT_DISCUSSION_UNALLOWED");

        /// <summary>
        /// You can't forward messages from a protected chat.
        /// <code>
        /// messages.editMessage
        /// messages.forwardMessages
        /// messages.sendMedia
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatForwardsRestricted = new(ErrorCode, "CHAT_FORWARDS_RESTRICTED");

        /// <summary>
        /// The provided chat ID is empty.
        /// <code>
        /// messages.discardEncryption
        /// </code>
        /// </summary>
        public static readonly RpcError ChatIdEmpty = new(ErrorCode, "CHAT_ID_EMPTY");

        /// <summary>
        /// The provided chat id is invalid.
        /// <code>
        /// channels.checkUsername
        /// channels.getSendAs
        /// channels.setStickers
        /// channels.toggleJoinRequest
        /// channels.toggleJoinToSend
        /// channels.toggleParticipantsHidden
        /// channels.togglePreHistoryHidden
        /// channels.toggleSignatures
        /// channels.toggleSlowMode
        /// channels.updatePinnedMessage
        /// folders.editPeerFolders
        /// messages.acceptEncryption
        /// messages.addChatUser
        /// messages.deleteChat
        /// messages.deleteChatUser
        /// messages.deleteHistory
        /// messages.editChatAbout
        /// messages.editChatAdmin
        /// messages.editChatDefaultBannedRights
        /// messages.editChatPhoto
        /// messages.editChatTitle
        /// messages.exportChatInvite
        /// messages.forwardMessage
        /// messages.forwardMessages
        /// messages.getChats
        /// messages.getFullChat
        /// messages.getHistory
        /// messages.getMessagesViews
        /// messages.getOnlines
        /// messages.migrateChat
        /// messages.readDiscussion
        /// messages.readEncryptedHistory
        /// messages.readHistory
        /// messages.reportEncryptedSpam
        /// messages.search
        /// messages.sendEncrypted
        /// messages.sendEncryptedFile
        /// messages.sendEncryptedService
        /// messages.sendMessage
        /// messages.setEncryptedTyping
        /// messages.setTyping
        /// messages.toggleChatAdmins
        /// messages.updateDialogFilter
        /// messages.uploadEncryptedFile
        /// messages.uploadMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatIdInvalid = new(ErrorCode, "CHAT_ID_INVALID");

        /// <summary>
        /// Invalid chat.
        /// <code>
        /// channels.inviteToChannel
        /// channels.joinChannel
        /// channels.leaveChannel
        /// messages.createChat
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError ChatInvalid = new(ErrorCode, "CHAT_INVALID");

        /// <summary>
        /// You can't set an expiration date on permanent invite links.
        /// <code>
        /// messages.editExportedChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError ChatInvitePermanent = new(ErrorCode, "CHAT_INVITE_PERMANENT");

        /// <summary>
        /// The chat is public, you can't hide the history to new users.
        /// <code>
        /// channels.togglePreHistoryHidden
        /// </code>
        /// </summary>
        public static readonly RpcError ChatLinkExists = new(ErrorCode, "CHAT_LINK_EXISTS");

        /// <summary>
        /// Could not add participants.
        /// <code>
        /// channels.inviteToChannel
        /// </code>
        /// </summary>
        public static readonly RpcError ChatMemberAddFailed = new(ErrorCode, "CHAT_MEMBER_ADD_FAILED");

        /// <summary>
        /// No changes were made to chat information because the new information you passed is identical to the current information.
        /// <code>
        /// channels.deleteChannel
        /// channels.editCreator
        /// channels.editLocation
        /// channels.editPhoto
        /// channels.editTitle
        /// channels.getFullChannel
        /// channels.reorderUsernames
        /// channels.toggleAntiSpam
        /// channels.toggleForum
        /// channels.toggleInvites
        /// channels.toggleJoinRequest
        /// channels.toggleJoinToSend
        /// channels.toggleParticipantsHidden
        /// channels.togglePreHistoryHidden
        /// channels.toggleSignatures
        /// channels.toggleSlowMode
        /// channels.toggleUsername
        /// channels.updatePinnedMessage
        /// channels.updateUsername
        /// messages.editChatAbout
        /// messages.editChatDefaultBannedRights
        /// messages.editChatPhoto
        /// messages.editChatTitle
        /// messages.setChatAvailableReactions
        /// messages.setHistoryTTL
        /// messages.toggleChatAdmins
        /// messages.toggleNoForwards
        /// messages.unpinAllMessages
        /// messages.updatePinnedMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ChatNotModified = new(ErrorCode, "CHAT_NOT_MODIFIED");

        /// <summary>
        /// You can only enable join requests in public groups.
        /// <code>
        /// channels.toggleJoinRequest
        /// </code>
        /// </summary>
        public static readonly RpcError ChatPublicRequired = new(ErrorCode, "CHAT_PUBLIC_REQUIRED");

        /// <summary>
        /// You can't send messages in this chat, you were restricted.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.uploadMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatRestricted = new(ErrorCode, "CHAT_RESTRICTED");

        /// <summary>
        /// `min_date` and `max_date` are not available for using with non-user peers.
        /// <code>
        /// messages.deleteHistory
        /// </code>
        /// </summary>
        public static readonly RpcError ChatRevokeDateUnsupported = new(ErrorCode, "CHAT_REVOKE_DATE_UNSUPPORTED");

        /// <summary>
        /// You can't send inline messages in this group.
        /// <code>
        /// messages.sendInlineBotResult
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendInlineForbidden = new(ErrorCode, "CHAT_SEND_INLINE_FORBIDDEN");

        /// <summary>
        /// No chat title provided.
        /// <code>
        /// channels.createChannel
        /// channels.editTitle
        /// messages.createChat
        /// messages.editChatTitle
        /// </code>
        /// </summary>
        public static readonly RpcError ChatTitleEmpty = new(ErrorCode, "CHAT_TITLE_EMPTY");

        /// <summary>
        /// This method is not available for groups with more than `chat_read_mark_size_threshold` members, [see client configuration ](https://core.telegram.org/api/config#client-configuration).
        /// <code>
        /// messages.getMessageReadParticipants
        /// messages.getMessagesReadParticipants
        /// </code>
        /// </summary>
        public static readonly RpcError ChatTooBig = new(ErrorCode, "CHAT_TOO_BIG");

        /// <summary>
        /// The specified slug is empty.
        /// <code>
        /// account.deleteBusinessChatLink
        /// account.editBusinessChatLink
        /// account.resolveBusinessChatLink
        /// </code>
        /// </summary>
        public static readonly RpcError ChatlinkSlugEmpty = new(ErrorCode, "CHATLINK_SLUG_EMPTY");

        /// <summary>
        /// The specified [business chat link](https://core.telegram.org/api/business#business-chat-links) has expired.
        /// <code>
        /// account.deleteBusinessChatLink
        /// account.resolveBusinessChatLink
        /// </code>
        /// </summary>
        public static readonly RpcError ChatlinkSlugExpired = new(ErrorCode, "CHATLINK_SLUG_EXPIRED");

        /// <summary>
        /// Too many [business chat links](https://core.telegram.org/api/business#business-chat-links) were created, please delete some older links.
        /// <code>
        /// account.createBusinessChatLink
        /// </code>
        /// </summary>
        public static readonly RpcError ChatlinksTooMuch = new(ErrorCode, "CHATLINKS_TOO_MUCH");

        /// <summary>
        /// The specified `exclude_peers` are invalid.
        /// <code>
        /// messages.updateDialogFilter
        /// </code>
        /// </summary>
        public static readonly RpcError ChatlistExcludeInvalid = new(ErrorCode, "CHATLIST_EXCLUDE_INVALID");

        /// <summary>
        /// You have created too many folder links, hitting the `chatlist_invites_limit_default`/`chatlist_invites_limit_premium` [limits ](https://core.telegram.org/api/config#chatlist-invites-limit-default).
        /// <code>
        /// chatlists.exportChatlistInvite
        /// </code>
        /// </summary>
        public static readonly RpcError ChatlistsTooMuch = new(ErrorCode, "CHATLISTS_TOO_MUCH");

        /// <summary>
        /// The provided code is empty.
        /// <code>
        /// auth.checkRecoveryPassword
        /// auth.recoverPassword
        /// </code>
        /// </summary>
        public static readonly RpcError CodeEmpty = new(ErrorCode, "CODE_EMPTY");

        /// <summary>
        /// Code hash invalid.
        /// <code>
        /// account.confirmPhone
        /// </code>
        /// </summary>
        public static readonly RpcError CodeHashInvalid = new(ErrorCode, "CODE_HASH_INVALID");

        /// <summary>
        /// Code invalid.
        /// <code>
        /// account.confirmPasswordEmail
        /// </code>
        /// </summary>
        public static readonly RpcError CodeInvalid = new(ErrorCode, "CODE_INVALID");

        /// <summary>
        /// The specified collectible is invalid.
        /// <code>
        /// fragment.getCollectibleInfo
        /// </code>
        /// </summary>
        public static readonly RpcError CollectibleInvalid = new(ErrorCode, "COLLECTIBLE_INVALID");

        /// <summary>
        /// The specified collectible could not be found.
        /// <code>
        /// fragment.getCollectibleInfo
        /// </code>
        /// </summary>
        public static readonly RpcError CollectibleNotFound = new(ErrorCode, "COLLECTIBLE_NOT_FOUND");

        /// <summary>
        /// The specified color palette ID was invalid.
        /// <code>
        /// account.updateColor
        /// </code>
        /// </summary>
        public static readonly RpcError ColorInvalid = new(ErrorCode, "COLOR_INVALID");

        /// <summary>
        /// The provided API id is invalid.
        /// <code>
        /// help.getConfig
        /// invokeWithLayer
        /// </code>
        /// </summary>
        public static readonly RpcError ConnectionApiIdInvalid = new(ErrorCode, "CONNECTION_API_ID_INVALID");

        /// <summary>
        /// App version is empty.
        /// <code>
        /// help.getConfig
        /// </code>
        /// </summary>
        public static readonly RpcError ConnectionAppVersionEmpty = new(ErrorCode, "CONNECTION_APP_VERSION_EMPTY");

        /// <summary>
        /// The specified connection ID is invalid.
        /// <code>
        /// account.getBotBusinessConnection
        /// </code>
        /// </summary>
        public static readonly RpcError ConnectionIdInvalid = new(ErrorCode, "CONNECTION_ID_INVALID");

        /// <summary>
        /// Layer invalid.
        /// <code>
        /// contacts.resolveUsername
        /// help.getConfig
        /// initConnection
        /// </code>
        /// </summary>
        public static readonly RpcError ConnectionLayerInvalid = new(ErrorCode, "CONNECTION_LAYER_INVALID");

        /// <summary>
        /// Contact to add is missing.
        /// <code>
        /// contacts.acceptContact
        /// </code>
        /// </summary>
        public static readonly RpcError ContactAddMissing = new(ErrorCode, "CONTACT_ADD_MISSING");

        /// <summary>
        /// The provided contact ID is invalid.
        /// <code>
        /// contacts.acceptContact
        /// contacts.addContact
        /// contacts.block
        /// contacts.deleteContact
        /// contacts.unblock
        /// </code>
        /// </summary>
        public static readonly RpcError ContactIdInvalid = new(ErrorCode, "CONTACT_ID_INVALID");

        /// <summary>
        /// The specified user is not a contact.
        /// <code>
        /// photos.uploadContactProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError ContactMissing = new(ErrorCode, "CONTACT_MISSING");

        /// <summary>
        /// Contact name empty.
        /// <code>
        /// contacts.addContact
        /// </code>
        /// </summary>
        public static readonly RpcError ContactNameEmpty = new(ErrorCode, "CONTACT_NAME_EMPTY");

        /// <summary>
        /// Missing contact request.
        /// <code>
        /// contacts.acceptContact
        /// </code>
        /// </summary>
        public static readonly RpcError ContactReqMissing = new(ErrorCode, "CONTACT_REQ_MISSING");

        /// <summary>
        /// An error occurred while creating the call.
        /// <code>
        /// phone.createGroupCall
        /// </code>
        /// </summary>
        public static readonly RpcError CreateCallFailed = new(ErrorCode, "CREATE_CALL_FAILED");

        /// <summary>
        /// The total amount of all prices is invalid.
        /// <code>
        /// messages.sendMedia
        /// payments.exportInvoice
        /// </code>
        /// </summary>
        public static readonly RpcError CurrencyTotalAmountInvalid = new(ErrorCode, "CURRENCY_TOTAL_AMOUNT_INVALID");

        /// <summary>
        /// Too many custom reactions were specified.
        /// <code>
        /// messages.sendReaction
        /// </code>
        /// </summary>
        public static readonly RpcError CustomReactionsTooMany = new(ErrorCode, "CUSTOM_REACTIONS_TOO_MANY");

        /// <summary>
        /// Encrypted data invalid.
        /// <code>
        /// help.getConfig
        /// messages.getBotCallbackAnswer
        /// messages.sendEncrypted
        /// messages.sendEncryptedService
        /// </code>
        /// </summary>
        public static readonly RpcError DataInvalid = new(ErrorCode, "DATA_INVALID");

        /// <summary>
        /// The provided JSON data is invalid.
        /// <code>
        /// bots.answerWebhookJSONQuery
        /// bots.invokeWebViewCustomMethod
        /// bots.sendCustomRequest
        /// help.acceptTermsOfService
        /// payments.assignPlayMarketTransaction
        /// phone.joinGroupCall
        /// phone.saveCallDebug
        /// </code>
        /// </summary>
        public static readonly RpcError DataJsonInvalid = new(ErrorCode, "DATA_JSON_INVALID");

        /// <summary>
        /// Data too long.
        /// <code>
        /// messages.sendEncrypted
        /// messages.sendEncryptedFile
        /// </code>
        /// </summary>
        public static readonly RpcError DataTooLong = new(ErrorCode, "DATA_TOO_LONG");

        /// <summary>
        /// Date empty.
        /// <code>
        /// updates.getDifference
        /// </code>
        /// </summary>
        public static readonly RpcError DateEmpty = new(ErrorCode, "DATE_EMPTY");

        /// <summary>
        /// The provided DC ID is invalid.
        /// <code>
        /// auth.exportAuthorization
        /// </code>
        /// </summary>
        public static readonly RpcError DcIdInvalid = new(ErrorCode, "DC_ID_INVALID");

        /// <summary>
        /// g_a invalid.
        /// <code>
        /// messages.requestEncryption
        /// </code>
        /// </summary>
        public static readonly RpcError DhGAInvalid = new(ErrorCode, "DH_G_A_INVALID");

        /// <summary>
        /// The specified document is invalid.
        /// <code>
        /// account.updateEmojiStatus
        /// channels.editForumTopic
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendReaction
        /// messages.setInlineBotResults
        /// upload.getWebFile
        /// </code>
        /// </summary>
        public static readonly RpcError DocumentInvalid = new(ErrorCode, "DOCUMENT_INVALID");

        /// <summary>
        /// Email hash expired.
        /// <code>
        /// account.cancelPasswordEmail
        /// account.confirmPasswordEmail
        /// account.resendPasswordEmail
        /// </code>
        /// </summary>
        public static readonly RpcError EmailHashExpired = new(ErrorCode, "EMAIL_HASH_EXPIRED");

        /// <summary>
        /// The specified email is invalid.
        /// <code>
        /// account.sendVerifyEmailCode
        /// account.updatePasswordSettings
        /// account.verifyEmail
        /// </code>
        /// </summary>
        public static readonly RpcError EmailInvalid = new(ErrorCode, "EMAIL_INVALID");

        /// <summary>
        /// The specified email cannot be used to complete the operation.
        /// <code>
        /// account.sendVerifyEmailCode
        /// account.verifyEmail
        /// </code>
        /// </summary>
        public static readonly RpcError EmailNotAllowed = new(ErrorCode, "EMAIL_NOT_ALLOWED");

        /// <summary>
        /// In order to change the login email with emailVerifyPurposeLoginChange, an existing login email must already be set using emailVerifyPurposeLoginSetup.
        /// <code>
        /// account.sendVerifyEmailCode
        /// </code>
        /// </summary>
        public static readonly RpcError EmailNotSetup = new(ErrorCode, "EMAIL_NOT_SETUP");

        /// <summary>
        /// Email unconfirmed.
        /// <code>
        /// account.updatePasswordSettings
        /// </code>
        /// </summary>
        public static readonly RpcError EmailUnconfirmed = new(ErrorCode, "EMAIL_UNCONFIRMED");

        /// <summary>
        /// The provided email isn't confirmed, <c>{0}</c> is the length of the verification code that was just sent to the email: use [account.verifyEmail](https://core.telegram.org/method/account.verifyEmail) to enter the received verification code and enable the recovery email.
        /// <code>
        /// account.updatePasswordSettings
        /// </code>
        /// </summary>
        public static readonly RpcError EmailUnconfirmedX = new(ErrorCode, "EMAIL_UNCONFIRMED_{0}");

        /// <summary>
        /// The verification email has expired.
        /// <code>
        /// account.verifyEmail
        /// </code>
        /// </summary>
        public static readonly RpcError EmailVerifyExpired = new(ErrorCode, "EMAIL_VERIFY_EXPIRED");

        /// <summary>
        /// The specified theme emoji is valid.
        /// <code>
        /// messages.setChatTheme
        /// </code>
        /// </summary>
        public static readonly RpcError EmojiInvalid = new(ErrorCode, "EMOJI_INVALID");

        /// <summary>
        /// The specified `video_emoji_markup` was invalid.
        /// <code>
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError EmojiMarkupInvalid = new(ErrorCode, "EMOJI_MARKUP_INVALID");

        /// <summary>
        /// The theme wasn't changed.
        /// <code>
        /// messages.setChatTheme
        /// </code>
        /// </summary>
        public static readonly RpcError EmojiNotModified = new(ErrorCode, "EMOJI_NOT_MODIFIED");

        /// <summary>
        /// The emoji is empty.
        /// <code>
        /// messages.getStickers
        /// messages.searchCustomEmoji
        /// </code>
        /// </summary>
        public static readonly RpcError EmoticonEmpty = new(ErrorCode, "EMOTICON_EMPTY");

        /// <summary>
        /// The specified emoji is invalid.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError EmoticonInvalid = new(ErrorCode, "EMOTICON_INVALID");

        /// <summary>
        /// inputStickerSetDice.emoji cannot be empty.
        /// <code>
        /// messages.getStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError EmoticonStickerpackMissing = new(ErrorCode, "EMOTICON_STICKERPACK_MISSING");

        /// <summary>
        /// Encrypted message invalid.
        /// <code>
        /// auth.bindTempAuthKey
        /// </code>
        /// </summary>
        public static readonly RpcError EncryptedMessageInvalid = new(ErrorCode, "ENCRYPTED_MESSAGE_INVALID");

        /// <summary>
        /// Secret chat already accepted.
        /// <code>
        /// messages.acceptEncryption
        /// messages.discardEncryption
        /// </code>
        /// </summary>
        public static readonly RpcError EncryptionAlreadyAccepted = new(ErrorCode, "ENCRYPTION_ALREADY_ACCEPTED");

        /// <summary>
        /// The secret chat was already declined.
        /// <code>
        /// messages.acceptEncryption
        /// messages.discardEncryption
        /// </code>
        /// </summary>
        public static readonly RpcError EncryptionAlreadyDeclined = new(ErrorCode, "ENCRYPTION_ALREADY_DECLINED");

        /// <summary>
        /// The secret chat was declined.
        /// <code>
        /// messages.sendEncrypted
        /// messages.sendEncryptedFile
        /// messages.sendEncryptedService
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError EncryptionDeclined = new(ErrorCode, "ENCRYPTION_DECLINED");

        /// <summary>
        /// The provided secret chat ID is invalid.
        /// <code>
        /// messages.discardEncryption
        /// messages.sendEncryptedService
        /// </code>
        /// </summary>
        public static readonly RpcError EncryptionIdInvalid = new(ErrorCode, "ENCRYPTION_ID_INVALID");

        /// <summary>
        /// You provided too many styled message entities.
        /// <code>
        /// messages.editMessage
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError EntitiesTooLong = new(ErrorCode, "ENTITIES_TOO_LONG");

        /// <summary>
        /// A specified [entity offset or length](https://core.telegram.org/api/entities#entity-length) is invalid, see [here ](https://core.telegram.org/api/entities#entity-length) for info on how to properly compute the entity offset/length.
        /// <code>
        /// help.editUserInfo
        /// messages.editInlineBotMessage
        /// messages.editMessage
        /// messages.getWebPagePreview
        /// messages.saveDraft
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError EntityBoundsInvalid = new(ErrorCode, "ENTITY_BOUNDS_INVALID");

        /// <summary>
        /// You mentioned an invalid user.
        /// <code>
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError EntityMentionUserInvalid = new(ErrorCode, "ENTITY_MENTION_USER_INVALID");

        /// <summary>
        /// The provided error message is empty.
        /// <code>
        /// messages.setBotPrecheckoutResults
        /// </code>
        /// </summary>
        public static readonly RpcError ErrorTextEmpty = new(ErrorCode, "ERROR_TEXT_EMPTY");

        /// <summary>
        /// The specified expiration date is invalid.
        /// <code>
        /// messages.exportChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError ExpireDateInvalid = new(ErrorCode, "EXPIRE_DATE_INVALID");

        /// <summary>
        /// Provided card is invalid.
        /// <code>
        /// contacts.importCard
        /// </code>
        /// </summary>
        public static readonly RpcError ExportCardInvalid = new(ErrorCode, "EXPORT_CARD_INVALID");

        /// <summary>
        /// The specified `stars_amount` of the passed [inputMediaPaidMedia](https://core.telegram.org/constructor/inputMediaPaidMedia) is invalid.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ExtendedMediaAmountInvalid = new(ErrorCode, "EXTENDED_MEDIA_AMOUNT_INVALID");

        /// <summary>
        /// External URL invalid.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ExternalUrlInvalid = new(ErrorCode, "EXTERNAL_URL_INVALID");

        /// <summary>
        /// File content-type is invalid.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError FileContentTypeInvalid = new(ErrorCode, "FILE_CONTENT_TYPE_INVALID");

        /// <summary>
        /// An empty file was provided.
        /// <code>
        /// messages.sendEncryptedFile
        /// </code>
        /// </summary>
        public static readonly RpcError FileEmtpy = new(ErrorCode, "FILE_EMTPY");

        /// <summary>
        /// The provided file id is invalid.
        /// <code>
        /// upload.getFile
        /// </code>
        /// </summary>
        public static readonly RpcError FileIdInvalid = new(ErrorCode, "FILE_ID_INVALID");

        /// <summary>
        /// The provided file part is empty.
        /// <code>
        /// upload.saveBigFilePart
        /// upload.saveFilePart
        /// </code>
        /// </summary>
        public static readonly RpcError FilePartEmpty = new(ErrorCode, "FILE_PART_EMPTY");

        /// <summary>
        /// The file part number is invalid.
        /// <code>
        /// upload.saveBigFilePart
        /// upload.saveFilePart
        /// </code>
        /// </summary>
        public static readonly RpcError FilePartInvalid = new(ErrorCode, "FILE_PART_INVALID");

        /// <summary>
        /// The length of a file part is invalid.
        /// <code>
        /// messages.sendMedia
        /// messages.uploadMedia
        /// </code>
        /// </summary>
        public static readonly RpcError FilePartLengthInvalid = new(ErrorCode, "FILE_PART_LENGTH_INVALID");

        /// <summary>
        /// Provided file part size has changed.
        /// <code>
        /// upload.saveBigFilePart
        /// </code>
        /// </summary>
        public static readonly RpcError FilePartSizeChanged = new(ErrorCode, "FILE_PART_SIZE_CHANGED");

        /// <summary>
        /// The provided file part size is invalid.
        /// <code>
        /// upload.saveBigFilePart
        /// </code>
        /// </summary>
        public static readonly RpcError FilePartSizeInvalid = new(ErrorCode, "FILE_PART_SIZE_INVALID");

        /// <summary>
        /// The uploaded file part is too big.
        /// <code>
        /// upload.saveBigFilePart
        /// </code>
        /// </summary>
        public static readonly RpcError FilePartTooBig = new(ErrorCode, "FILE_PART_TOO_BIG");

        /// <summary>
        /// The size of the uploaded file part is too small, please see the documentation for the allowed sizes.
        /// <code>
        /// upload.saveBigFilePart
        /// </code>
        /// </summary>
        public static readonly RpcError FilePartTooSmall = new(ErrorCode, "FILE_PART_TOO_SMALL");

        /// <summary>
        /// The number of file parts is invalid.
        /// <code>
        /// channels.editPhoto
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.uploadMedia
        /// photos.updateProfilePhoto
        /// photos.uploadProfilePhoto
        /// upload.saveBigFilePart
        /// </code>
        /// </summary>
        public static readonly RpcError FilePartsInvalid = new(ErrorCode, "FILE_PARTS_INVALID");

        /// <summary>
        /// The file reference of the media file at index <c>{0}</c> in the passed media array expired, it [must be refreshed](https://core.telegram.org/api/file_reference).
        /// <code>
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError FileReferenceXExpired = new(ErrorCode, "FILE_REFERENCE_{0}_EXPIRED");

        /// <summary>
        /// The file reference of the media file at index <c>{0}</c> in the passed media array is invalid.
        /// <code>
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError FileReferenceXInvalid = new(ErrorCode, "FILE_REFERENCE_{0}_INVALID");

        /// <summary>
        /// An empty [file reference](https://core.telegram.org/api/file_reference) was specified.
        /// <code>
        /// messages.sendMedia
        /// upload.getFile
        /// </code>
        /// </summary>
        public static readonly RpcError FileReferenceEmpty = new(ErrorCode, "FILE_REFERENCE_EMPTY");

        /// <summary>
        /// File reference expired, it must be refetched as described in [the documentation](https://core.telegram.org/api/file_reference).
        /// <code>
        /// messages.sendMedia
        /// upload.getFile
        /// </code>
        /// </summary>
        public static readonly RpcError FileReferenceExpired = new(ErrorCode, "FILE_REFERENCE_EXPIRED");

        /// <summary>
        /// The specified [file reference](https://core.telegram.org/api/file_reference) is invalid.
        /// <code>
        /// channels.editPhoto
        /// </code>
        /// </summary>
        public static readonly RpcError FileReferenceInvalid = new(ErrorCode, "FILE_REFERENCE_INVALID");

        /// <summary>
        /// An empty file title was specified.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError FileTitleEmpty = new(ErrorCode, "FILE_TITLE_EMPTY");

        /// <summary>
        /// The master DC did not accept the `file_token` (e.g., the token has expired). Continue downloading the file from the master DC using upload.getFile.
        /// <code>
        /// upload.getCdnFile
        /// upload.getCdnFileHashes
        /// upload.reuploadCdnFile
        /// </code>
        /// </summary>
        public static readonly RpcError FileTokenInvalid = new(ErrorCode, "FILE_TOKEN_INVALID");

        /// <summary>
        /// The specified filter ID is invalid.
        /// <code>
        /// chatlists.deleteExportedInvite
        /// chatlists.editExportedInvite
        /// chatlists.exportChatlistInvite
        /// chatlists.getChatlistUpdates
        /// chatlists.getExportedInvites
        /// chatlists.getLeaveChatlistSuggestions
        /// chatlists.hideChatlistUpdates
        /// chatlists.joinChatlistUpdates
        /// chatlists.leaveChatlist
        /// messages.updateDialogFilter
        /// </code>
        /// </summary>
        public static readonly RpcError FilterIdInvalid = new(ErrorCode, "FILTER_ID_INVALID");

        /// <summary>
        /// The include_peers vector of the filter is empty.
        /// <code>
        /// chatlists.joinChatlistInvite
        /// chatlists.joinChatlistUpdates
        /// messages.updateDialogFilter
        /// </code>
        /// </summary>
        public static readonly RpcError FilterIncludeEmpty = new(ErrorCode, "FILTER_INCLUDE_EMPTY");

        /// <summary>
        /// The specified filter cannot be used in this context.
        /// <code>
        /// chatlists.deleteExportedInvite
        /// chatlists.editExportedInvite
        /// chatlists.exportChatlistInvite
        /// chatlists.getChatlistUpdates
        /// chatlists.getLeaveChatlistSuggestions
        /// chatlists.hideChatlistUpdates
        /// messages.getSearchResultsCalendar
        /// messages.searchSentMedia
        /// </code>
        /// </summary>
        public static readonly RpcError FilterNotSupported = new(ErrorCode, "FILTER_NOT_SUPPORTED");

        /// <summary>
        /// The title field of the filter is empty.
        /// <code>
        /// messages.updateDialogFilter
        /// </code>
        /// </summary>
        public static readonly RpcError FilterTitleEmpty = new(ErrorCode, "FILTER_TITLE_EMPTY");

        /// <summary>
        /// The first name is invalid.
        /// <code>
        /// account.updateProfile
        /// auth.signUp
        /// </code>
        /// </summary>
        public static readonly RpcError FirstnameInvalid = new(ErrorCode, "FIRSTNAME_INVALID");

        /// <summary>
        /// An empty folder ID was specified.
        /// <code>
        /// folders.deleteFolder
        /// </code>
        /// </summary>
        public static readonly RpcError FolderIdEmpty = new(ErrorCode, "FOLDER_ID_EMPTY");

        /// <summary>
        /// Invalid folder ID.
        /// <code>
        /// folders.deleteFolder
        /// folders.editPeerFolders
        /// messages.getDialogs
        /// messages.getPinnedDialogs
        /// messages.searchGlobal
        /// </code>
        /// </summary>
        public static readonly RpcError FolderIdInvalid = new(ErrorCode, "FOLDER_ID_INVALID");

        /// <summary>
        /// The form was generated more than 10 minutes ago and has expired, please re-generate it using [payments.getPaymentForm](https://core.telegram.org/method/payments.getPaymentForm) and pass the new `form_id`.
        /// <code>
        /// payments.sendStarsForm
        /// </code>
        /// </summary>
        public static readonly RpcError FormExpired = new(ErrorCode, "FORM_EXPIRED");

        /// <summary>
        /// The specified form ID is empty.
        /// <code>
        /// payments.sendStarsForm
        /// </code>
        /// </summary>
        public static readonly RpcError FormIdEmpty = new(ErrorCode, "FORM_ID_EMPTY");

        /// <summary>
        /// Please update your client.
        /// <code>
        /// payments.sendStarsForm
        /// </code>
        /// </summary>
        public static readonly RpcError FormUnsupported = new(ErrorCode, "FORM_UNSUPPORTED");

        /// <summary>
        /// You can't execute the specified action because the group is a [forum](https://core.telegram.org/api/forum), disable forum functionality to continue.
        /// <code>
        /// channels.convertToGigagroup
        /// channels.togglePreHistoryHidden
        /// </code>
        /// </summary>
        public static readonly RpcError ForumEnabled = new(ErrorCode, "FORUM_ENABLED");

        /// <summary>
        /// You were just elected admin, you can't add or modify other admins yet.
        /// <code>
        /// channels.editAdmin
        /// </code>
        /// </summary>
        public static readonly RpcError FreshChangeAdminsForbidden = new(ErrorCode, "FRESH_CHANGE_ADMINS_FORBIDDEN");

        /// <summary>
        /// Bots can't use fromMessage min constructors.
        /// <code>
        /// messages.sendMessage
        /// updates.getChannelDifference
        /// users.getUsers
        /// </code>
        /// </summary>
        public static readonly RpcError FromMessageBotDisabled = new(ErrorCode, "FROM_MESSAGE_BOT_DISABLED");

        /// <summary>
        /// The specified from_id is invalid.
        /// <code>
        /// messages.search
        /// </code>
        /// </summary>
        public static readonly RpcError FromPeerInvalid = new(ErrorCode, "FROM_PEER_INVALID");

        /// <summary>
        /// Bots can't send another bot's game.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError GameBotInvalid = new(ErrorCode, "GAME_BOT_INVALID");

        /// <summary>
        /// You can't modify the icon of the "General" topic.
        /// <code>
        /// channels.editForumTopic
        /// </code>
        /// </summary>
        public static readonly RpcError GeneralModifyIconForbidden = new(ErrorCode, "GENERAL_MODIFY_ICON_FORBIDDEN");

        /// <summary>
        /// Invalid geoposition provided.
        /// <code>
        /// contacts.getLocated
        /// </code>
        /// </summary>
        public static readonly RpcError GeoPointInvalid = new(ErrorCode, "GEO_POINT_INVALID");

        /// <summary>
        /// GIF content-type invalid.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError GifContentTypeInvalid = new(ErrorCode, "GIF_CONTENT_TYPE_INVALID");

        /// <summary>
        /// The provided GIF ID is invalid.
        /// <code>
        /// messages.saveGif
        /// </code>
        /// </summary>
        public static readonly RpcError GifIdInvalid = new(ErrorCode, "GIF_ID_INVALID");

        /// <summary>
        /// The specified gift slug has expired.
        /// <code>
        /// payments.applyGiftCode
        /// payments.checkGiftCode
        /// </code>
        /// </summary>
        public static readonly RpcError GiftSlugExpired = new(ErrorCode, "GIFT_SLUG_EXPIRED");

        /// <summary>
        /// The specified slug is invalid.
        /// <code>
        /// payments.applyGiftCode
        /// payments.checkGiftCode
        /// </code>
        /// </summary>
        public static readonly RpcError GiftSlugInvalid = new(ErrorCode, "GIFT_SLUG_INVALID");

        /// <summary>
        /// This graph has expired, please obtain a new graph token.
        /// <code>
        /// stats.loadAsyncGraph
        /// </code>
        /// </summary>
        public static readonly RpcError GraphExpiredReload = new(ErrorCode, "GRAPH_EXPIRED_RELOAD");

        /// <summary>
        /// Invalid graph token provided, please reload the stats and provide the updated token.
        /// <code>
        /// stats.loadAsyncGraph
        /// </code>
        /// </summary>
        public static readonly RpcError GraphInvalidReload = new(ErrorCode, "GRAPH_INVALID_RELOAD");

        /// <summary>
        /// The graph is outdated, please get a new async token using stats.getBroadcastStats.
        /// <code>
        /// stats.loadAsyncGraph
        /// </code>
        /// </summary>
        public static readonly RpcError GraphOutdatedReload = new(ErrorCode, "GRAPH_OUTDATED_RELOAD");

        /// <summary>
        /// The group call was already discarded.
        /// <code>
        /// phone.createGroupCall
        /// phone.discardGroupCall
        /// phone.discardGroupCallRequest
        /// </code>
        /// </summary>
        public static readonly RpcError GroupcallAlreadyDiscarded = new(ErrorCode, "GROUPCALL_ALREADY_DISCARDED");

        /// <summary>
        /// The group call has already ended.
        /// <code>
        /// phone.editGroupCallParticipant
        /// </code>
        /// </summary>
        public static readonly RpcError GroupcallForbidden = new(ErrorCode, "GROUPCALL_FORBIDDEN");

        /// <summary>
        /// The specified group call is invalid.
        /// <code>
        /// phone.checkGroupCall
        /// phone.discardGroupCall
        /// phone.editGroupCallParticipant
        /// phone.editGroupCallTitle
        /// phone.exportGroupCallInvite
        /// phone.getGroupCall
        /// phone.getGroupCallStreamChannels
        /// phone.getGroupParticipants
        /// phone.inviteToGroupCall
        /// phone.joinGroupCall
        /// phone.joinGroupCallPresentation
        /// phone.leaveGroupCall
        /// phone.leaveGroupCallPresentation
        /// phone.startScheduledGroupCall
        /// phone.toggleGroupCallRecord
        /// phone.toggleGroupCallSettings
        /// phone.toggleGroupCallStartSubscription
        /// </code>
        /// </summary>
        public static readonly RpcError GroupcallInvalid = new(ErrorCode, "GROUPCALL_INVALID");

        /// <summary>
        /// You haven't joined this group call.
        /// <code>
        /// phone.checkGroupCall
        /// phone.getGroupCallStreamChannels
        /// </code>
        /// </summary>
        public static readonly RpcError GroupcallJoinMissing = new(ErrorCode, "GROUPCALL_JOIN_MISSING");

        /// <summary>
        /// Group call settings weren't modified.
        /// <code>
        /// phone.toggleGroupCallRecord
        /// phone.toggleGroupCallSettings
        /// </code>
        /// </summary>
        public static readonly RpcError GroupcallNotModified = new(ErrorCode, "GROUPCALL_NOT_MODIFIED");

        /// <summary>
        /// The app needs to retry joining the group call with a new SSRC value.
        /// <code>
        /// phone.joinGroupCall
        /// </code>
        /// </summary>
        public static readonly RpcError GroupcallSsrcDuplicateMuch = new(ErrorCode, "GROUPCALL_SSRC_DUPLICATE_MUCH");

        /// <summary>
        /// Invalid grouped media.
        /// <code>
        /// messages.forwardMessages
        /// </code>
        /// </summary>
        public static readonly RpcError GroupedMediaInvalid = new(ErrorCode, "GROUPED_MEDIA_INVALID");

        /// <summary>
        /// The provided hash is invalid.
        /// <code>
        /// account.changeAuthorizationSettings
        /// account.resetAuthorization
        /// account.resetWebAuthorization
        /// account.sendConfirmPhoneCode
        /// </code>
        /// </summary>
        public static readonly RpcError HashInvalid = new(ErrorCode, "HASH_INVALID");

        /// <summary>
        /// The specified hashtag is invalid.
        /// <code>
        /// stories.searchPosts
        /// </code>
        /// </summary>
        public static readonly RpcError HashtagInvalid = new(ErrorCode, "HASHTAG_INVALID");

        /// <summary>
        /// The join request was missing or was already handled.
        /// <code>
        /// messages.hideAllChatJoinRequests
        /// messages.hideChatJoinRequest
        /// </code>
        /// </summary>
        public static readonly RpcError HideRequesterMissing = new(ErrorCode, "HIDE_REQUESTER_MISSING");

        /// <summary>
        /// The passed ID is invalid.
        /// <code>
        /// messages.getPreparedInlineMessage
        /// </code>
        /// </summary>
        public static readonly RpcError IdInvalid = new(ErrorCode, "ID_INVALID");

        /// <summary>
        /// Failure while processing image.
        /// <code>
        /// channels.editPhoto
        /// messages.editChatPhoto
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.uploadMedia
        /// photos.updateProfilePhoto
        /// photos.uploadProfilePhoto
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError ImageProcessFailed = new(ErrorCode, "IMAGE_PROCESS_FAILED");

        /// <summary>
        /// The specified chat export file is invalid.
        /// <code>
        /// messages.initHistoryImport
        /// </code>
        /// </summary>
        public static readonly RpcError ImportFileInvalid = new(ErrorCode, "IMPORT_FILE_INVALID");

        /// <summary>
        /// The date specified in the import file is invalid.
        /// <code>
        /// messages.initHistoryImport
        /// </code>
        /// </summary>
        public static readonly RpcError ImportFormatDateInvalid = new(ErrorCode, "IMPORT_FORMAT_DATE_INVALID");

        /// <summary>
        /// The specified chat export file was exported from an unsupported chat app.
        /// <code>
        /// messages.checkHistoryImport
        /// messages.initHistoryImport
        /// </code>
        /// </summary>
        public static readonly RpcError ImportFormatUnrecognized = new(ErrorCode, "IMPORT_FORMAT_UNRECOGNIZED");

        /// <summary>
        /// The specified import ID is invalid.
        /// <code>
        /// messages.startHistoryImport
        /// messages.uploadImportedMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ImportIdInvalid = new(ErrorCode, "IMPORT_ID_INVALID");

        /// <summary>
        /// The specified token is invalid.
        /// <code>
        /// contacts.importContactToken
        /// </code>
        /// </summary>
        public static readonly RpcError ImportTokenInvalid = new(ErrorCode, "IMPORT_TOKEN_INVALID");

        /// <summary>
        /// The inline query expired.
        /// <code>
        /// messages.sendInlineBotResult
        /// </code>
        /// </summary>
        public static readonly RpcError InlineResultExpired = new(ErrorCode, "INLINE_RESULT_EXPIRED");

        /// <summary>
        /// The specified folder is invalid.
        /// <code>
        /// chatlists.getChatlistUpdates
        /// </code>
        /// </summary>
        public static readonly RpcError InputChatlistInvalid = new(ErrorCode, "INPUT_CHATLIST_INVALID");

        /// <summary>
        /// The specified [InputFile](https://core.telegram.org/type/InputFile) is invalid.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError InputFileInvalid = new(ErrorCode, "INPUT_FILE_INVALID");

        /// <summary>
        /// The specified filter is invalid.
        /// <code>
        /// messages.search
        /// messages.searchGlobal
        /// </code>
        /// </summary>
        public static readonly RpcError InputFilterInvalid = new(ErrorCode, "INPUT_FILTER_INVALID");

        /// <summary>
        /// The specified peer array is empty.
        /// <code>
        /// messages.getPeerDialogs
        /// </code>
        /// </summary>
        public static readonly RpcError InputPeersEmpty = new(ErrorCode, "INPUT_PEERS_EMPTY");

        /// <summary>
        /// The specified text is empty.
        /// <code>
        /// messages.translateText
        /// </code>
        /// </summary>
        public static readonly RpcError InputTextEmpty = new(ErrorCode, "INPUT_TEXT_EMPTY");

        /// <summary>
        /// The specified text is too long.
        /// <code>
        /// messages.translateText
        /// </code>
        /// </summary>
        public static readonly RpcError InputTextTooLong = new(ErrorCode, "INPUT_TEXT_TOO_LONG");

        /// <summary>
        /// The specified user was deleted.
        /// <code>
        /// channels.editAdmin
        /// channels.editBanned
        /// channels.inviteToChannel
        /// channels.reportSpam
        /// contacts.block
        /// messages.addChatUser
        /// messages.createChat
        /// messages.deleteChatUser
        /// messages.editMessage
        /// messages.forwardMessages
        /// messages.getInlineBotResults
        /// messages.hideChatJoinRequest
        /// messages.requestEncryption
        /// messages.requestWebView
        /// messages.search
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendScreenshotNotification
        /// messages.setTyping
        /// messages.startBot
        /// messages.uploadMedia
        /// phone.requestCall
        /// </code>
        /// </summary>
        public static readonly RpcError InputUserDeactivated = new(ErrorCode, "INPUT_USER_DEACTIVATED");

        /// <summary>
        /// If the user has anonymously joined a group call as a channel, they can't invite other users to the group call because that would cause deanonymization, because the invite would be sent using the original user ID, not the anonymized channel ID.
        /// <code>
        /// phone.inviteToGroupCall
        /// </code>
        /// </summary>
        public static readonly RpcError InviteForbiddenWithJoinas = new(ErrorCode, "INVITE_FORBIDDEN_WITH_JOINAS");

        /// <summary>
        /// The invite hash is empty.
        /// <code>
        /// channels.joinChannel
        /// messages.checkChatInvite
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InviteHashEmpty = new(ErrorCode, "INVITE_HASH_EMPTY");

        /// <summary>
        /// The invite link has expired.
        /// <code>
        /// channels.exportInvite
        /// channels.joinChannel
        /// invokeWithLayer
        /// messages.checkChatInvite
        /// messages.deleteExportedChatInvite
        /// messages.editExportedChatInvite
        /// messages.getChatInviteImporters
        /// messages.getExportedChatInvite
        /// messages.hideAllChatJoinRequests
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InviteHashExpired = new(ErrorCode, "INVITE_HASH_EXPIRED");

        /// <summary>
        /// The invite hash is invalid.
        /// <code>
        /// channels.joinChannel
        /// messages.checkChatInvite
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InviteHashInvalid = new(ErrorCode, "INVITE_HASH_INVALID");

        /// <summary>
        /// You have successfully requested to join this chat or channel.
        /// <code>
        /// channels.joinChannel
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InviteRequestSent = new(ErrorCode, "INVITE_REQUEST_SENT");

        /// <summary>
        /// The specified invite link was already revoked or is invalid.
        /// <code>
        /// messages.deleteExportedChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InviteRevokedMissing = new(ErrorCode, "INVITE_REVOKED_MISSING");

        /// <summary>
        /// The specified invite slug is empty.
        /// <code>
        /// chatlists.checkChatlistInvite
        /// chatlists.editExportedInvite
        /// chatlists.joinChatlistInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InviteSlugEmpty = new(ErrorCode, "INVITE_SLUG_EMPTY");

        /// <summary>
        /// The specified chat folder link has expired.
        /// <code>
        /// chatlists.checkChatlistInvite
        /// chatlists.deleteExportedInvite
        /// chatlists.editExportedInvite
        /// chatlists.joinChatlistInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InviteSlugExpired = new(ErrorCode, "INVITE_SLUG_EXPIRED");

        /// <summary>
        /// The specified invitation slug is invalid.
        /// <code>
        /// chatlists.deleteExportedInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InviteSlugInvalid = new(ErrorCode, "INVITE_SLUG_INVALID");

        /// <summary>
        /// The maximum number of per-folder invites specified by the `chatlist_invites_limit_default`/`chatlist_invites_limit_premium` [client configuration parameters ](https://core.telegram.org/api/config#chatlist-invites-limit-default) was reached.
        /// <code>
        /// chatlists.exportChatlistInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InvitesTooMuch = new(ErrorCode, "INVITES_TOO_MUCH");

        /// <summary>
        /// The specified invoice payload is invalid.
        /// <code>
        /// messages.sendMedia
        /// payments.exportInvoice
        /// </code>
        /// </summary>
        public static readonly RpcError InvoicePayloadInvalid = new(ErrorCode, "INVOICE_PAYLOAD_INVALID");

        /// <summary>
        /// The specified peer cannot be used to join a group call.
        /// <code>
        /// phone.joinGroupCall
        /// phone.saveDefaultGroupCallJoinAs
        /// </code>
        /// </summary>
        public static readonly RpcError JoinAsPeerInvalid = new(ErrorCode, "JOIN_AS_PEER_INVALID");

        /// <summary>
        /// The specified language code is invalid.
        /// <code>
        /// bots.getBotInfo
        /// bots.resetBotCommands
        /// bots.setBotCommands
        /// </code>
        /// </summary>
        public static readonly RpcError LangCodeInvalid = new(ErrorCode, "LANG_CODE_INVALID");

        /// <summary>
        /// The specified language code is not supported.
        /// <code>
        /// langpack.getLangPack
        /// langpack.getLanguage
        /// langpack.getStrings
        /// </code>
        /// </summary>
        public static readonly RpcError LangCodeNotSupported = new(ErrorCode, "LANG_CODE_NOT_SUPPORTED");

        /// <summary>
        /// The provided language pack is invalid.
        /// <code>
        /// langpack.getDifference
        /// langpack.getLangPack
        /// langpack.getLanguage
        /// langpack.getLanguages
        /// langpack.getStrings
        /// </code>
        /// </summary>
        public static readonly RpcError LangPackInvalid = new(ErrorCode, "LANG_PACK_INVALID");

        /// <summary>
        /// The specified lang_code is invalid.
        /// <code>
        /// langpack.getLangPack
        /// </code>
        /// </summary>
        public static readonly RpcError LanguageInvalid = new(ErrorCode, "LANGUAGE_INVALID");

        /// <summary>
        /// The last name is invalid.
        /// <code>
        /// auth.signUp
        /// </code>
        /// </summary>
        public static readonly RpcError LastnameInvalid = new(ErrorCode, "LASTNAME_INVALID");

        /// <summary>
        /// The provided limit is invalid.
        /// <code>
        /// upload.getFile
        /// </code>
        /// </summary>
        public static readonly RpcError LimitInvalid = new(ErrorCode, "LIMIT_INVALID");

        /// <summary>
        /// Discussion link not modified.
        /// <code>
        /// channels.setDiscussionGroup
        /// </code>
        /// </summary>
        public static readonly RpcError LinkNotModified = new(ErrorCode, "LINK_NOT_MODIFIED");

        /// <summary>
        /// The provided location is invalid.
        /// <code>
        /// photos.updateProfilePhoto
        /// upload.getFile
        /// upload.getFileHashes
        /// upload.getWebFile
        /// upload.reuploadCdnFile
        /// </code>
        /// </summary>
        public static readonly RpcError LocationInvalid = new(ErrorCode, "LOCATION_INVALID");

        /// <summary>
        /// The specified maximum date is invalid.
        /// <code>
        /// messages.deleteHistory
        /// messages.readEncryptedHistory
        /// </code>
        /// </summary>
        public static readonly RpcError MaxDateInvalid = new(ErrorCode, "MAX_DATE_INVALID");

        /// <summary>
        /// The provided max ID is invalid.
        /// <code>
        /// photos.getUserPhotos
        /// stories.readStories
        /// </code>
        /// </summary>
        public static readonly RpcError MaxIdInvalid = new(ErrorCode, "MAX_ID_INVALID");

        /// <summary>
        /// The specified max_qts is invalid.
        /// <code>
        /// messages.receivedQueue
        /// </code>
        /// </summary>
        public static readonly RpcError MaxQtsInvalid = new(ErrorCode, "MAX_QTS_INVALID");

        /// <summary>
        /// The MD5 checksums do not match.
        /// <code>
        /// messages.sendEncryptedFile
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError Md5ChecksumInvalid = new(ErrorCode, "MD5_CHECKSUM_INVALID");

        /// <summary>
        /// The caption is too long.
        /// <code>
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError MediaCaptionTooLong = new(ErrorCode, "MEDIA_CAPTION_TOO_LONG");

        /// <summary>
        /// The provided media object is invalid.
        /// <code>
        /// messages.editMessage
        /// messages.forwardMessages
        /// messages.getAttachedStickers
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMultiMedia
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError MediaEmpty = new(ErrorCode, "MEDIA_EMPTY");

        /// <summary>
        /// The specified media file is invalid.
        /// <code>
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError MediaFileInvalid = new(ErrorCode, "MEDIA_FILE_INVALID");

        /// <summary>
        /// You tried to send media of different types in an album.
        /// <code>
        /// messages.editMessage
        /// </code>
        /// </summary>
        public static readonly RpcError MediaGroupedInvalid = new(ErrorCode, "MEDIA_GROUPED_INVALID");

        /// <summary>
        /// Media invalid.
        /// <code>
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.sendMultiMedia
        /// messages.uploadImportedMedia
        /// messages.uploadMedia
        /// payments.exportInvoice
        /// </code>
        /// </summary>
        public static readonly RpcError MediaInvalid = new(ErrorCode, "MEDIA_INVALID");

        /// <summary>
        /// The new media is invalid.
        /// <code>
        /// messages.editMessage
        /// </code>
        /// </summary>
        public static readonly RpcError MediaNewInvalid = new(ErrorCode, "MEDIA_NEW_INVALID");

        /// <summary>
        /// Previous media invalid.
        /// <code>
        /// messages.editMessage
        /// </code>
        /// </summary>
        public static readonly RpcError MediaPrevInvalid = new(ErrorCode, "MEDIA_PREV_INVALID");

        /// <summary>
        /// The specified media TTL is invalid.
        /// <code>
        /// messages.editMessage
        /// </code>
        /// </summary>
        public static readonly RpcError MediaTtlInvalid = new(ErrorCode, "MEDIA_TTL_INVALID");

        /// <summary>
        /// The specified media type cannot be used in stories.
        /// <code>
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError MediaTypeInvalid = new(ErrorCode, "MEDIA_TYPE_INVALID");

        /// <summary>
        /// A non-story video cannot be repubblished as a story (emitted when trying to resend a non-story video as a story using inputDocument).
        /// <code>
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError MediaVideoStoryMissing = new(ErrorCode, "MEDIA_VIDEO_STORY_MISSING");

        /// <summary>
        /// This method can only be invoked on a geogroup.
        /// <code>
        /// channels.editLocation
        /// </code>
        /// </summary>
        public static readonly RpcError MegagroupGeoRequired = new(ErrorCode, "MEGAGROUP_GEO_REQUIRED");

        /// <summary>
        /// Invalid supergroup ID.
        /// <code>
        /// channels.setDiscussionGroup
        /// </code>
        /// </summary>
        public static readonly RpcError MegagroupIdInvalid = new(ErrorCode, "MEGAGROUP_ID_INVALID");

        /// <summary>
        /// Group with hidden history for new members can't be set as discussion groups.
        /// <code>
        /// channels.setDiscussionGroup
        /// </code>
        /// </summary>
        public static readonly RpcError MegagroupPrehistoryHidden = new(ErrorCode, "MEGAGROUP_PREHISTORY_HIDDEN");

        /// <summary>
        /// You can only use this method on a supergroup.
        /// <code>
        /// channels.editLocation
        /// stats.getMegagroupStats
        /// </code>
        /// </summary>
        public static readonly RpcError MegagroupRequired = new(ErrorCode, "MEGAGROUP_REQUIRED");

        /// <summary>
        /// You can't edit this message anymore, too much time has passed since its creation.
        /// <code>
        /// messages.editMessage
        /// </code>
        /// </summary>
        public static readonly RpcError MessageEditTimeExpired = new(ErrorCode, "MESSAGE_EDIT_TIME_EXPIRED");

        /// <summary>
        /// The provided message is empty.
        /// <code>
        /// auth.sendInvites
        /// messages.editMessage
        /// messages.getWebPagePreview
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError MessageEmpty = new(ErrorCode, "MESSAGE_EMPTY");

        /// <summary>
        /// The provided message id is invalid.
        /// <code>
        /// channels.exportMessageLink
        /// messages.deleteHistory
        /// messages.deleteMessages
        /// messages.editInlineBotMessage
        /// messages.editMessage
        /// messages.forwardMessage
        /// messages.forwardMessages
        /// messages.getBotCallbackAnswer
        /// messages.getGameHighScores
        /// messages.getInlineGameHighScores
        /// messages.getMessageEditData
        /// messages.getMessagesReadParticipants
        /// messages.getOutboxReadDate
        /// messages.getPollResults
        /// messages.sendBotRequestedPeer
        /// messages.sendPaidReaction
        /// messages.sendReaction
        /// messages.sendScheduledMessages
        /// messages.sendVote
        /// messages.setGameScore
        /// messages.setInlineGameScore
        /// messages.updatePinnedMessage
        /// payments.getPaymentForm
        /// payments.getPaymentReceipt
        /// payments.sendPaymentForm
        /// payments.validateRequestedInfo
        /// stats.getMessagePublicForwards
        /// stats.getMessageStats
        /// </code>
        /// </summary>
        public static readonly RpcError MessageIdInvalid = new(ErrorCode, "MESSAGE_ID_INVALID");

        /// <summary>
        /// No message ids were provided.
        /// <code>
        /// channels.getMessages
        /// messages.forwardMessages
        /// </code>
        /// </summary>
        public static readonly RpcError MessageIdsEmpty = new(ErrorCode, "MESSAGE_IDS_EMPTY");

        /// <summary>
        /// The provided message data is identical to the previous message data, the message wasn't modified.
        /// <code>
        /// messages.editInlineBotMessage
        /// messages.editMessage
        /// messages.sendReaction
        /// </code>
        /// </summary>
        public static readonly RpcError MessageNotModified = new(ErrorCode, "MESSAGE_NOT_MODIFIED");

        /// <summary>
        /// The specified message wasn't read yet.
        /// <code>
        /// messages.getOutboxReadDate
        /// </code>
        /// </summary>
        public static readonly RpcError MessageNotReadYet = new(ErrorCode, "MESSAGE_NOT_READ_YET");

        /// <summary>
        /// Poll closed.
        /// <code>
        /// messages.sendVote
        /// </code>
        /// </summary>
        public static readonly RpcError MessagePollClosed = new(ErrorCode, "MESSAGE_POLL_CLOSED");

        /// <summary>
        /// The provided message is too long.
        /// <code>
        /// messages.editMessage
        /// messages.sendMessage
        /// messages.setBotCallbackAnswer
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError MessageTooLong = new(ErrorCode, "MESSAGE_TOO_LONG");

        /// <summary>
        /// The message is too old, the requested information is not available.
        /// <code>
        /// messages.getOutboxReadDate
        /// </code>
        /// </summary>
        public static readonly RpcError MessageTooOld = new(ErrorCode, "MESSAGE_TOO_OLD");

        /// <summary>
        /// The specified method is invalid.
        /// <code>
        /// bots.sendCustomRequest
        /// messages.searchGifs
        /// </code>
        /// </summary>
        public static readonly RpcError MethodInvalid = new(ErrorCode, "METHOD_INVALID");

        /// <summary>
        /// The specified minimum date is invalid.
        /// <code>
        /// messages.deleteHistory
        /// </code>
        /// </summary>
        public static readonly RpcError MinDateInvalid = new(ErrorCode, "MIN_DATE_INVALID");

        /// <summary>
        /// Invalid message ID provided.
        /// <code>
        /// account.updateNotifySettings
        /// channels.checkUsername
        /// channels.deleteMessages
        /// channels.deleteParticipantHistory
        /// channels.deleteUserHistory
        /// channels.editBanned
        /// channels.exportMessageLink
        /// channels.getAdminLog
        /// channels.getChannels
        /// channels.getFullChannel
        /// channels.getMessages
        /// channels.getParticipant
        /// channels.getParticipants
        /// channels.getSponsoredMessages
        /// channels.inviteToChannel
        /// channels.joinChannel
        /// channels.leaveChannel
        /// channels.readHistory
        /// channels.readMessageContents
        /// channels.reportSpam
        /// contacts.acceptContact
        /// contacts.addContact
        /// contacts.block
        /// contacts.blockFromReplies
        /// contacts.deleteContacts
        /// contacts.unblock
        /// help.getConfig
        /// messages.addChatUser
        /// messages.deleteHistory
        /// messages.editMessage
        /// messages.exportChatInvite
        /// messages.forwardMessages
        /// messages.getCommonChats
        /// messages.getDiscussionMessage
        /// messages.getHistory
        /// messages.getInlineBotResults
        /// messages.getMessageReactionsList
        /// messages.getMessageReadParticipants
        /// messages.getMessagesViews
        /// messages.getPeerDialogs
        /// messages.getPeerSettings
        /// messages.getPollVotes
        /// messages.getReplies
        /// messages.getUnreadMentions
        /// messages.hideChatJoinRequest
        /// messages.importChatInvite
        /// messages.readDiscussion
        /// messages.readHistory
        /// messages.readMentions
        /// messages.reportReaction
        /// messages.reportSpam
        /// messages.requestWebView
        /// messages.saveDraft
        /// messages.search
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// messages.sendReaction
        /// messages.sendVote
        /// messages.setTyping
        /// messages.startBot
        /// messages.translateText
        /// messages.updateDialogFilter
        /// messages.uploadMedia
        /// photos.getUserPhotos
        /// stories.getPeerStories
        /// updates.getChannelDifference
        /// updates.getDifference
        /// upload.getFile
        /// upload.saveFilePart
        /// users.getFullUser
        /// users.getUsers
        /// </code>
        /// </summary>
        public static readonly RpcError MsgIdInvalid = new(ErrorCode, "MSG_ID_INVALID");

        /// <summary>
        /// [`chat_read_mark_expire_period` seconds](https://core.telegram.org/api/config#chat-read-mark-expire-period) have passed since the message was sent, read receipts were deleted.
        /// <code>
        /// messages.getMessageReadParticipants
        /// </code>
        /// </summary>
        public static readonly RpcError MsgTooOld = new(ErrorCode, "MSG_TOO_OLD");

        /// <summary>
        /// A waiting call returned an error.
        /// <code>
        /// messages.readEncryptedHistory
        /// messages.receivedQueue
        /// messages.sendEncrypted
        /// messages.sendEncryptedFile
        /// messages.sendEncryptedService
        /// </code>
        /// </summary>
        public static readonly RpcError MsgWaitFailed = new(ErrorCode, "MSG_WAIT_FAILED");

        /// <summary>
        /// Too many media files for album.
        /// <code>
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError MultiMediaTooLong = new(ErrorCode, "MULTI_MEDIA_TOO_LONG");

        /// <summary>
        /// The new salt is invalid.
        /// <code>
        /// account.updatePasswordSettings
        /// </code>
        /// </summary>
        public static readonly RpcError NewSaltInvalid = new(ErrorCode, "NEW_SALT_INVALID");

        /// <summary>
        /// No password is set on the current account, and no new password was specified in `new_settings`.
        /// <code>
        /// account.updatePasswordSettings
        /// </code>
        /// </summary>
        public static readonly RpcError NewSettingsEmpty = new(ErrorCode, "NEW_SETTINGS_EMPTY");

        /// <summary>
        /// The new password settings are invalid.
        /// <code>
        /// account.updatePasswordSettings
        /// auth.recoverPassword
        /// </code>
        /// </summary>
        public static readonly RpcError NewSettingsInvalid = new(ErrorCode, "NEW_SETTINGS_INVALID");

        /// <summary>
        /// The specified offset is longer than 64 bytes.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError NextOffsetInvalid = new(ErrorCode, "NEXT_OFFSET_INVALID");

        /// <summary>
        /// The current user is not eligible to join the Peer-to-Peer Login Program.
        /// <code>
        /// smsjobs.join
        /// </code>
        /// </summary>
        public static readonly RpcError NotEligible = new(ErrorCode, "NOT_ELIGIBLE");

        /// <summary>
        /// The current user hasn't joined the Peer-to-Peer Login Program.
        /// <code>
        /// smsjobs.getStatus
        /// smsjobs.leave
        /// smsjobs.updateSettings
        /// </code>
        /// </summary>
        public static readonly RpcError NotJoined = new(ErrorCode, "NOT_JOINED");

        /// <summary>
        /// The provided offset is invalid.
        /// <code>
        /// upload.getFile
        /// </code>
        /// </summary>
        public static readonly RpcError OffsetInvalid = new(ErrorCode, "OFFSET_INVALID");

        /// <summary>
        /// The provided offset peer is invalid.
        /// <code>
        /// messages.getDialogs
        /// </code>
        /// </summary>
        public static readonly RpcError OffsetPeerIdInvalid = new(ErrorCode, "OFFSET_PEER_ID_INVALID");

        /// <summary>
        /// Invalid option selected.
        /// <code>
        /// messages.sendVote
        /// </code>
        /// </summary>
        public static readonly RpcError OptionInvalid = new(ErrorCode, "OPTION_INVALID");

        /// <summary>
        /// Too many options provided.
        /// <code>
        /// messages.sendVote
        /// </code>
        /// </summary>
        public static readonly RpcError OptionsTooMuch = new(ErrorCode, "OPTIONS_TOO_MUCH");

        /// <summary>
        /// The specified username order is invalid.
        /// <code>
        /// account.reorderUsernames
        /// </code>
        /// </summary>
        public static readonly RpcError OrderInvalid = new(ErrorCode, "ORDER_INVALID");

        /// <summary>
        /// Short pack name invalid.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError PackShortNameInvalid = new(ErrorCode, "PACK_SHORT_NAME_INVALID");

        /// <summary>
        /// A stickerpack with this name already exists.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError PackShortNameOccupied = new(ErrorCode, "PACK_SHORT_NAME_OCCUPIED");

        /// <summary>
        /// The stickerpack title is invalid.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError PackTitleInvalid = new(ErrorCode, "PACK_TITLE_INVALID");

        /// <summary>
        /// The specified participant ID is invalid.
        /// <code>
        /// channels.deleteParticipantHistory
        /// channels.editBanned
        /// channels.getParticipant
        /// </code>
        /// </summary>
        public static readonly RpcError ParticipantIdInvalid = new(ErrorCode, "PARTICIPANT_ID_INVALID");

        /// <summary>
        /// Trying to enable a presentation, when the user hasn't joined the Video Chat with [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall).
        /// <code>
        /// phone.editGroupCallParticipant
        /// phone.joinGroupCallPresentation
        /// </code>
        /// </summary>
        public static readonly RpcError ParticipantJoinMissing = new(ErrorCode, "PARTICIPANT_JOIN_MISSING");

        /// <summary>
        /// The other participant does not use an up to date telegram client with support for calls.
        /// <code>
        /// phone.requestCall
        /// </code>
        /// </summary>
        public static readonly RpcError ParticipantVersionOutdated = new(ErrorCode, "PARTICIPANT_VERSION_OUTDATED");

        /// <summary>
        /// Not enough participants.
        /// <code>
        /// channels.convertToGigagroup
        /// channels.setStickers
        /// channels.toggleParticipantsHidden
        /// </code>
        /// </summary>
        public static readonly RpcError ParticipantsTooFew = new(ErrorCode, "PARTICIPANTS_TOO_FEW");

        /// <summary>
        /// The provided password is empty.
        /// <code>
        /// account.resetPassword
        /// auth.requestPasswordRecovery
        /// </code>
        /// </summary>
        public static readonly RpcError PasswordEmpty = new(ErrorCode, "PASSWORD_EMPTY");

        /// <summary>
        /// The provided password hash is invalid.
        /// <code>
        /// account.deleteAccount
        /// account.getPasswordSettings
        /// account.getTmpPassword
        /// account.updatePasswordSettings
        /// auth.checkPassword
        /// channels.editCreator
        /// payments.getStarsRevenueWithdrawalUrl
        /// stats.getBroadcastRevenueWithdrawalUrl
        /// </code>
        /// </summary>
        public static readonly RpcError PasswordHashInvalid = new(ErrorCode, "PASSWORD_HASH_INVALID");

        /// <summary>
        /// You must [enable 2FA](https://core.telegram.org/api/srp) before executing this operation.
        /// <code>
        /// channels.editCreator
        /// messages.getBotCallbackAnswer
        /// payments.getStarsRevenueWithdrawalUrl
        /// stats.getBroadcastRevenueWithdrawalUrl
        /// </code>
        /// </summary>
        public static readonly RpcError PasswordMissing = new(ErrorCode, "PASSWORD_MISSING");

        /// <summary>
        /// The recovery code has expired.
        /// <code>
        /// auth.checkRecoveryPassword
        /// </code>
        /// </summary>
        public static readonly RpcError PasswordRecoveryExpired = new(ErrorCode, "PASSWORD_RECOVERY_EXPIRED");

        /// <summary>
        /// No email was set, can't recover password via email.
        /// <code>
        /// auth.requestPasswordRecovery
        /// </code>
        /// </summary>
        public static readonly RpcError PasswordRecoveryNa = new(ErrorCode, "PASSWORD_RECOVERY_NA");

        /// <summary>
        /// A [2FA password](https://core.telegram.org/api/srp) must be configured to use Telegram Passport.
        /// <code>
        /// account.saveSecureValue
        /// </code>
        /// </summary>
        public static readonly RpcError PasswordRequired = new(ErrorCode, "PASSWORD_REQUIRED");

        /// <summary>
        /// The password was modified less than 24 hours ago, try again in <c>{0}</c> seconds.
        /// <code>
        /// channels.editCreator
        /// payments.getStarsRevenueWithdrawalUrl
        /// stats.getBroadcastRevenueWithdrawalUrl
        /// </code>
        /// </summary>
        public static readonly RpcError PasswordTooFreshX = new(ErrorCode, "PASSWORD_TOO_FRESH_{0}");

        /// <summary>
        /// The specified payment provider is invalid.
        /// <code>
        /// messages.sendMedia
        /// payments.exportInvoice
        /// </code>
        /// </summary>
        public static readonly RpcError PaymentProviderInvalid = new(ErrorCode, "PAYMENT_PROVIDER_INVALID");

        /// <summary>
        /// You can't pin an empty chat with a user.
        /// <code>
        /// messages.toggleDialogPin
        /// </code>
        /// </summary>
        public static readonly RpcError PeerHistoryEmpty = new(ErrorCode, "PEER_HISTORY_EMPTY");

        /// <summary>
        /// The provided peer id is invalid.
        /// <code>
        /// account.disablePeerConnectedBot
        /// account.getNotifySettings
        /// account.reportPeer
        /// account.reportProfilePhoto
        /// account.saveAutoSaveSettings
        /// account.toggleConnectedBotPaused
        /// account.updateNotifySettings
        /// bots.setBotCommands
        /// channels.checkUsername
        /// channels.editAdmin
        /// channels.editBanned
        /// channels.getSendAs
        /// channels.joinChannel
        /// contacts.block
        /// contacts.resetTopPeerRating
        /// contacts.unblock
        /// messages.addChatUser
        /// messages.checkHistoryImportPeer
        /// messages.deleteChat
        /// messages.deleteChatUser
        /// messages.deleteExportedChatInvite
        /// messages.deleteFactCheck
        /// messages.deleteHistory
        /// messages.deleteRevokedExportedChatInvites
        /// messages.deleteSavedHistory
        /// messages.deleteScheduledMessages
        /// messages.editChatAbout
        /// messages.editChatAdmin
        /// messages.editChatDefaultBannedRights
        /// messages.editChatPhoto
        /// messages.editChatTitle
        /// messages.editExportedChatInvite
        /// messages.editFactCheck
        /// messages.editMessage
        /// messages.exportChatInvite
        /// messages.forwardMessage
        /// messages.forwardMessages
        /// messages.getAdminsWithInvites
        /// messages.getBotCallbackAnswer
        /// messages.getChatInviteImporters
        /// messages.getChats
        /// messages.getDiscussionMessage
        /// messages.getExportedChatInvite
        /// messages.getExportedChatInvites
        /// messages.getFactCheck
        /// messages.getFullChat
        /// messages.getGameHighScores
        /// messages.getHistory
        /// messages.getMessageEditData
        /// messages.getMessageReadParticipants
        /// messages.getMessagesViews
        /// messages.getOnlines
        /// messages.getOutboxReadDate
        /// messages.getPeerDialogs
        /// messages.getPeerSettings
        /// messages.getPollResults
        /// messages.getReplies
        /// messages.getSavedHistory
        /// messages.getScheduledHistory
        /// messages.getScheduledMessages
        /// messages.getSearchCounters
        /// messages.getSearchResultsCalendar
        /// messages.getSearchResultsPositions
        /// messages.getStatsURL
        /// messages.getUnreadMentions
        /// messages.getUnreadReactions
        /// messages.hideAllChatJoinRequests
        /// messages.hideChatJoinRequest
        /// messages.hidePeerSettingsBar
        /// messages.hideReportSpam
        /// messages.importChatInvite
        /// messages.initHistoryImport
        /// messages.markDialogUnread
        /// messages.migrateChat
        /// messages.readDiscussion
        /// messages.readHistory
        /// messages.readMentions
        /// messages.readReactions
        /// messages.reorderPinnedDialogs
        /// messages.report
        /// messages.reportReaction
        /// messages.reportSpam
        /// messages.requestWebView
        /// messages.saveDefaultSendAs
        /// messages.saveDraft
        /// messages.search
        /// messages.sendBotRequestedPeer
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// messages.sendQuickReplyMessages
        /// messages.sendReaction
        /// messages.sendScheduledMessages
        /// messages.sendScreenshotNotification
        /// messages.sendVote
        /// messages.setChatAvailableReactions
        /// messages.setChatTheme
        /// messages.setChatWallPaper
        /// messages.setGameScore
        /// messages.setHistoryTTL
        /// messages.setTyping
        /// messages.startBot
        /// messages.toggleDialogPin
        /// messages.toggleNoForwards
        /// messages.togglePaidReactionPrivacy
        /// messages.togglePeerTranslations
        /// messages.toggleSavedDialogPin
        /// messages.transcribeAudio
        /// messages.translateText
        /// messages.unpinAllMessages
        /// messages.updateDialogFilter
        /// messages.updatePinnedMessage
        /// messages.uploadMedia
        /// payments.changeStarsSubscription
        /// payments.fulfillStarsSubscription
        /// payments.getConnectedStarRefBot
        /// payments.getGiveawayInfo
        /// payments.getPaymentForm
        /// payments.getStarsRevenueAdsAccountUrl
        /// payments.getStarsRevenueStats
        /// payments.getStarsStatus
        /// payments.getStarsSubscriptions
        /// payments.getStarsTransactions
        /// payments.getStarsTransactionsByID
        /// payments.launchPrepaidGiveaway
        /// payments.sendPaymentForm
        /// payments.sendStarsForm
        /// payments.validateRequestedInfo
        /// phone.createGroupCall
        /// phone.getGroupCallJoinAs
        /// phone.getGroupCallStreamRtmpUrl
        /// phone.saveDefaultGroupCallJoinAs
        /// premium.applyBoost
        /// premium.getBoostsList
        /// premium.getBoostsStatus
        /// premium.getUserBoosts
        /// stats.getBroadcastRevenueStats
        /// stats.getBroadcastRevenueTransactions
        /// stats.getMessagePublicForwards
        /// stats.getMessageStats
        /// stats.getStoryPublicForwards
        /// stats.getStoryStats
        /// stickers.createStickerSet
        /// stories.applyBoost
        /// stories.canApplyBoost
        /// stories.canSendStory
        /// stories.deleteStories
        /// stories.editStory
        /// stories.exportStoryLink
        /// stories.getBoostersList
        /// stories.getBoostsStatus
        /// stories.getPeerStories
        /// stories.getPinnedStories
        /// stories.getStoriesArchive
        /// stories.getStoriesByID
        /// stories.getStoriesViews
        /// stories.getStoryReactionsList
        /// stories.getStoryViewsList
        /// stories.incrementStoryViews
        /// stories.readStories
        /// stories.report
        /// stories.sendReaction
        /// stories.sendStory
        /// stories.togglePeerStoriesHidden
        /// stories.togglePinned
        /// stories.togglePinnedToTop
        /// upload.getFile
        /// users.getUsers
        /// </code>
        /// </summary>
        public static readonly RpcError PeerIdInvalid = new(ErrorCode, "PEER_ID_INVALID");

        /// <summary>
        /// The provided peer ID is not supported.
        /// <code>
        /// messages.search
        /// </code>
        /// </summary>
        public static readonly RpcError PeerIdNotSupported = new(ErrorCode, "PEER_ID_NOT_SUPPORTED");

        /// <summary>
        /// The passed [keyboardButtonSwitchInline](https://core.telegram.org/constructor/keyboardButtonSwitchInline).`peer_types` field is invalid.
        /// <code>
        /// messages.editMessage
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError PeerTypesInvalid = new(ErrorCode, "PEER_TYPES_INVALID");

        /// <summary>
        /// The specified list of peers is empty.
        /// <code>
        /// chatlists.editExportedInvite
        /// chatlists.exportChatlistInvite
        /// </code>
        /// </summary>
        public static readonly RpcError PeersListEmpty = new(ErrorCode, "PEERS_LIST_EMPTY");

        /// <summary>
        /// Persistent timestamp empty.
        /// <code>
        /// updates.getChannelDifference
        /// updates.getDifference
        /// </code>
        /// </summary>
        public static readonly RpcError PersistentTimestampEmpty = new(ErrorCode, "PERSISTENT_TIMESTAMP_EMPTY");

        /// <summary>
        /// Persistent timestamp invalid.
        /// <code>
        /// updates.getChannelDifference
        /// updates.getDifference
        /// </code>
        /// </summary>
        public static readonly RpcError PersistentTimestampInvalid = new(ErrorCode, "PERSISTENT_TIMESTAMP_INVALID");

        /// <summary>
        /// phone_code is missing.
        /// <code>
        /// account.changePhone
        /// account.confirmPhone
        /// account.verifyPhone
        /// auth.requestFirebaseSms
        /// auth.resendCode
        /// auth.signIn
        /// auth.signUp
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneCodeEmpty = new(ErrorCode, "PHONE_CODE_EMPTY");

        /// <summary>
        /// The phone code you provided has expired.
        /// <code>
        /// account.changePhone
        /// account.verifyPhone
        /// auth.cancelCode
        /// auth.resendCode
        /// auth.signIn
        /// auth.signUp
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneCodeExpired = new(ErrorCode, "PHONE_CODE_EXPIRED");

        /// <summary>
        /// phone_code_hash is missing.
        /// <code>
        /// auth.resendCode
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneCodeHashEmpty = new(ErrorCode, "PHONE_CODE_HASH_EMPTY");

        /// <summary>
        /// The provided phone code is invalid.
        /// <code>
        /// auth.signIn
        /// auth.signUp
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneCodeInvalid = new(ErrorCode, "PHONE_CODE_INVALID");

        /// <summary>
        /// An invalid or expired `phone_code_hash` was provided.
        /// <code>
        /// account.sendVerifyEmailCode
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneHashExpired = new(ErrorCode, "PHONE_HASH_EXPIRED");

        /// <summary>
        /// No user is associated to the specified phone number.
        /// <code>
        /// contacts.resolvePhone
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneNotOccupied = new(ErrorCode, "PHONE_NOT_OCCUPIED");

        /// <summary>
        /// You can't sign up using this app.
        /// <code>
        /// auth.sendCode
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneNumberAppSignupForbidden = new(ErrorCode, "PHONE_NUMBER_APP_SIGNUP_FORBIDDEN");

        /// <summary>
        /// The provided phone number is banned from telegram.
        /// <code>
        /// account.sendChangePhoneCode
        /// auth.checkPhone
        /// auth.sendCode
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneNumberBanned = new(ErrorCode, "PHONE_NUMBER_BANNED");

        /// <summary>
        /// You asked for the code too many times.
        /// <code>
        /// auth.sendCode
        /// auth.signUp
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneNumberFlood = new(ErrorCode, "PHONE_NUMBER_FLOOD");

        /// <summary>
        /// The phone number is invalid.
        /// <code>
        /// account.changePhone
        /// account.sendChangePhoneCode
        /// account.sendVerifyEmailCode
        /// account.sendVerifyPhoneCode
        /// account.verifyEmail
        /// account.verifyPhone
        /// auth.cancelCode
        /// auth.checkPhone
        /// auth.reportMissingCode
        /// auth.requestFirebaseSms
        /// auth.resendCode
        /// auth.resetLoginEmail
        /// auth.sendCode
        /// auth.signIn
        /// auth.signUp
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneNumberInvalid = new(ErrorCode, "PHONE_NUMBER_INVALID");

        /// <summary>
        /// The phone number is already in use.
        /// <code>
        /// account.changePhone
        /// account.sendChangePhoneCode
        /// auth.signUp
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneNumberOccupied = new(ErrorCode, "PHONE_NUMBER_OCCUPIED");

        /// <summary>
        /// The phone number is not yet being used.
        /// <code>
        /// auth.signIn
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneNumberUnoccupied = new(ErrorCode, "PHONE_NUMBER_UNOCCUPIED");

        /// <summary>
        /// This phone is password protected.
        /// <code>
        /// auth.sendCode
        /// </code>
        /// </summary>
        public static readonly RpcError PhonePasswordProtected = new(ErrorCode, "PHONE_PASSWORD_PROTECTED");

        /// <summary>
        /// Photo mime-type invalid.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoContentTypeInvalid = new(ErrorCode, "PHOTO_CONTENT_TYPE_INVALID");

        /// <summary>
        /// Photo URL invalid.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoContentUrlEmpty = new(ErrorCode, "PHOTO_CONTENT_URL_EMPTY");

        /// <summary>
        /// Photo crop file missing.
        /// <code>
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoCropFileMissing = new(ErrorCode, "PHOTO_CROP_FILE_MISSING");

        /// <summary>
        /// Photo is too small.
        /// <code>
        /// channels.editPhoto
        /// messages.editChatPhoto
        /// photos.updateProfilePhoto
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoCropSizeSmall = new(ErrorCode, "PHOTO_CROP_SIZE_SMALL");

        /// <summary>
        /// The extension of the photo is invalid.
        /// <code>
        /// channels.editPhoto
        /// messages.editChatPhoto
        /// messages.sendMedia
        /// messages.uploadMedia
        /// photos.updateProfilePhoto
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoExtInvalid = new(ErrorCode, "PHOTO_EXT_INVALID");

        /// <summary>
        /// Profile photo file missing.
        /// <code>
        /// channels.editPhoto
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoFileMissing = new(ErrorCode, "PHOTO_FILE_MISSING");

        /// <summary>
        /// Photo ID invalid.
        /// <code>
        /// photos.updateProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoIdInvalid = new(ErrorCode, "PHOTO_ID_INVALID");

        /// <summary>
        /// Photo invalid.
        /// <code>
        /// channels.editPhoto
        /// messages.editChatPhoto
        /// messages.setInlineBotResults
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoInvalid = new(ErrorCode, "PHOTO_INVALID");

        /// <summary>
        /// The photo dimensions are invalid.
        /// <code>
        /// messages.sendMedia
        /// messages.uploadMedia
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoInvalidDimensions = new(ErrorCode, "PHOTO_INVALID_DIMENSIONS");

        /// <summary>
        /// Internal issues, try again later.
        /// <code>
        /// messages.sendMedia
        /// messages.uploadMedia
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoSaveFileInvalid = new(ErrorCode, "PHOTO_SAVE_FILE_INVALID");

        /// <summary>
        /// Photo thumbnail URL is empty.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError PhotoThumbUrlEmpty = new(ErrorCode, "PHOTO_THUMB_URL_EMPTY");

        /// <summary>
        /// You can't pin messages.
        /// <code>
        /// messages.updatePinnedMessage
        /// </code>
        /// </summary>
        public static readonly RpcError PinRestricted = new(ErrorCode, "PIN_RESTRICTED");

        /// <summary>
        /// Too many pinned dialogs.
        /// <code>
        /// messages.sendMessage
        /// messages.toggleDialogPin
        /// updates.getChannelDifference
        /// </code>
        /// </summary>
        public static readonly RpcError PinnedDialogsTooMuch = new(ErrorCode, "PINNED_DIALOGS_TOO_MUCH");

        /// <summary>
        /// One of the poll answers is not acceptable.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError PollAnswerInvalid = new(ErrorCode, "POLL_ANSWER_INVALID");

        /// <summary>
        /// Invalid poll answers were provided.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError PollAnswersInvalid = new(ErrorCode, "POLL_ANSWERS_INVALID");

        /// <summary>
        /// Duplicate poll options provided.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError PollOptionDuplicate = new(ErrorCode, "POLL_OPTION_DUPLICATE");

        /// <summary>
        /// Invalid poll option provided.
        /// <code>
        /// messages.sendMedia
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError PollOptionInvalid = new(ErrorCode, "POLL_OPTION_INVALID");

        /// <summary>
        /// One of the poll questions is not acceptable.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError PollQuestionInvalid = new(ErrorCode, "POLL_QUESTION_INVALID");

        /// <summary>
        /// A premium account is required to execute this action.
        /// <code>
        /// channels.reportSponsoredMessage
        /// stories.activateStealthMode
        /// stories.applyBoost
        /// stories.canApplyBoost
        /// stories.canSendStory
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError PremiumAccountRequired = new(ErrorCode, "PREMIUM_ACCOUNT_REQUIRED");

        /// <summary>
        /// The pricing for the [subscription](https://core.telegram.org/api/subscriptions) is invalid, the maximum price is specified in the [`stars_subscription_amount_max` config key ](https://core.telegram.org/api/config#stars-subscription-amount-max).
        /// <code>
        /// messages.exportChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError PricingChatInvalid = new(ErrorCode, "PRICING_CHAT_INVALID");

        /// <summary>
        /// The privacy key is invalid.
        /// <code>
        /// account.getPrivacy
        /// account.setPrivacy
        /// </code>
        /// </summary>
        public static readonly RpcError PrivacyKeyInvalid = new(ErrorCode, "PRIVACY_KEY_INVALID");

        /// <summary>
        /// Too many privacy rules were specified, the current limit is 1000.
        /// <code>
        /// account.setPrivacy
        /// </code>
        /// </summary>
        public static readonly RpcError PrivacyTooLong = new(ErrorCode, "PRIVACY_TOO_LONG");

        /// <summary>
        /// The specified privacy rule combination is invalid.
        /// <code>
        /// account.setPrivacy
        /// </code>
        /// </summary>
        public static readonly RpcError PrivacyValueInvalid = new(ErrorCode, "PRIVACY_VALUE_INVALID");

        /// <summary>
        /// A public key is required.
        /// <code>
        /// account.acceptAuthorization
        /// account.getAuthorizationForm
        /// </code>
        /// </summary>
        public static readonly RpcError PublicKeyRequired = new(ErrorCode, "PUBLIC_KEY_REQUIRED");

        /// <summary>
        /// The query ID is empty.
        /// <code>
        /// messages.sendInlineBotResult
        /// </code>
        /// </summary>
        public static readonly RpcError QueryIdEmpty = new(ErrorCode, "QUERY_ID_EMPTY");

        /// <summary>
        /// The query ID is invalid.
        /// <code>
        /// bots.answerWebhookJSONQuery
        /// messages.sendWebViewResultMessage
        /// messages.setBotCallbackAnswer
        /// messages.setBotShippingResults
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError QueryIdInvalid = new(ErrorCode, "QUERY_ID_INVALID");

        /// <summary>
        /// The query string is too short.
        /// <code>
        /// contacts.search
        /// </code>
        /// </summary>
        public static readonly RpcError QueryTooShort = new(ErrorCode, "QUERY_TOO_SHORT");

        /// <summary>
        /// A maximum of [appConfig.`quick_replies_limit`](https://core.telegram.org/api/config#quick-replies-limit) shortcuts may be created, the limit was reached.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError QuickRepliesTooMuch = new(ErrorCode, "QUICK_REPLIES_TOO_MUCH");

        /// <summary>
        /// You can forward a quiz while hiding the original author only after choosing an option in the quiz.
        /// <code>
        /// messages.forwardMessages
        /// </code>
        /// </summary>
        public static readonly RpcError QuizAnswerMissing = new(ErrorCode, "QUIZ_ANSWER_MISSING");

        /// <summary>
        /// An invalid value was provided to the correct_answers field.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError QuizCorrectAnswerInvalid = new(ErrorCode, "QUIZ_CORRECT_ANSWER_INVALID");

        /// <summary>
        /// No correct quiz answer was specified.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError QuizCorrectAnswersEmpty = new(ErrorCode, "QUIZ_CORRECT_ANSWERS_EMPTY");

        /// <summary>
        /// You specified too many correct answers in a quiz, quizzes can only have one right answer!
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError QuizCorrectAnswersTooMuch = new(ErrorCode, "QUIZ_CORRECT_ANSWERS_TOO_MUCH");

        /// <summary>
        /// Quizzes can't have the multiple_choice flag set!
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError QuizMultipleInvalid = new(ErrorCode, "QUIZ_MULTIPLE_INVALID");

        /// <summary>
        /// The specified `reply_to`.`quote_text` field is invalid.
        /// <code>
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError QuoteTextInvalid = new(ErrorCode, "QUOTE_TEXT_INVALID");

        /// <summary>
        /// You cannot raise your hand.
        /// <code>
        /// phone.editGroupCallParticipant
        /// </code>
        /// </summary>
        public static readonly RpcError RaiseHandForbidden = new(ErrorCode, "RAISE_HAND_FORBIDDEN");

        /// <summary>
        /// Random ID empty.
        /// <code>
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError RandomIdEmpty = new(ErrorCode, "RANDOM_ID_EMPTY");

        /// <summary>
        /// A provided random ID is invalid.
        /// <code>
        /// messages.forwardMessages
        /// </code>
        /// </summary>
        public static readonly RpcError RandomIdInvalid = new(ErrorCode, "RANDOM_ID_INVALID");

        /// <summary>
        /// Random length invalid.
        /// <code>
        /// messages.getDhConfig
        /// </code>
        /// </summary>
        public static readonly RpcError RandomLengthInvalid = new(ErrorCode, "RANDOM_LENGTH_INVALID");

        /// <summary>
        /// Invalid range provided.
        /// <code>
        /// updates.getChannelDifference
        /// </code>
        /// </summary>
        public static readonly RpcError RangesInvalid = new(ErrorCode, "RANGES_INVALID");

        /// <summary>
        /// Empty reaction provided.
        /// <code>
        /// messages.sendReaction
        /// </code>
        /// </summary>
        public static readonly RpcError ReactionEmpty = new(ErrorCode, "REACTION_EMPTY");

        /// <summary>
        /// The specified reaction is invalid.
        /// <code>
        /// messages.sendReaction
        /// messages.setDefaultReaction
        /// messages.updateSavedReactionTag
        /// stories.sendReaction
        /// </code>
        /// </summary>
        public static readonly RpcError ReactionInvalid = new(ErrorCode, "REACTION_INVALID");

        /// <summary>
        /// The message already has exactly `reactions_uniq_max` reaction emojis, you can't react with a new emoji, see [the docs for more info ](https://core.telegram.org/api/config#client-configuration).
        /// <code>
        /// messages.sendReaction
        /// </code>
        /// </summary>
        public static readonly RpcError ReactionsTooMany = new(ErrorCode, "REACTIONS_TOO_MANY");

        /// <summary>
        /// The specified receipt is empty.
        /// <code>
        /// payments.assignAppStoreTransaction
        /// </code>
        /// </summary>
        public static readonly RpcError ReceiptEmpty = new(ErrorCode, "RECEIPT_EMPTY");

        /// <summary>
        /// Reply markup for buy button empty.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ReplyMarkupBuyEmpty = new(ErrorCode, "REPLY_MARKUP_BUY_EMPTY");

        /// <summary>
        /// A game message is being edited, but the newly provided keyboard doesn't have a keyboardButtonGame button.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ReplyMarkupGameEmpty = new(ErrorCode, "REPLY_MARKUP_GAME_EMPTY");

        /// <summary>
        /// The provided reply markup is invalid.
        /// <code>
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError ReplyMarkupInvalid = new(ErrorCode, "REPLY_MARKUP_INVALID");

        /// <summary>
        /// The specified reply_markup is too long.
        /// <code>
        /// messages.editMessage
        /// messages.sendMedia
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ReplyMarkupTooLong = new(ErrorCode, "REPLY_MARKUP_TOO_LONG");

        /// <summary>
        /// The specified reply-to message ID is invalid.
        /// <code>
        /// messages.sendMessage
        /// messages.sendScreenshotNotification
        /// </code>
        /// </summary>
        public static readonly RpcError ReplyMessageIdInvalid = new(ErrorCode, "REPLY_MESSAGE_ID_INVALID");

        /// <summary>
        /// Each shortcut can contain a maximum of [appConfig.`quick_reply_messages_limit`](https://core.telegram.org/api/config#quick-reply-messages-limit) messages, the limit was reached.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ReplyMessagesTooMuch = new(ErrorCode, "REPLY_MESSAGES_TOO_MUCH");

        /// <summary>
        /// The specified `reply_to` field is invalid.
        /// <code>
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ReplyToInvalid = new(ErrorCode, "REPLY_TO_INVALID");

        /// <summary>
        /// The replied-to user is invalid.
        /// <code>
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ReplyToUserInvalid = new(ErrorCode, "REPLY_TO_USER_INVALID");

        /// <summary>
        /// The master DC did not accept the `request_token` from the CDN DC. Continue downloading the file from the master DC using upload.getFile.
        /// <code>
        /// upload.reuploadCdnFile
        /// </code>
        /// </summary>
        public static readonly RpcError RequestTokenInvalid = new(ErrorCode, "REQUEST_TOKEN_INVALID");

        /// <summary>
        /// No password reset is in progress.
        /// <code>
        /// account.declinePasswordReset
        /// </code>
        /// </summary>
        public static readonly RpcError ResetRequestMissing = new(ErrorCode, "RESET_REQUEST_MISSING");

        /// <summary>
        /// You provided a duplicate result ID.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError ResultIdDuplicate = new(ErrorCode, "RESULT_ID_DUPLICATE");

        /// <summary>
        /// Result ID empty.
        /// <code>
        /// messages.sendInlineBotResult
        /// </code>
        /// </summary>
        public static readonly RpcError ResultIdEmpty = new(ErrorCode, "RESULT_ID_EMPTY");

        /// <summary>
        /// One of the specified result IDs is invalid.
        /// <code>
        /// messages.savePreparedInlineMessage
        /// messages.sendInlineBotResult
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError ResultIdInvalid = new(ErrorCode, "RESULT_ID_INVALID");

        /// <summary>
        /// Result type invalid.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError ResultTypeInvalid = new(ErrorCode, "RESULT_TYPE_INVALID");

        /// <summary>
        /// Too many results were provided.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError ResultsTooMuch = new(ErrorCode, "RESULTS_TOO_MUCH");

        /// <summary>
        /// You cannot change your vote.
        /// <code>
        /// messages.sendVote
        /// </code>
        /// </summary>
        public static readonly RpcError RevoteNotAllowed = new(ErrorCode, "REVOTE_NOT_ALLOWED");

        /// <summary>
        /// The new admin rights are equal to the old rights, no change was made.
        /// <code>
        /// bots.setBotBroadcastDefaultAdminRights
        /// bots.setBotGroupDefaultAdminRights
        /// </code>
        /// </summary>
        public static readonly RpcError RightsNotModified = new(ErrorCode, "RIGHTS_NOT_MODIFIED");

        /// <summary>
        /// The specified ringtone is invalid.
        /// <code>
        /// account.saveRingtone
        /// </code>
        /// </summary>
        public static readonly RpcError RingtoneInvalid = new(ErrorCode, "RINGTONE_INVALID");

        /// <summary>
        /// The MIME type for the ringtone is invalid.
        /// <code>
        /// account.uploadRingtone
        /// </code>
        /// </summary>
        public static readonly RpcError RingtoneMimeInvalid = new(ErrorCode, "RINGTONE_MIME_INVALID");

        /// <summary>
        /// Internal RSA decryption failed.
        /// <code>
        /// upload.getCdnFileHashes
        /// upload.reuploadCdnFile
        /// </code>
        /// </summary>
        public static readonly RpcError RsaDecryptFailed = new(ErrorCode, "RSA_DECRYPT_FAILED");

        /// <summary>
        /// Bots cannot schedule messages.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMedia
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ScheduleBotNotAllowed = new(ErrorCode, "SCHEDULE_BOT_NOT_ALLOWED");

        /// <summary>
        /// Invalid schedule date provided.
        /// <code>
        /// messages.editMessage
        /// phone.createGroupCall
        /// </code>
        /// </summary>
        public static readonly RpcError ScheduleDateInvalid = new(ErrorCode, "SCHEDULE_DATE_INVALID");

        /// <summary>
        /// You can't schedule a message this far in the future.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ScheduleDateTooLate = new(ErrorCode, "SCHEDULE_DATE_TOO_LATE");

        /// <summary>
        /// Can't schedule until user is online, if the user's last seen timestamp is hidden by their privacy settings.
        /// <code>
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ScheduleStatusPrivate = new(ErrorCode, "SCHEDULE_STATUS_PRIVATE");

        /// <summary>
        /// There are too many scheduled messages.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ScheduleTooMuch = new(ErrorCode, "SCHEDULE_TOO_MUCH");

        /// <summary>
        /// The specified game score is invalid.
        /// <code>
        /// messages.setGameScore
        /// </code>
        /// </summary>
        public static readonly RpcError ScoreInvalid = new(ErrorCode, "SCORE_INVALID");

        /// <summary>
        /// The search query is empty.
        /// <code>
        /// contacts.search
        /// messages.search
        /// messages.searchGifs
        /// messages.searchGlobal
        /// </code>
        /// </summary>
        public static readonly RpcError SearchQueryEmpty = new(ErrorCode, "SEARCH_QUERY_EMPTY");

        /// <summary>
        /// You cannot provide a search query and an invite link at the same time.
        /// <code>
        /// messages.getChatInviteImporters
        /// </code>
        /// </summary>
        public static readonly RpcError SearchWithLinkNotSupported = new(ErrorCode, "SEARCH_WITH_LINK_NOT_SUPPORTED");

        /// <summary>
        /// Invalid duration provided.
        /// <code>
        /// channels.toggleSlowMode
        /// </code>
        /// </summary>
        public static readonly RpcError SecondsInvalid = new(ErrorCode, "SECONDS_INVALID");

        /// <summary>
        /// A secure secret is required.
        /// <code>
        /// account.saveSecureValue
        /// </code>
        /// </summary>
        public static readonly RpcError SecureSecretRequired = new(ErrorCode, "SECURE_SECRET_REQUIRED");

        /// <summary>
        /// You can't send messages as the specified peer.
        /// <code>
        /// messages.forwardMessages
        /// messages.requestWebView
        /// messages.saveDefaultSendAs
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError SendAsPeerInvalid = new(ErrorCode, "SEND_AS_PEER_INVALID");

        /// <summary>
        /// Invalid media provided.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError SendMessageMediaInvalid = new(ErrorCode, "SEND_MESSAGE_MEDIA_INVALID");

        /// <summary>
        /// The message type is invalid.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError SendMessageTypeInvalid = new(ErrorCode, "SEND_MESSAGE_TYPE_INVALID");

        /// <summary>
        /// This session was created less than 24 hours ago, try again in <c>{0}</c> seconds.
        /// <code>
        /// channels.editCreator
        /// payments.getStarsRevenueWithdrawalUrl
        /// stats.getBroadcastRevenueWithdrawalUrl
        /// </code>
        /// </summary>
        public static readonly RpcError SessionTooFreshX = new(ErrorCode, "SESSION_TOO_FRESH_{0}");

        /// <summary>
        /// Invalid settings were provided.
        /// <code>
        /// account.updateNotifySettings
        /// </code>
        /// </summary>
        public static readonly RpcError SettingsInvalid = new(ErrorCode, "SETTINGS_INVALID");

        /// <summary>
        /// The provided SHA256 hash is invalid.
        /// <code>
        /// messages.getDocumentByHash
        /// </code>
        /// </summary>
        public static readonly RpcError Sha256HashInvalid = new(ErrorCode, "SHA256_HASH_INVALID");

        /// <summary>
        /// The specified short name is invalid.
        /// <code>
        /// stickers.checkShortName
        /// </code>
        /// </summary>
        public static readonly RpcError ShortNameInvalid = new(ErrorCode, "SHORT_NAME_INVALID");

        /// <summary>
        /// The specified short name is already in use.
        /// <code>
        /// stickers.checkShortName
        /// </code>
        /// </summary>
        public static readonly RpcError ShortNameOccupied = new(ErrorCode, "SHORT_NAME_OCCUPIED");

        /// <summary>
        /// The specified shortcut is invalid.
        /// <code>
        /// messages.deleteQuickReplyMessages
        /// messages.deleteQuickReplyShortcut
        /// messages.editQuickReplyShortcut
        /// messages.getQuickReplyMessages
        /// </code>
        /// </summary>
        public static readonly RpcError ShortcutInvalid = new(ErrorCode, "SHORTCUT_INVALID");

        /// <summary>
        /// The specified slot list is empty.
        /// <code>
        /// premium.applyBoost
        /// </code>
        /// </summary>
        public static readonly RpcError SlotsEmpty = new(ErrorCode, "SLOTS_EMPTY");

        /// <summary>
        /// SlowMode is enabled, you cannot forward multiple messages to this group.
        /// <code>
        /// messages.forwardMessages
        /// </code>
        /// </summary>
        public static readonly RpcError SlowModeMultiMsgsDisabled = new(ErrorCode, "SLOWMODE_MULTI_MSGS_DISABLED");

        /// <summary>
        /// The specified invoice slug is invalid.
        /// <code>
        /// payments.getPaymentForm
        /// </code>
        /// </summary>
        public static readonly RpcError SlugInvalid = new(ErrorCode, "SLUG_INVALID");

        /// <summary>
        /// An error occurred while creating the SMS code.
        /// <code>
        /// auth.sendCode
        /// </code>
        /// </summary>
        public static readonly RpcError SmsCodeCreateFailed = new(ErrorCode, "SMS_CODE_CREATE_FAILED");

        /// <summary>
        /// The specified job ID is invalid.
        /// <code>
        /// smsjobs.finishJob
        /// smsjobs.getSmsJob
        /// </code>
        /// </summary>
        public static readonly RpcError SmsjobIdInvalid = new(ErrorCode, "SMSJOB_ID_INVALID");

        /// <summary>
        /// The specified inputCheckPasswordSRP.A value is invalid.
        /// <code>
        /// account.getTmpPassword
        /// </code>
        /// </summary>
        public static readonly RpcError SrpAInvalid = new(ErrorCode, "SRP_A_INVALID");

        /// <summary>
        /// Invalid SRP ID provided.
        /// <code>
        /// account.updatePasswordSettings
        /// auth.checkPassword
        /// channels.editCreator
        /// </code>
        /// </summary>
        public static readonly RpcError SrpIdInvalid = new(ErrorCode, "SRP_ID_INVALID");

        /// <summary>
        /// Password has changed.
        /// <code>
        /// account.updatePasswordSettings
        /// auth.checkPassword
        /// </code>
        /// </summary>
        public static readonly RpcError SrpPasswordChanged = new(ErrorCode, "SRP_PASSWORD_CHANGED");

        /// <summary>
        /// The passed [inputInvoiceStarGift](https://core.telegram.org/constructor/inputInvoiceStarGift) is invalid.
        /// <code>
        /// payments.getPaymentForm
        /// </code>
        /// </summary>
        public static readonly RpcError StargiftInvalid = new(ErrorCode, "STARGIFT_INVALID");

        /// <summary>
        /// The gift is sold out.
        /// <code>
        /// payments.sendStarsForm
        /// </code>
        /// </summary>
        public static readonly RpcError StargiftUsageLimited = new(ErrorCode, "STARGIFT_USAGE_LIMITED");

        /// <summary>
        /// The previous referral program was terminated less than 24 hours ago: further changes can be made after the date specified in userFull.starref_program.end_date.
        /// <code>
        /// bots.updateStarRefProgram
        /// </code>
        /// </summary>
        public static readonly RpcError StarrefAwaitingEnd = new(ErrorCode, "STARREF_AWAITING_END");

        /// <summary>
        /// The specified affiliate link was already revoked.
        /// <code>
        /// payments.editConnectedStarRefBot
        /// </code>
        /// </summary>
        public static readonly RpcError StarrefHashRevoked = new(ErrorCode, "STARREF_HASH_REVOKED");

        /// <summary>
        /// The specified commission_permille is invalid: the minimum and maximum values for this parameter are contained in the [starref_min_commission_permille](https://core.telegram.org/api/config#starref-min-commission-permille) and [starref_max_commission_permille](https://core.telegram.org/api/config#starref-max-commission-permille) client configuration parameters.
        /// <code>
        /// bots.updateStarRefProgram
        /// </code>
        /// </summary>
        public static readonly RpcError StarrefPermilleInvalid = new(ErrorCode, "STARREF_PERMILLE_INVALID");

        /// <summary>
        /// The specified commission_permille is too low: the minimum and maximum values for this parameter are contained in the [starref_min_commission_permille](https://core.telegram.org/api/config#starref-min-commission-permille) and [starref_max_commission_permille](https://core.telegram.org/api/config#starref-max-commission-permille) client configuration parameters.
        /// <code>
        /// bots.updateStarRefProgram
        /// </code>
        /// </summary>
        public static readonly RpcError StarrefPermilleTooLow = new(ErrorCode, "STARREF_PERMILLE_TOO_LOW");

        /// <summary>
        /// The specified Telegram Star invoice is invalid.
        /// <code>
        /// messages.sendMedia
        /// payments.exportInvoice
        /// </code>
        /// </summary>
        public static readonly RpcError StarsInvoiceInvalid = new(ErrorCode, "STARS_INVOICE_INVALID");

        /// <summary>
        /// To import this chat invite link, you must first [pay for the associated Telegram Star subscription ](https://core.telegram.org/api/subscriptions#channel-subscriptions).
        /// <code>
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError StarsPaymentRequired = new(ErrorCode, "STARS_PAYMENT_REQUIRED");

        /// <summary>
        /// The start parameter is empty.
        /// <code>
        /// messages.setInlineBotResults
        /// messages.startBot
        /// </code>
        /// </summary>
        public static readonly RpcError StartParamEmpty = new(ErrorCode, "START_PARAM_EMPTY");

        /// <summary>
        /// Start parameter invalid.
        /// <code>
        /// messages.setInlineBotResults
        /// messages.startBot
        /// </code>
        /// </summary>
        public static readonly RpcError StartParamInvalid = new(ErrorCode, "START_PARAM_INVALID");

        /// <summary>
        /// Start parameter is too long.
        /// <code>
        /// messages.startBot
        /// </code>
        /// </summary>
        public static readonly RpcError StartParamTooLong = new(ErrorCode, "START_PARAM_TOO_LONG");

        /// <summary>
        /// The specified sticker document is invalid.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError StickerDocumentInvalid = new(ErrorCode, "STICKER_DOCUMENT_INVALID");

        /// <summary>
        /// Sticker emoji invalid.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerEmojiInvalid = new(ErrorCode, "STICKER_EMOJI_INVALID");

        /// <summary>
        /// Sticker file invalid.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerFileInvalid = new(ErrorCode, "STICKER_FILE_INVALID");

        /// <summary>
        /// The specified video sticker has invalid dimensions.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerGifDimensions = new(ErrorCode, "STICKER_GIF_DIMENSIONS");

        /// <summary>
        /// The provided sticker ID is invalid.
        /// <code>
        /// messages.faveSticker
        /// messages.saveRecentSticker
        /// </code>
        /// </summary>
        public static readonly RpcError StickerIdInvalid = new(ErrorCode, "STICKER_ID_INVALID");

        /// <summary>
        /// The provided sticker is invalid.
        /// <code>
        /// stickers.changeSticker
        /// stickers.changeStickerPosition
        /// stickers.removeStickerFromSet
        /// stickers.replaceSticker
        /// </code>
        /// </summary>
        public static readonly RpcError StickerInvalid = new(ErrorCode, "STICKER_INVALID");

        /// <summary>
        /// The specified sticker MIME type is invalid.
        /// <code>
        /// channels.editPhoto
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError StickerMimeInvalid = new(ErrorCode, "STICKER_MIME_INVALID");

        /// <summary>
        /// Sticker png dimensions invalid.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerPngDimensions = new(ErrorCode, "STICKER_PNG_DIMENSIONS");

        /// <summary>
        /// One of the specified stickers is not a valid PNG file.
        /// <code>
        /// stickers.addStickerToSet
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerPngNopng = new(ErrorCode, "STICKER_PNG_NOPNG");

        /// <summary>
        /// You must send the animated sticker as a document.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerTgsNodoc = new(ErrorCode, "STICKER_TGS_NODOC");

        /// <summary>
        /// Invalid TGS sticker provided.
        /// <code>
        /// stickers.addStickerToSet
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerTgsNotgs = new(ErrorCode, "STICKER_TGS_NOTGS");

        /// <summary>
        /// Incorrect stickerset thumb file provided, PNG / WEBP expected.
        /// <code>
        /// stickers.createStickerSet
        /// stickers.setStickerSetThumb
        /// </code>
        /// </summary>
        public static readonly RpcError StickerThumbPngNopng = new(ErrorCode, "STICKER_THUMB_PNG_NOPNG");

        /// <summary>
        /// Incorrect stickerset TGS thumb file provided.
        /// <code>
        /// stickers.createStickerSet
        /// stickers.setStickerSetThumb
        /// </code>
        /// </summary>
        public static readonly RpcError StickerThumbTgsNotgs = new(ErrorCode, "STICKER_THUMB_TGS_NOTGS");

        /// <summary>
        /// The specified video sticker is too big.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerVideoBig = new(ErrorCode, "STICKER_VIDEO_BIG");

        /// <summary>
        /// You must send the video sticker as a document.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerVideoNodoc = new(ErrorCode, "STICKER_VIDEO_NODOC");

        /// <summary>
        /// The specified video sticker is not in webm format.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerVideoNowebm = new(ErrorCode, "STICKER_VIDEO_NOWEBM");

        /// <summary>
        /// There are too many stickers in this stickerpack, you can't add any more.
        /// <code>
        /// stickers.addStickerToSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickerpackStickersTooMuch = new(ErrorCode, "STICKERPACK_STICKERS_TOO_MUCH");

        /// <summary>
        /// No sticker provided.
        /// <code>
        /// stickers.createStickerSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickersEmpty = new(ErrorCode, "STICKERS_EMPTY");

        /// <summary>
        /// There are too many stickers in this stickerpack, you can't add any more.
        /// <code>
        /// stickers.addStickerToSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickersTooMuch = new(ErrorCode, "STICKERS_TOO_MUCH");

        /// <summary>
        /// The provided sticker set is invalid.
        /// <code>
        /// messages.getStickerSet
        /// messages.installStickerSet
        /// messages.uninstallStickerSet
        /// stickers.addStickerToSet
        /// stickers.deleteStickerSet
        /// stickers.renameStickerSet
        /// stickers.setStickerSetThumb
        /// </code>
        /// </summary>
        public static readonly RpcError StickersetInvalid = new(ErrorCode, "STICKERSET_INVALID");

        /// <summary>
        /// This peer hasn't ever posted any stories.
        /// <code>
        /// stats.getStoryStats
        /// stories.getStoriesByID
        /// stories.readStories
        /// </code>
        /// </summary>
        public static readonly RpcError StoriesNeverCreated = new(ErrorCode, "STORIES_NEVER_CREATED");

        /// <summary>
        /// You have hit the maximum active stories limit as specified by the [`story_expiring_limit_*` client configuration parameters](https://core.telegram.org/api/config#story-expiring-limit-default): you should buy a [Premium](https://core.telegram.org/api/premium) subscription, delete an active story, or wait for the oldest story to expire.
        /// <code>
        /// stories.canSendStory
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError StoriesTooMuch = new(ErrorCode, "STORIES_TOO_MUCH");

        /// <summary>
        /// You specified no story IDs.
        /// <code>
        /// stories.deleteStories
        /// stories.exportStoryLink
        /// stories.getStoriesByID
        /// stories.getStoriesViews
        /// stories.incrementStoryViews
        /// stories.sendReaction
        /// </code>
        /// </summary>
        public static readonly RpcError StoryIdEmpty = new(ErrorCode, "STORY_ID_EMPTY");

        /// <summary>
        /// The specified story ID is invalid.
        /// <code>
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendScreenshotNotification
        /// stories.getStoryViewsList
        /// stories.sendReaction
        /// stories.togglePinnedToTop
        /// </code>
        /// </summary>
        public static readonly RpcError StoryIdInvalid = new(ErrorCode, "STORY_ID_INVALID");

        /// <summary>
        /// The new story information you passed is equal to the previous story information, thus it wasn't modified.
        /// <code>
        /// stories.editStory
        /// </code>
        /// </summary>
        public static readonly RpcError StoryNotModified = new(ErrorCode, "STORY_NOT_MODIFIED");

        /// <summary>
        /// The specified story period is invalid for this account.
        /// <code>
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError StoryPeriodInvalid = new(ErrorCode, "STORY_PERIOD_INVALID");

        /// <summary>
        /// You've hit the monthly story limit as specified by the [`stories_sent_monthly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-monthly-limit-default): wait for the specified number of seconds before posting a new story.
        /// <code>
        /// stories.canSendStory
        /// </code>
        /// </summary>
        public static readonly RpcError StorySendFloodMonthlyX = new(ErrorCode, "STORY_SEND_FLOOD_MONTHLY_{0}");

        /// <summary>
        /// You've hit the weekly story limit as specified by the [`stories_sent_weekly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-weekly-limit-default): wait for the specified number of seconds before posting a new story.
        /// <code>
        /// stories.canSendStory
        /// </code>
        /// </summary>
        public static readonly RpcError StorySendFloodWeeklyX = new(ErrorCode, "STORY_SEND_FLOOD_WEEKLY_{0}");

        /// <summary>
        /// You cannot send a [bot subscription invoice](https://core.telegram.org/api/subscriptions#bot-subscriptions) directly, you may only create invoice links using [payments.exportInvoice](https://core.telegram.org/method/payments.exportInvoice).
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError SubscriptionExportMissing = new(ErrorCode, "SUBSCRIPTION_EXPORT_MISSING");

        /// <summary>
        /// The specified subscription_pricing.period is invalid.
        /// <code>
        /// messages.exportChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError SubscriptionPeriodInvalid = new(ErrorCode, "SUBSCRIPTION_PERIOD_INVALID");

        /// <summary>
        /// The switch_pm.text field was empty.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError SwitchPmTextEmpty = new(ErrorCode, "SWITCH_PM_TEXT_EMPTY");

        /// <summary>
        /// The URL specified in switch_webview.url is invalid!
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError SwitchWebviewUrlInvalid = new(ErrorCode, "SWITCH_WEBVIEW_URL_INVALID");

        /// <summary>
        /// The specified takeout ID is invalid.
        /// <code>
        /// contacts.getSaved
        /// messages.getDialogs
        /// messages.getHistory
        /// </code>
        /// </summary>
        public static readonly RpcError TakeoutInvalid = new(ErrorCode, "TAKEOUT_INVALID");

        /// <summary>
        /// A [takeout](https://core.telegram.org/api/takeout) session needs to be initialized first, [see here  for more info](https://core.telegram.org/api/takeout).
        /// <code>
        /// contacts.getSaved
        /// </code>
        /// </summary>
        public static readonly RpcError TakeoutRequired = new(ErrorCode, "TAKEOUT_REQUIRED");

        /// <summary>
        /// An email reset was already requested.
        /// <code>
        /// auth.resetLoginEmail
        /// </code>
        /// </summary>
        public static readonly RpcError TaskAlreadyExists = new(ErrorCode, "TASK_ALREADY_EXISTS");

        /// <summary>
        /// The passed temporary key is already bound to another **perm_auth_key_id**.
        /// <code>
        /// auth.bindTempAuthKey
        /// </code>
        /// </summary>
        public static readonly RpcError TempAuthKeyAlreadyBound = new(ErrorCode, "TEMP_AUTH_KEY_ALREADY_BOUND");

        /// <summary>
        /// No temporary auth key provided.
        /// <code>
        /// auth.bindTempAuthKey
        /// </code>
        /// </summary>
        public static readonly RpcError TempAuthKeyEmpty = new(ErrorCode, "TEMP_AUTH_KEY_EMPTY");

        /// <summary>
        /// The specified [invoice](https://core.telegram.org/constructor/invoice).`terms_url` is invalid.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError TermsUrlInvalid = new(ErrorCode, "TERMS_URL_INVALID");

        /// <summary>
        /// Invalid theme file provided.
        /// <code>
        /// account.uploadTheme
        /// </code>
        /// </summary>
        public static readonly RpcError ThemeFileInvalid = new(ErrorCode, "THEME_FILE_INVALID");

        /// <summary>
        /// Invalid theme format provided.
        /// <code>
        /// account.getTheme
        /// </code>
        /// </summary>
        public static readonly RpcError ThemeFormatInvalid = new(ErrorCode, "THEME_FORMAT_INVALID");

        /// <summary>
        /// Invalid theme provided.
        /// <code>
        /// account.getTheme
        /// account.saveTheme
        /// account.updateTheme
        /// </code>
        /// </summary>
        public static readonly RpcError ThemeInvalid = new(ErrorCode, "THEME_INVALID");

        /// <summary>
        /// The theme's MIME type is invalid.
        /// <code>
        /// account.createTheme
        /// account.uploadTheme
        /// </code>
        /// </summary>
        public static readonly RpcError ThemeMimeInvalid = new(ErrorCode, "THEME_MIME_INVALID");

        /// <summary>
        /// The specified `theme_params` field is invalid.
        /// <code>
        /// messages.requestWebView
        /// </code>
        /// </summary>
        public static readonly RpcError ThemeParamsInvalid = new(ErrorCode, "THEME_PARAMS_INVALID");

        /// <summary>
        /// The specified theme title is invalid.
        /// <code>
        /// account.createTheme
        /// </code>
        /// </summary>
        public static readonly RpcError ThemeTitleInvalid = new(ErrorCode, "THEME_TITLE_INVALID");

        /// <summary>
        /// The specified timezone does not exist.
        /// <code>
        /// account.updateBusinessWorkHours
        /// </code>
        /// </summary>
        public static readonly RpcError TimezoneInvalid = new(ErrorCode, "TIMEZONE_INVALID");

        /// <summary>
        /// The specified stickerpack title is invalid.
        /// <code>
        /// stickers.suggestShortName
        /// </code>
        /// </summary>
        public static readonly RpcError TitleInvalid = new(ErrorCode, "TITLE_INVALID");

        /// <summary>
        /// The temporary password is disabled.
        /// <code>
        /// account.getTmpPassword
        /// </code>
        /// </summary>
        public static readonly RpcError TmpPasswordDisabled = new(ErrorCode, "TMP_PASSWORD_DISABLED");

        /// <summary>
        /// The passed tmp_password is invalid.
        /// <code>
        /// payments.sendPaymentForm
        /// </code>
        /// </summary>
        public static readonly RpcError TmpPasswordInvalid = new(ErrorCode, "TMP_PASSWORD_INVALID");

        /// <summary>
        /// The specified destination language is invalid.
        /// <code>
        /// messages.translateText
        /// </code>
        /// </summary>
        public static readonly RpcError ToLangInvalid = new(ErrorCode, "TO_LANG_INVALID");

        /// <summary>
        /// The specified token is empty.
        /// <code>
        /// account.registerDevice
        /// </code>
        /// </summary>
        public static readonly RpcError TokenEmpty = new(ErrorCode, "TOKEN_EMPTY");

        /// <summary>
        /// The provided token is invalid.
        /// <code>
        /// account.registerDevice
        /// account.unregisterDevice
        /// </code>
        /// </summary>
        public static readonly RpcError TokenInvalid = new(ErrorCode, "TOKEN_INVALID");

        /// <summary>
        /// The specified token type is invalid.
        /// <code>
        /// account.registerDevice
        /// </code>
        /// </summary>
        public static readonly RpcError TokenTypeInvalid = new(ErrorCode, "TOKEN_TYPE_INVALID");

        /// <summary>
        /// The `close` flag cannot be provided together with any of the other flags.
        /// <code>
        /// channels.editForumTopic
        /// </code>
        /// </summary>
        public static readonly RpcError TopicCloseSeparately = new(ErrorCode, "TOPIC_CLOSE_SEPARATELY");

        /// <summary>
        /// This topic was closed, you can't send messages to it anymore.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError TopicClosed = new(ErrorCode, "TOPIC_CLOSED");

        /// <summary>
        /// The specified topic was deleted.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError TopicDeleted = new(ErrorCode, "TOPIC_DELETED");

        /// <summary>
        /// The `hide` flag cannot be provided together with any of the other flags.
        /// <code>
        /// channels.editForumTopic
        /// </code>
        /// </summary>
        public static readonly RpcError TopicHideSeparately = new(ErrorCode, "TOPIC_HIDE_SEPARATELY");

        /// <summary>
        /// The specified topic ID is invalid.
        /// <code>
        /// channels.deleteTopicHistory
        /// channels.editForumTopic
        /// channels.updatePinnedForumTopic
        /// messages.getDiscussionMessage
        /// messages.getReplies
        /// </code>
        /// </summary>
        public static readonly RpcError TopicIdInvalid = new(ErrorCode, "TOPIC_ID_INVALID");

        /// <summary>
        /// The updated topic info is equal to the current topic info, nothing was changed.
        /// <code>
        /// channels.editForumTopic
        /// </code>
        /// </summary>
        public static readonly RpcError TopicNotModified = new(ErrorCode, "TOPIC_NOT_MODIFIED");

        /// <summary>
        /// The specified topic title is empty.
        /// <code>
        /// channels.createForumTopic
        /// </code>
        /// </summary>
        public static readonly RpcError TopicTitleEmpty = new(ErrorCode, "TOPIC_TITLE_EMPTY");

        /// <summary>
        /// You specified no topic IDs.
        /// <code>
        /// channels.getForumTopicsByID
        /// </code>
        /// </summary>
        public static readonly RpcError TopicsEmpty = new(ErrorCode, "TOPICS_EMPTY");

        /// <summary>
        /// The specified transaction ID is invalid.
        /// <code>
        /// payments.getStarsTransactionsByID
        /// </code>
        /// </summary>
        public static readonly RpcError TransactionIdInvalid = new(ErrorCode, "TRANSACTION_ID_INVALID");

        /// <summary>
        /// Audio transcription failed.
        /// <code>
        /// messages.transcribeAudio
        /// </code>
        /// </summary>
        public static readonly RpcError TranscriptionFailed = new(ErrorCode, "TRANSCRIPTION_FAILED");

        /// <summary>
        /// Translation is currently unavailable due to a temporary server-side lack of resources.
        /// <code>
        /// messages.translateText
        /// </code>
        /// </summary>
        public static readonly RpcError TranslateReqQuotaExceeded = new(ErrorCode, "TRANSLATE_REQ_QUOTA_EXCEEDED");

        /// <summary>
        /// The provided TTL is invalid.
        /// <code>
        /// account.setAccountTTL
        /// account.setAuthorizationTTL
        /// </code>
        /// </summary>
        public static readonly RpcError TtlDaysInvalid = new(ErrorCode, "TTL_DAYS_INVALID");

        /// <summary>
        /// Invalid media Time To Live was provided.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError TtlMediaInvalid = new(ErrorCode, "TTL_MEDIA_INVALID");

        /// <summary>
        /// The specified TTL period is invalid.
        /// <code>
        /// channels.createChannel
        /// messages.createChat
        /// messages.setDefaultHistoryTTL
        /// messages.setHistoryTTL
        /// </code>
        /// </summary>
        public static readonly RpcError TtlPeriodInvalid = new(ErrorCode, "TTL_PERIOD_INVALID");

        /// <summary>
        /// No top peer type was provided.
        /// <code>
        /// contacts.getTopPeers
        /// </code>
        /// </summary>
        public static readonly RpcError TypesEmpty = new(ErrorCode, "TYPES_EMPTY");

        /// <summary>
        /// Invalid until date provided.
        /// <code>
        /// messages.editChatDefaultBannedRights
        /// payments.getPaymentForm
        /// </code>
        /// </summary>
        public static readonly RpcError UntilDateInvalid = new(ErrorCode, "UNTIL_DATE_INVALID");

        /// <summary>
        /// Invalid URL provided.
        /// <code>
        /// messages.requestSimpleWebView
        /// messages.requestWebView
        /// messages.setBotCallbackAnswer
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError UrlInvalid = new(ErrorCode, "URL_INVALID");

        /// <summary>
        /// The specified usage limit is invalid.
        /// <code>
        /// messages.editExportedChatInvite
        /// messages.exportChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError UsageLimitInvalid = new(ErrorCode, "USAGE_LIMIT_INVALID");

        /// <summary>
        /// You're not an admin.
        /// <code>
        /// channels.editBanned
        /// </code>
        /// </summary>
        public static readonly RpcError UserAdminInvalid = new(ErrorCode, "USER_ADMIN_INVALID");

        /// <summary>
        /// You have already invited this user.
        /// <code>
        /// phone.inviteToGroupCall
        /// </code>
        /// </summary>
        public static readonly RpcError UserAlreadyInvited = new(ErrorCode, "USER_ALREADY_INVITED");

        /// <summary>
        /// The user is already in the group.
        /// <code>
        /// channels.joinChannel
        /// messages.addChatUser
        /// messages.hideChatJoinRequest
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError UserAlreadyParticipant = new(ErrorCode, "USER_ALREADY_PARTICIPANT");

        /// <summary>
        /// You're banned from sending messages in supergroups/channels.
        /// <code>
        /// channels.getChannels
        /// channels.getMessages
        /// channels.inviteToChannel
        /// channels.leaveChannel
        /// messages.editMessage
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// messages.sendReaction
        /// messages.setTyping
        /// messages.updatePinnedMessage
        /// messages.uploadMedia
        /// updates.getChannelDifference
        /// users.getUsers
        /// </code>
        /// </summary>
        public static readonly RpcError UserBannedInChannel = new(ErrorCode, "USER_BANNED_IN_CHANNEL");

        /// <summary>
        /// User blocked.
        /// <code>
        /// channels.editAdmin
        /// channels.inviteToChannel
        /// </code>
        /// </summary>
        public static readonly RpcError UserBlocked = new(ErrorCode, "USER_BLOCKED");

        /// <summary>
        /// Bots can only be admins in channels.
        /// <code>
        /// channels.inviteToChannel
        /// </code>
        /// </summary>
        public static readonly RpcError UserBot = new(ErrorCode, "USER_BOT");

        /// <summary>
        /// User accounts must provide the `bot` method parameter when calling this method. If there is no such method parameter, this method can only be invoked by bot accounts.
        /// <code>
        /// bots.answerWebhookJSONQuery
        /// bots.getBotCommands
        /// bots.getBotInfo
        /// bots.sendCustomRequest
        /// bots.setBotInfo
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError UserBotInvalid = new(ErrorCode, "USER_BOT_INVALID");

        /// <summary>
        /// This method can only be called by a bot.
        /// <code>
        /// bots.answerWebhookJSONQuery
        /// bots.getBotCommands
        /// bots.getBotMenuButton
        /// bots.resetBotCommands
        /// bots.sendCustomRequest
        /// bots.setBotBroadcastDefaultAdminRights
        /// bots.setBotCommands
        /// bots.setBotGroupDefaultAdminRights
        /// bots.setBotMenuButton
        /// bots.updateUserEmojiStatus
        /// help.setBotUpdatesStatus
        /// messages.getGameHighScores
        /// messages.getInlineGameHighScores
        /// messages.savePreparedInlineMessage
        /// messages.sendWebViewResultMessage
        /// messages.setBotCallbackAnswer
        /// messages.setBotPrecheckoutResults
        /// messages.setBotShippingResults
        /// messages.setGameScore
        /// messages.setInlineBotResults
        /// messages.setInlineGameScore
        /// payments.refundStarsCharge
        /// users.setSecureValueErrors
        /// </code>
        /// </summary>
        public static readonly RpcError UserBotRequired = new(ErrorCode, "USER_BOT_REQUIRED");

        /// <summary>
        /// One of the users you tried to add is already in too many channels/supergroups.
        /// <code>
        /// channels.inviteToChannel
        /// channels.joinChannel
        /// messages.hideAllChatJoinRequests
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError UserChannelsTooMuch = new(ErrorCode, "USER_CHANNELS_TOO_MUCH");

        /// <summary>
        /// For channels.editAdmin: you've tried to edit the admin rights of the owner, but you're not the owner; for channels.leaveChannel: you can't leave this channel, because you're its creator.
        /// <code>
        /// channels.editAdmin
        /// channels.leaveChannel
        /// </code>
        /// </summary>
        public static readonly RpcError UserCreator = new(ErrorCode, "USER_CREATOR");

        /// <summary>
        /// Gifts are not available in the current region ([stars_gifts_enabled](https://core.telegram.org/api/config#stars-gifts-enabled) is equal to false).
        /// <code>
        /// payments.getStarsGiftOptions
        /// </code>
        /// </summary>
        public static readonly RpcError UserGiftUnavailable = new(ErrorCode, "USER_GIFT_UNAVAILABLE");

        /// <summary>
        /// The provided user ID is invalid.
        /// <code>
        /// auth.importAuthorization
        /// bots.setBotCommands
        /// bots.updateUserEmojiStatus
        /// channels.deleteUserHistory
        /// channels.editAdmin
        /// channels.editBanned
        /// channels.editCreator
        /// channels.getParticipant
        /// channels.inviteToChannel
        /// channels.reportSpam
        /// messages.addChatUser
        /// messages.deleteChatUser
        /// messages.editChatAdmin
        /// messages.getCommonChats
        /// messages.hideChatJoinRequest
        /// messages.reportReaction
        /// messages.requestEncryption
        /// messages.savePreparedInlineMessage
        /// messages.search
        /// payments.botCancelStarsSubscription
        /// payments.convertStarGift
        /// payments.getStarsGiftOptions
        /// payments.getUserStarGifts
        /// payments.refundStarsCharge
        /// payments.saveStarGift
        /// phone.requestCall
        /// photos.getUserPhotos
        /// photos.uploadContactProfilePhoto
        /// stickers.createStickerSet
        /// stories.getPinnedStories
        /// stories.getUserStories
        /// users.getFullUser
        /// users.setSecureValueErrors
        /// </code>
        /// </summary>
        public static readonly RpcError UserIdInvalid = new(ErrorCode, "USER_ID_INVALID");

        /// <summary>
        /// Invalid user provided.
        /// <code>
        /// help.editUserInfo
        /// help.getSupportName
        /// help.getUserInfo
        /// </code>
        /// </summary>
        public static readonly RpcError UserInvalid = new(ErrorCode, "USER_INVALID");

        /// <summary>
        /// You were blocked by this user.
        /// <code>
        /// messages.addChatUser
        /// messages.forwardMessages
        /// messages.sendEncryptedService
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.setTyping
        /// phone.requestCall
        /// </code>
        /// </summary>
        public static readonly RpcError UserIsBlocked = new(ErrorCode, "USER_IS_BLOCKED");

        /// <summary>
        /// Bots can't send messages to other bots.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.setTyping
        /// </code>
        /// </summary>
        public static readonly RpcError UserIsBot = new(ErrorCode, "USER_IS_BOT");

        /// <summary>
        /// This user was kicked from this supergroup/channel.
        /// <code>
        /// channels.inviteToChannel
        /// </code>
        /// </summary>
        public static readonly RpcError UserKicked = new(ErrorCode, "USER_KICKED");

        /// <summary>
        /// The provided user is not a mutual contact.
        /// <code>
        /// channels.editAdmin
        /// channels.inviteToChannel
        /// messages.addChatUser
        /// messages.checkHistoryImportPeer
        /// </code>
        /// </summary>
        public static readonly RpcError UserNotMutualContact = new(ErrorCode, "USER_NOT_MUTUAL_CONTACT");

        /// <summary>
        /// You're not a member of this supergroup/channel.
        /// <code>
        /// channels.getParticipant
        /// channels.leaveChannel
        /// messages.deleteChatUser
        /// messages.editChatAdmin
        /// updates.getDifference
        /// </code>
        /// </summary>
        public static readonly RpcError UserNotParticipant = new(ErrorCode, "USER_NOT_PARTICIPANT");

        /// <summary>
        /// Cannot generate a link to stories posted by a peer without a username.
        /// <code>
        /// stories.exportStoryLink
        /// </code>
        /// </summary>
        public static readonly RpcError UserPublicMissing = new(ErrorCode, "USER_PUBLIC_MISSING");

        /// <summary>
        /// The specified user volume is invalid.
        /// <code>
        /// phone.editGroupCallParticipant
        /// </code>
        /// </summary>
        public static readonly RpcError UserVolumeInvalid = new(ErrorCode, "USER_VOLUME_INVALID");

        /// <summary>
        /// The provided username is not valid.
        /// <code>
        /// account.checkUsername
        /// account.toggleUsername
        /// account.updateUsername
        /// channels.checkUsername
        /// channels.toggleUsername
        /// channels.updateUsername
        /// contacts.resolveUsername
        /// help.getConfig
        /// updates.getDifference
        /// </code>
        /// </summary>
        public static readonly RpcError UsernameInvalid = new(ErrorCode, "USERNAME_INVALID");

        /// <summary>
        /// The username was not modified.
        /// <code>
        /// account.reorderUsernames
        /// account.toggleUsername
        /// account.updateUsername
        /// bots.reorderUsernames
        /// bots.toggleUsername
        /// channels.toggleUsername
        /// channels.updateUsername
        /// </code>
        /// </summary>
        public static readonly RpcError UsernameNotModified = new(ErrorCode, "USERNAME_NOT_MODIFIED");

        /// <summary>
        /// The provided username is not occupied.
        /// <code>
        /// contacts.resolveUsername
        /// </code>
        /// </summary>
        public static readonly RpcError UsernameNotOccupied = new(ErrorCode, "USERNAME_NOT_OCCUPIED");

        /// <summary>
        /// The provided username is already occupied.
        /// <code>
        /// account.checkUsername
        /// account.updateUsername
        /// channels.checkUsername
        /// channels.updateUsername
        /// users.getFullUser
        /// </code>
        /// </summary>
        public static readonly RpcError UsernameOccupied = new(ErrorCode, "USERNAME_OCCUPIED");

        /// <summary>
        /// The specified username can be purchased on https://fragment.com.
        /// <code>
        /// account.checkUsername
        /// account.updateUsername
        /// channels.checkUsername
        /// channels.updateUsername
        /// </code>
        /// </summary>
        public static readonly RpcError UsernamePurchaseAvailable = new(ErrorCode, "USERNAME_PURCHASE_AVAILABLE");

        /// <summary>
        /// The maximum number of active usernames was reached.
        /// <code>
        /// account.toggleUsername
        /// channels.toggleUsername
        /// </code>
        /// </summary>
        public static readonly RpcError UsernamesActiveTooMuch = new(ErrorCode, "USERNAMES_ACTIVE_TOO_MUCH");

        /// <summary>
        /// You must have a profile picture to publish your geolocation.
        /// <code>
        /// contacts.getLocated
        /// </code>
        /// </summary>
        public static readonly RpcError UserpicUploadRequired = new(ErrorCode, "USERPIC_UPLOAD_REQUIRED");

        /// <summary>
        /// Not enough users (to create a chat, for example).
        /// <code>
        /// messages.createChat
        /// </code>
        /// </summary>
        public static readonly RpcError UsersTooFew = new(ErrorCode, "USERS_TOO_FEW");

        /// <summary>
        /// The maximum number of users has been exceeded (to create a chat, for example).
        /// <code>
        /// channels.editAdmin
        /// channels.inviteToChannel
        /// channels.joinChannel
        /// messages.addChatUser
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError UsersTooMuch = new(ErrorCode, "USERS_TOO_MUCH");

        /// <summary>
        /// The specified venue ID is invalid.
        /// <code>
        /// stories.sendStory
        /// </code>
        /// </summary>
        public static readonly RpcError VenueIdInvalid = new(ErrorCode, "VENUE_ID_INVALID");

        /// <summary>
        /// The video's content type is invalid.
        /// <code>
        /// messages.sendMedia
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError VideoContentTypeInvalid = new(ErrorCode, "VIDEO_CONTENT_TYPE_INVALID");

        /// <summary>
        /// The specified video file is invalid.
        /// <code>
        /// photos.uploadProfilePhoto
        /// </code>
        /// </summary>
        public static readonly RpcError VideoFileInvalid = new(ErrorCode, "VIDEO_FILE_INVALID");

        /// <summary>
        /// You cannot pause the video stream.
        /// <code>
        /// phone.editGroupCallParticipant
        /// </code>
        /// </summary>
        public static readonly RpcError VideoPauseForbidden = new(ErrorCode, "VIDEO_PAUSE_FORBIDDEN");

        /// <summary>
        /// You cannot stop the video stream.
        /// <code>
        /// phone.editGroupCallParticipant
        /// </code>
        /// </summary>
        public static readonly RpcError VideoStopForbidden = new(ErrorCode, "VIDEO_STOP_FORBIDDEN");

        /// <summary>
        /// The specified video title is empty.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError VideoTitleEmpty = new(ErrorCode, "VIDEO_TITLE_EMPTY");

        /// <summary>
        /// This user's privacy settings forbid you from sending voice messages.
        /// <code>
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError VoiceMessagesForbidden = new(ErrorCode, "VOICE_MESSAGES_FORBIDDEN");

        /// <summary>
        /// The specified wallpaper file is invalid.
        /// <code>
        /// account.uploadWallPaper
        /// </code>
        /// </summary>
        public static readonly RpcError WallpaperFileInvalid = new(ErrorCode, "WALLPAPER_FILE_INVALID");

        /// <summary>
        /// The specified wallpaper is invalid.
        /// <code>
        /// account.getMultiWallPapers
        /// account.getWallPaper
        /// account.installWallPaper
        /// account.saveWallPaper
        /// messages.setChatWallPaper
        /// </code>
        /// </summary>
        public static readonly RpcError WallpaperInvalid = new(ErrorCode, "WALLPAPER_INVALID");

        /// <summary>
        /// The specified wallpaper MIME type is invalid.
        /// <code>
        /// account.uploadWallPaper
        /// </code>
        /// </summary>
        public static readonly RpcError WallpaperMimeInvalid = new(ErrorCode, "WALLPAPER_MIME_INVALID");

        /// <summary>
        /// The specified wallpaper could not be found.
        /// <code>
        /// messages.setChatWallPaper
        /// </code>
        /// </summary>
        public static readonly RpcError WallpaperNotFound = new(ErrorCode, "WALLPAPER_NOT_FOUND");

        /// <summary>
        /// WC convert URL invalid.
        /// <code>
        /// messages.getWebPage
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError WcConvertUrlInvalid = new(ErrorCode, "WC_CONVERT_URL_INVALID");

        /// <summary>
        /// Invalid webdocument URL provided.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError WebDocumentInvalid = new(ErrorCode, "WEBDOCUMENT_INVALID");

        /// <summary>
        /// Invalid webdocument mime type provided.
        /// <code>
        /// messages.sendMedia
        /// messages.setInlineBotResults
        /// payments.exportInvoice
        /// </code>
        /// </summary>
        public static readonly RpcError WebDocumentMimeInvalid = new(ErrorCode, "WEBDOCUMENT_MIME_INVALID");

        /// <summary>
        /// WebDocument is too big!
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError WebDocumentSizeTooBig = new(ErrorCode, "WEBDOCUMENT_SIZE_TOO_BIG");

        /// <summary>
        /// The passed web document URL is empty.
        /// <code>
        /// payments.exportInvoice
        /// </code>
        /// </summary>
        public static readonly RpcError WebDocumentUrlEmpty = new(ErrorCode, "WEBDOCUMENT_URL_EMPTY");

        /// <summary>
        /// The specified webdocument URL is invalid.
        /// <code>
        /// messages.setInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError WebDocumentUrlInvalid = new(ErrorCode, "WEBDOCUMENT_URL_INVALID");

        /// <summary>
        /// Failure while fetching the webpage with cURL.
        /// <code>
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.uploadMedia
        /// </code>
        /// </summary>
        public static readonly RpcError WebpageCurlFailed = new(ErrorCode, "WEBPAGE_CURL_FAILED");

        /// <summary>
        /// Webpage media empty.
        /// <code>
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError WebpageMediaEmpty = new(ErrorCode, "WEBPAGE_MEDIA_EMPTY");

        /// <summary>
        /// A preview for the specified webpage `url` could not be generated.
        /// <code>
        /// messages.editMessage
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError WebpageNotFound = new(ErrorCode, "WEBPAGE_NOT_FOUND");

        /// <summary>
        /// The specified webpage `url` is invalid.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError WebpageUrlInvalid = new(ErrorCode, "WEBPAGE_URL_INVALID");

        /// <summary>
        /// The specified web push authentication secret is invalid.
        /// <code>
        /// account.registerDevice
        /// </code>
        /// </summary>
        public static readonly RpcError WebpushAuthInvalid = new(ErrorCode, "WEBPUSH_AUTH_INVALID");

        /// <summary>
        /// The specified web push elliptic curve Diffie-Hellman public key is invalid.
        /// <code>
        /// account.registerDevice
        /// </code>
        /// </summary>
        public static readonly RpcError WebpushKeyInvalid = new(ErrorCode, "WEBPUSH_KEY_INVALID");

        /// <summary>
        /// The specified web push token is invalid.
        /// <code>
        /// account.registerDevice
        /// </code>
        /// </summary>
        public static readonly RpcError WebpushTokenInvalid = new(ErrorCode, "WEBPUSH_TOKEN_INVALID");

        /// <summary>
        /// You blocked this user.
        /// <code>
        /// messages.addChatUser
        /// messages.forwardMessage
        /// messages.forwardMessages
        /// messages.requestWebView
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendScreenshotNotification
        /// </code>
        /// </summary>
        public static readonly RpcError YouBlockedUser = new(ErrorCode, "YOU_BLOCKED_USER");

        /// <summary>
        /// The specified method cannot be used by bots.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError BotMethodInvalid = new(ErrorCode, "BOT_METHOD_INVALID");

        /// <summary>
        /// The specified device model is empty.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError ConnectionDeviceModelEmpty = new(ErrorCode, "CONNECTION_DEVICE_MODEL_EMPTY");

        /// <summary>
        /// The specified language pack is empty.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError ConnectionLangPackInvalid = new(ErrorCode, "CONNECTION_LANG_PACK_INVALID");

        /// <summary>
        /// Please initialize the connection using initConnection before making queries.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError ConnectionNotInited = new(ErrorCode, "CONNECTION_NOT_INITED");

        /// <summary>
        /// The specified system version is empty.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError ConnectionSystemEmpty = new(ErrorCode, "CONNECTION_SYSTEM_EMPTY");

        /// <summary>
        /// The specified system language code is empty.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError ConnectionSystemLangCodeEmpty = new(ErrorCode, "CONNECTION_SYSTEM_LANG_CODE_EMPTY");

        /// <summary>
        /// The file currently being accessed is stored in DC <c>{0}</c>, please re-send the query to that DC.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError FileMigrateX = new(ErrorCode, "FILE_MIGRATE_{0}");

        /// <summary>
        /// Part <c>{0}</c> of the file is missing from storage. Try repeating the method call to resave the part.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError FilePartXMissing = new(ErrorCode, "FILE_PART_{0}_MISSING");

        /// <summary>
        /// The specified TL constructor is invalid.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError InputConstructorInvalid = new(ErrorCode, "INPUT_CONSTRUCTOR_INVALID");

        /// <summary>
        /// An error occurred while parsing the provided TL constructor.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError InputFetchError = new(ErrorCode, "INPUT_FETCH_ERROR");

        /// <summary>
        /// An error occurred while parsing the provided TL constructor.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError InputFetchFail = new(ErrorCode, "INPUT_FETCH_FAIL");

        /// <summary>
        /// The specified layer is invalid.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError InputLayerInvalid = new(ErrorCode, "INPUT_LAYER_INVALID");

        /// <summary>
        /// The specified method is invalid.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError InputMethodInvalid = new(ErrorCode, "INPUT_METHOD_INVALID");

        /// <summary>
        /// The request payload is too long.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError InputRequestTooLong = new(ErrorCode, "INPUT_REQUEST_TOO_LONG");

        /// <summary>
        /// The current account is spamreported, you cannot execute this action, check @spambot for more info.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError PeerFlood = new(ErrorCode, "PEER_FLOOD");

        /// <summary>
        /// The passed stickerset information is equal to the current information.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError StickersetNotModified = new(ErrorCode, "STICKERSET_NOT_MODIFIED");
    }

    /// <summary>
    /// Rpc 401 errors
    /// </summary>
    public static class RpcErrors401
    {
        public const int ErrorCode = 401;
        /// <summary>
        /// The specified auth key is invalid.
        /// </summary>
        public static readonly RpcError AuthKeyInvalid = new(ErrorCode, "AUTH_KEY_INVALID");

        /// <summary>
        /// The method is unavailable for temporary authorization keys, not bound to a permanent authorization key.
        /// </summary>
        public static readonly RpcError AuthKeyPermEmpty = new(ErrorCode, "AUTH_KEY_PERM_EMPTY");

        /// <summary>
        /// The specified authorization key is not registered in the system (for example, a PFS temporary key has expired).
        /// </summary>
        public static readonly RpcError AuthKeyUnregistered = new(ErrorCode, "AUTH_KEY_UNREGISTERED");

        /// <summary>
        /// The session has expired.
        /// </summary>
        public static readonly RpcError SessionExpired = new(ErrorCode, "SESSION_EXPIRED");

        /// <summary>
        /// 2FA is enabled, use a password to login.
        /// </summary>
        public static readonly RpcError SessionPasswordNeeded = new(ErrorCode, "SESSION_PASSWORD_NEEDED");

        /// <summary>
        /// The session was revoked by the user.
        /// </summary>
        public static readonly RpcError SessionRevoked = new(ErrorCode, "SESSION_REVOKED");

        /// <summary>
        /// The current account was deleted by the user.
        /// </summary>
        public static readonly RpcError UserDeactivated = new(ErrorCode, "USER_DEACTIVATED");

        /// <summary>
        /// The current account was deleted and banned by Telegram's antispam system.
        /// </summary>
        public static readonly RpcError UserDeactivatedBan = new(ErrorCode, "USER_DEACTIVATED_BAN");
    }

    /// <summary>
    /// Rpc 403 errors
    /// </summary>
    public static class RpcErrors403
    {
        public const int ErrorCode = 403;
        /// <summary>
        /// Sorry, anonymous administrators cannot leave reactions or participate in polls.
        /// <code>
        /// messages.sendReaction
        /// </code>
        /// </summary>
        public static readonly RpcError AnonymousReactionsDisabled = new(ErrorCode, "ANONYMOUS_REACTIONS_DISABLED");

        /// <summary>
        /// Channel poll voters and reactions cannot be fetched to prevent deanonymization.
        /// <code>
        /// messages.getMessageReactionsList
        /// messages.getPollVotes
        /// </code>
        /// </summary>
        public static readonly RpcError BroadcastForbidden = new(ErrorCode, "BROADCAST_FORBIDDEN");

        /// <summary>
        /// channel/supergroup not available.
        /// <code>
        /// channels.getFullChannel
        /// channels.leaveChannel
        /// updates.getChannelDifference
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelPublicGroupNa = new(ErrorCode, "CHANNEL_PUBLIC_GROUP_NA");

        /// <summary>
        /// You cannot execute this action.
        /// <code>
        /// messages.deleteFactCheck
        /// messages.editFactCheck
        /// </code>
        /// </summary>
        public static readonly RpcError ChatActionForbidden = new(ErrorCode, "CHAT_ACTION_FORBIDDEN");

        /// <summary>
        /// You do not have the rights to do this.
        /// <code>
        /// channels.editAdmin
        /// </code>
        /// </summary>
        public static readonly RpcError ChatAdminInviteRequired = new(ErrorCode, "CHAT_ADMIN_INVITE_REQUIRED");

        /// <summary>
        /// You must be an admin in this chat to do this.
        /// <code>
        /// channels.deleteUserHistory
        /// channels.editAdmin
        /// channels.editBanned
        /// channels.editForumTopic
        /// channels.editPhoto
        /// channels.editTitle
        /// channels.getAdminLog
        /// channels.getParticipant
        /// channels.getParticipants
        /// channels.inviteToChannel
        /// channels.updateUsername
        /// messages.addChatUser
        /// messages.editMessage
        /// messages.forwardMessages
        /// messages.migrateChat
        /// messages.search
        /// messages.sendMedia
        /// messages.sendMessage
        /// stats.getBroadcastStats
        /// stats.getMegagroupStats
        /// </code>
        /// </summary>
        public static readonly RpcError ChatAdminRequired = new(ErrorCode, "CHAT_ADMIN_REQUIRED");

        /// <summary>
        /// You join the discussion group before commenting, see [here ](https://core.telegram.org/api/discussion#requiring-users-to-join-the-group) for more info.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ChatGuestSendForbidden = new(ErrorCode, "CHAT_GUEST_SEND_FORBIDDEN");

        /// <summary>
        /// You can't send audio messages in this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendAudiosForbidden = new(ErrorCode, "CHAT_SEND_AUDIOS_FORBIDDEN");

        /// <summary>
        /// You can't send documents in this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendDocsForbidden = new(ErrorCode, "CHAT_SEND_DOCS_FORBIDDEN");

        /// <summary>
        /// You can't send a game to this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendGameForbidden = new(ErrorCode, "CHAT_SEND_GAME_FORBIDDEN");

        /// <summary>
        /// You can't send gifs in this chat.
        /// <code>
        /// messages.editMessage
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendGifsForbidden = new(ErrorCode, "CHAT_SEND_GIFS_FORBIDDEN");

        /// <summary>
        /// You can't send inline messages in this group.
        /// <code>
        /// messages.sendInlineBotResult
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendInlineForbidden = new(ErrorCode, "CHAT_SEND_INLINE_FORBIDDEN");

        /// <summary>
        /// You can't send media in this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendMediaForbidden = new(ErrorCode, "CHAT_SEND_MEDIA_FORBIDDEN");

        /// <summary>
        /// You can't send photos in this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendPhotosForbidden = new(ErrorCode, "CHAT_SEND_PHOTOS_FORBIDDEN");

        /// <summary>
        /// You can't send non-media (text) messages in this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendPlainForbidden = new(ErrorCode, "CHAT_SEND_PLAIN_FORBIDDEN");

        /// <summary>
        /// You can't send polls in this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendPollForbidden = new(ErrorCode, "CHAT_SEND_POLL_FORBIDDEN");

        /// <summary>
        /// You can't send round videos to this chat.
        /// <code>
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendRoundvideosForbidden = new(ErrorCode, "CHAT_SEND_ROUNDVIDEOS_FORBIDDEN");

        /// <summary>
        /// You can't send stickers in this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendStickersForbidden = new(ErrorCode, "CHAT_SEND_STICKERS_FORBIDDEN");

        /// <summary>
        /// You can't send videos in this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMedia
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendVideosForbidden = new(ErrorCode, "CHAT_SEND_VIDEOS_FORBIDDEN");

        /// <summary>
        /// You can't send voice recordings in this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// </code>
        /// </summary>
        public static readonly RpcError ChatSendVoicesForbidden = new(ErrorCode, "CHAT_SEND_VOICES_FORBIDDEN");

        /// <summary>
        /// The specified user type is invalid.
        /// <code>
        /// phone.inviteToGroupCall
        /// </code>
        /// </summary>
        public static readonly RpcError ChatTypeInvalid = new(ErrorCode, "CHAT_TYPE_INVALID");

        /// <summary>
        /// You can't write in this chat.
        /// <code>
        /// channels.convertToGigagroup
        /// channels.createForumTopic
        /// channels.deleteChannel
        /// channels.deleteParticipantHistory
        /// channels.deleteUserHistory
        /// channels.editAdmin
        /// channels.editBanned
        /// channels.editCreator
        /// channels.editPhoto
        /// channels.editTitle
        /// channels.getAdminLog
        /// channels.inviteToChannel
        /// channels.setDiscussionGroup
        /// channels.updateUsername
        /// invokeWithLayer
        /// messages.addChatUser
        /// messages.editChatAbout
        /// messages.editChatDefaultBannedRights
        /// messages.editExportedChatInvite
        /// messages.editMessage
        /// messages.exportChatInvite
        /// messages.forwardMessages
        /// messages.getAdminsWithInvites
        /// messages.getChatInviteImporters
        /// messages.getDialogs
        /// messages.getExportedChatInvite
        /// messages.getExportedChatInvites
        /// messages.getMessageEditData
        /// messages.hideAllChatJoinRequests
        /// messages.hideChatJoinRequest
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// messages.sendReaction
        /// messages.setTyping
        /// messages.startBot
        /// messages.updatePinnedMessage
        /// messages.uploadMedia
        /// payments.getStarsRevenueAdsAccountUrl
        /// updates.getChannelDifference
        /// updates.getDifference
        /// </code>
        /// </summary>
        public static readonly RpcError ChatWriteForbidden = new(ErrorCode, "CHAT_WRITE_FORBIDDEN");

        /// <summary>
        /// Normal users can't edit invites that were created by bots.
        /// <code>
        /// messages.editExportedChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError EditBotInviteForbidden = new(ErrorCode, "EDIT_BOT_INVITE_FORBIDDEN");

        /// <summary>
        /// The groupcall has already started, you can join directly using [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall).
        /// <code>
        /// phone.startScheduledGroupCall
        /// phone.toggleGroupCallStartSubscription
        /// </code>
        /// </summary>
        public static readonly RpcError GroupcallAlreadyStarted = new(ErrorCode, "GROUPCALL_ALREADY_STARTED");

        /// <summary>
        /// The group call has already ended.
        /// <code>
        /// messages.setTyping
        /// phone.discardGroupCall
        /// phone.editGroupCallParticipant
        /// phone.editGroupCallTitle
        /// phone.getGroupCall
        /// phone.inviteToGroupCall
        /// phone.joinGroupCall
        /// phone.toggleGroupCallRecord
        /// </code>
        /// </summary>
        public static readonly RpcError GroupcallForbidden = new(ErrorCode, "GROUPCALL_FORBIDDEN");

        /// <summary>
        /// Only the inline bot can edit message.
        /// <code>
        /// messages.editMessage
        /// </code>
        /// </summary>
        public static readonly RpcError InlineBotRequired = new(ErrorCode, "INLINE_BOT_REQUIRED");

        /// <summary>
        /// Message author required.
        /// <code>
        /// messages.editMessage
        /// messages.getMessageEditData
        /// </code>
        /// </summary>
        public static readonly RpcError MessageAuthorRequired = new(ErrorCode, "MESSAGE_AUTHOR_REQUIRED");

        /// <summary>
        /// You can't delete one of the messages you tried to delete, most likely because it is a service message.
        /// <code>
        /// channels.deleteMessages
        /// messages.deleteMessages
        /// messages.deleteScheduledMessages
        /// </code>
        /// </summary>
        public static readonly RpcError MessageDeleteForbidden = new(ErrorCode, "MESSAGE_DELETE_FORBIDDEN");

        /// <summary>
        /// The current user is not eligible to join the Peer-to-Peer Login Program.
        /// <code>
        /// smsjobs.isEligibleToJoin
        /// </code>
        /// </summary>
        public static readonly RpcError NotEligible = new(ErrorCode, "NOT_ELIGIBLE");

        /// <summary>
        /// Trying to enable a presentation, when the user hasn't joined the Video Chat with [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall).
        /// <code>
        /// phone.joinGroupCallPresentation
        /// </code>
        /// </summary>
        public static readonly RpcError ParticipantJoinMissing = new(ErrorCode, "PARTICIPANT_JOIN_MISSING");

        /// <summary>
        /// The provided peer id is invalid.
        /// <code>
        /// payments.getSuggestedStarRefBots
        /// </code>
        /// </summary>
        public static readonly RpcError PeerIdInvalid = new(ErrorCode, "PEER_ID_INVALID");

        /// <summary>
        /// Cast a vote in the poll before calling this method.
        /// <code>
        /// messages.getPollVotes
        /// </code>
        /// </summary>
        public static readonly RpcError PollVoteRequired = new(ErrorCode, "POLL_VOTE_REQUIRED");

        /// <summary>
        /// A premium account is required to execute this action.
        /// <code>
        /// account.createBusinessChatLink
        /// account.editBusinessChatLink
        /// account.setGlobalPrivacySettings
        /// account.updateColor
        /// account.updateConnectedBot
        /// channels.createForumTopic
        /// messages.checkQuickReplyShortcut
        /// messages.editQuickReplyShortcut
        /// messages.forwardMessages
        /// messages.reorderQuickReplies
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendQuickReplyMessages
        /// messages.sendReaction
        /// messages.toggleDialogFilterTags
        /// messages.transcribeAudio
        /// messages.updateSavedReactionTag
        /// </code>
        /// </summary>
        public static readonly RpcError PremiumAccountRequired = new(ErrorCode, "PREMIUM_ACCOUNT_REQUIRED");

        /// <summary>
        /// You need a [Telegram Premium subscription](https://core.telegram.org/api/premium) to send a message to this user.
        /// <code>
        /// messages.forwardMessages
        /// messages.requestWebView
        /// messages.sendMedia
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError PrivacyPremiumRequired = new(ErrorCode, "PRIVACY_PREMIUM_REQUIRED");

        /// <summary>
        /// You can only export group call invite links for public chats or channels.
        /// <code>
        /// phone.exportGroupCallInvite
        /// </code>
        /// </summary>
        public static readonly RpcError PublicChannelMissing = new(ErrorCode, "PUBLIC_CHANNEL_MISSING");

        /// <summary>
        /// Your admin rights do not allow you to do this.
        /// <code>
        /// channels.editAdmin
        /// </code>
        /// </summary>
        public static readonly RpcError RightForbidden = new(ErrorCode, "RIGHT_FORBIDDEN");

        /// <summary>
        /// You can't change your sensitive content settings.
        /// <code>
        /// account.setContentSettings
        /// </code>
        /// </summary>
        public static readonly RpcError SensitiveChangeForbidden = new(ErrorCode, "SENSITIVE_CHANGE_FORBIDDEN");

        /// <summary>
        /// A [takeout](https://core.telegram.org/api/takeout) session needs to be initialized first, [see here  for more info](https://core.telegram.org/api/takeout).
        /// <code>
        /// account.finishTakeoutSession
        /// channels.getLeftChannels
        /// contacts.getSaved
        /// </code>
        /// </summary>
        public static readonly RpcError TakeoutRequired = new(ErrorCode, "TAKEOUT_REQUIRED");

        /// <summary>
        /// User accounts must provide the `bot` method parameter when calling this method. If there is no such method parameter, this method can only be invoked by bot accounts.
        /// <code>
        /// bots.answerWebhookJSONQuery
        /// bots.sendCustomRequest
        /// messages.setInlineBotResults
        /// users.setSecureValueErrors
        /// </code>
        /// </summary>
        public static readonly RpcError UserBotInvalid = new(ErrorCode, "USER_BOT_INVALID");

        /// <summary>
        /// One of the users you tried to add is already in too many channels/supergroups.
        /// <code>
        /// channels.editAdmin
        /// channels.inviteToChannel
        /// messages.hideChatJoinRequest
        /// </code>
        /// </summary>
        public static readonly RpcError UserChannelsTooMuch = new(ErrorCode, "USER_CHANNELS_TOO_MUCH");

        /// <summary>
        /// You can't send this secret message because the other participant deleted their account.
        /// <code>
        /// messages.sendEncryptedService
        /// </code>
        /// </summary>
        public static readonly RpcError UserDeleted = new(ErrorCode, "USER_DELETED");

        /// <summary>
        /// Invalid user provided.
        /// <code>
        /// help.editUserInfo
        /// help.getSupportName
        /// help.getUserInfo
        /// </code>
        /// </summary>
        public static readonly RpcError UserInvalid = new(ErrorCode, "USER_INVALID");

        /// <summary>
        /// You were blocked by this user.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendEncrypted
        /// messages.sendEncryptedService
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.setTyping
        /// phone.requestCall
        /// </code>
        /// </summary>
        public static readonly RpcError UserIsBlocked = new(ErrorCode, "USER_IS_BLOCKED");

        /// <summary>
        /// The provided user is not a mutual contact.
        /// <code>
        /// channels.editAdmin
        /// channels.inviteToChannel
        /// messages.addChatUser
        /// </code>
        /// </summary>
        public static readonly RpcError UserNotMutualContact = new(ErrorCode, "USER_NOT_MUTUAL_CONTACT");

        /// <summary>
        /// You're not a member of this supergroup/channel.
        /// <code>
        /// phone.inviteToGroupCall
        /// </code>
        /// </summary>
        public static readonly RpcError UserNotParticipant = new(ErrorCode, "USER_NOT_PARTICIPANT");

        /// <summary>
        /// The user's privacy settings do not allow you to do this.
        /// <code>
        /// channels.editAdmin
        /// channels.inviteToChannel
        /// help.getConfig
        /// messages.addChatUser
        /// messages.getOutboxReadDate
        /// phone.requestCall
        /// </code>
        /// </summary>
        public static readonly RpcError UserPrivacyRestricted = new(ErrorCode, "USER_PRIVACY_RESTRICTED");

        /// <summary>
        /// You're spamreported, you can't create channels or chats.
        /// <code>
        /// channels.createChannel
        /// channels.editAdmin
        /// messages.createChat
        /// </code>
        /// </summary>
        public static readonly RpcError UserRestricted = new(ErrorCode, "USER_RESTRICTED");

        /// <summary>
        /// This user's privacy settings forbid you from sending voice messages.
        /// <code>
        /// messages.forwardMessages
        /// </code>
        /// </summary>
        public static readonly RpcError VoiceMessagesForbidden = new(ErrorCode, "VOICE_MESSAGES_FORBIDDEN");

        /// <summary>
        /// You cannot fetch the read date of this message because you have disallowed other users to do so for *your* messages; to fix, allow other users to see *your* exact last online date OR purchase a [Telegram Premium](https://core.telegram.org/api/premium) subscription.
        /// <code>
        /// messages.getOutboxReadDate
        /// </code>
        /// </summary>
        public static readonly RpcError YourPrivacyRestricted = new(ErrorCode, "YOUR_PRIVACY_RESTRICTED");

        /// <summary>
        /// This chat is not available to the current user.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError ChatForbidden = new(ErrorCode, "CHAT_FORBIDDEN");
    }

    /// <summary>
    /// Rpc 404 errors
    /// </summary>
    public static class RpcErrors404
    {
        public const int ErrorCode = 404;
        /// <summary>
        /// The provided peer id is invalid.
        /// <code>
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError PeerIdInvalid = new(ErrorCode, "PEER_ID_INVALID");
    }

    /// <summary>
    /// Rpc 406 errors
    /// </summary>
    public static class RpcErrors406
    {
        public const int ErrorCode = 406;
        /// <summary>
        /// You provided some invalid flags in the banned rights.
        /// <code>
        /// channels.editBanned
        /// </code>
        /// </summary>
        public static readonly RpcError BannedRightsInvalid = new(ErrorCode, "BANNED_RIGHTS_INVALID");

        /// <summary>
        /// The user is currently advertising a [Business Location](https://core.telegram.org/api/business#location), the location may only be changed (or removed) using [account.updateBusinessLocation ](https://core.telegram.org/method/account.updateBusinessLocation).  .
        /// <code>
        /// contacts.getLocated
        /// </code>
        /// </summary>
        public static readonly RpcError BusinessAddressActive = new(ErrorCode, "BUSINESS_ADDRESS_ACTIVE");

        /// <summary>
        /// The other side of the call does not support any of the VoIP protocols supported by the local client, as specified by the `protocol.layer` and `protocol.library_versions` fields.
        /// <code>
        /// phone.acceptCall
        /// </code>
        /// </summary>
        public static readonly RpcError CallProtocolCompatLayerInvalid = new(ErrorCode, "CALL_PROTOCOL_COMPAT_LAYER_INVALID");

        /// <summary>
        /// You haven't joined this channel/supergroup.
        /// <code>
        /// channels.deleteChannel
        /// channels.deleteMessages
        /// channels.editBanned
        /// channels.getAdminLog
        /// channels.getChannels
        /// channels.getFullChannel
        /// channels.getMessages
        /// channels.getParticipant
        /// channels.getParticipants
        /// channels.inviteToChannel
        /// channels.joinChannel
        /// channels.leaveChannel
        /// channels.readHistory
        /// channels.readMessageContents
        /// messages.checkChatInvite
        /// messages.editMessage
        /// messages.forwardMessages
        /// messages.getHistory
        /// messages.getInlineBotResults
        /// messages.getMessagesViews
        /// messages.getPeerDialogs
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.setTyping
        /// updates.getChannelDifference
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelPrivate = new(ErrorCode, "CHANNEL_PRIVATE");

        /// <summary>
        /// Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change).
        /// <code>
        /// channels.deleteChannel
        /// </code>
        /// </summary>
        public static readonly RpcError ChannelTooLarge = new(ErrorCode, "CHANNEL_TOO_LARGE");

        /// <summary>
        /// You can't forward messages from a protected chat.
        /// <code>
        /// messages.forwardMessages
        /// </code>
        /// </summary>
        public static readonly RpcError ChatForwardsRestricted = new(ErrorCode, "CHAT_FORWARDS_RESTRICTED");

        /// <summary>
        /// The client has to be updated in order to support [file references](https://core.telegram.org/api/file_reference).
        /// <code>
        /// upload.getFile
        /// </code>
        /// </summary>
        public static readonly RpcError FilerefUpgradeNeeded = new(ErrorCode, "FILEREF_UPGRADE_NEEDED");

        /// <summary>
        /// You were just elected admin, you can't add or modify other admins yet.
        /// <code>
        /// channels.editAdmin
        /// </code>
        /// </summary>
        public static readonly RpcError FreshChangeAdminsForbidden = new(ErrorCode, "FRESH_CHANGE_ADMINS_FORBIDDEN");

        /// <summary>
        /// You can't change phone number right after logging in, please wait at least 24 hours.
        /// <code>
        /// account.sendChangePhoneCode
        /// </code>
        /// </summary>
        public static readonly RpcError FreshChangePhoneForbidden = new(ErrorCode, "FRESH_CHANGE_PHONE_FORBIDDEN");

        /// <summary>
        /// You can't logout other sessions if less than 24 hours have passed since you logged on the current session.
        /// <code>
        /// account.resetAuthorization
        /// account.setAuthorizationTTL
        /// auth.resetAuthorizations
        /// </code>
        /// </summary>
        public static readonly RpcError FreshResetAuthorisationForbidden = new(ErrorCode, "FRESH_RESET_AUTHORISATION_FORBIDDEN");

        /// <summary>
        /// The invite link has expired.
        /// <code>
        /// channels.joinChannel
        /// invokeWithLayer
        /// messages.checkChatInvite
        /// messages.importChatInvite
        /// </code>
        /// </summary>
        public static readonly RpcError InviteHashExpired = new(ErrorCode, "INVITE_HASH_EXPIRED");

        /// <summary>
        /// A detailed description of the error will be received separately as described [here ](https://core.telegram.org/api/errors#406-not-acceptable).
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError PaymentUnsupported = new(ErrorCode, "PAYMENT_UNSUPPORTED");

        /// <summary>
        /// The phone number is invalid.
        /// <code>
        /// account.changePhone
        /// account.sendChangePhoneCode
        /// auth.cancelCode
        /// auth.checkPhone
        /// auth.resendCode
        /// auth.sendCode
        /// auth.signIn
        /// auth.signUp
        /// </code>
        /// </summary>
        public static readonly RpcError PhoneNumberInvalid = new(ErrorCode, "PHONE_NUMBER_INVALID");

        /// <summary>
        /// You have tried logging in too many times.
        /// <code>
        /// auth.sendCode
        /// </code>
        /// </summary>
        public static readonly RpcError PhonePasswordFlood = new(ErrorCode, "PHONE_PASSWORD_FLOOD");

        /// <summary>
        /// You cannot currently purchase a Premium subscription.
        /// <code>
        /// payments.canPurchasePremium
        /// </code>
        /// </summary>
        public static readonly RpcError PremiumCurrentlyUnavailable = new(ErrorCode, "PREMIUM_CURRENTLY_UNAVAILABLE");

        /// <summary>
        /// Import for this chat is already in progress, wait <c>{0}</c> minutes before starting a new one.
        /// <code>
        /// messages.initHistoryImport
        /// </code>
        /// </summary>
        public static readonly RpcError PreviousChatImportActiveWaitXmin = new(ErrorCode, "PREVIOUS_CHAT_IMPORT_ACTIVE_WAIT_{0}MIN");

        /// <summary>
        /// You need a [Telegram Premium subscription](https://core.telegram.org/api/premium) to send a message to this user.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError PrivacyPremiumRequired = new(ErrorCode, "PRIVACY_PREMIUM_REQUIRED");

        /// <summary>
        /// Returned when all available options for this type of number were already used (e.g. flash-call, then SMS, then this error might be returned to trigger a second resend).
        /// <code>
        /// auth.resendCode
        /// </code>
        /// </summary>
        public static readonly RpcError SendCodeUnavailable = new(ErrorCode, "SEND_CODE_UNAVAILABLE");

        /// <summary>
        /// The provided sticker set is invalid.
        /// <code>
        /// messages.getStickerSet
        /// messages.installStickerSet
        /// messages.uninstallStickerSet
        /// stickers.addStickerToSet
        /// </code>
        /// </summary>
        public static readonly RpcError StickersetInvalid = new(ErrorCode, "STICKERSET_INVALID");

        /// <summary>
        /// Provided stickerset can't be installed as group stickerset to prevent admin deanonymization.
        /// <code>
        /// channels.setStickers
        /// </code>
        /// </summary>
        public static readonly RpcError StickersetOwnerAnonymous = new(ErrorCode, "STICKERSET_OWNER_ANONYMOUS");

        /// <summary>
        /// This topic was closed, you can't send messages to it anymore.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMedia
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError TopicClosed = new(ErrorCode, "TOPIC_CLOSED");

        /// <summary>
        /// The specified topic was deleted.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendMedia
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError TopicDeleted = new(ErrorCode, "TOPIC_DELETED");

        /// <summary>
        /// Please update your client to login.
        /// <code>
        /// auth.sendCode
        /// auth.signIn
        /// </code>
        /// </summary>
        public static readonly RpcError UpdateAppToLogin = new(ErrorCode, "UPDATE_APP_TO_LOGIN");

        /// <summary>
        /// You're spamreported, you can't create channels or chats.
        /// <code>
        /// channels.createChannel
        /// messages.createChat
        /// </code>
        /// </summary>
        public static readonly RpcError UserRestricted = new(ErrorCode, "USER_RESTRICTED");

        /// <summary>
        /// You need to disable privacy settings for your profile picture in order to make your geolocation public.
        /// <code>
        /// contacts.getLocated
        /// </code>
        /// </summary>
        public static readonly RpcError UserpicPrivacyRequired = new(ErrorCode, "USERPIC_PRIVACY_REQUIRED");

        /// <summary>
        /// You must have a profile picture to publish your geolocation.
        /// <code>
        /// contacts.getLocated
        /// </code>
        /// </summary>
        public static readonly RpcError UserpicUploadRequired = new(ErrorCode, "USERPIC_UPLOAD_REQUIRED");

        /// <summary>
        /// Concurrent usage of the current session from multiple connections was detected, the current session was invalidated by the server for security reasons!
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError AuthKeyDuplicated = new(ErrorCode, "AUTH_KEY_DUPLICATED");
    }

    /// <summary>
    /// Rpc 420 errors
    /// </summary>
    public static class RpcErrors420
    {
        public const int ErrorCode = 420;
        /// <summary>
        /// Since this account is active and protected by a 2FA password, we will delete it in 1 week for security purposes. You can cancel this process at any time, you'll be able to reset your account in <c>{0}</c> seconds.
        /// <code>
        /// account.deleteAccount
        /// </code>
        /// </summary>
        public static readonly RpcError _2faConfirmWaitX = new(ErrorCode, "2FA_CONFIRM_WAIT_{0}");

        /// <summary>
        /// The specified geopoint address is invalid.
        /// <code>
        /// channels.createChannel
        /// </code>
        /// </summary>
        public static readonly RpcError AddressInvalid = new(ErrorCode, "ADDRESS_INVALID");

        /// <summary>
        /// Please wait <c>{0}</c> seconds before repeating the action, or purchase a [Telegram Premium subscription](https://core.telegram.org/api/premium) to remove this rate limit.
        /// <code>
        /// upload.getFile
        /// </code>
        /// </summary>
        public static readonly RpcError FloodPremiumWaitX = new(ErrorCode, "FLOOD_PREMIUM_WAIT_{0}");

        /// <summary>
        /// You already have a premium subscription active until unixtime <c>{0}</c> .
        /// <code>
        /// payments.applyGiftCode
        /// </code>
        /// </summary>
        public static readonly RpcError PremiumSubActiveUntilX = new(ErrorCode, "PREMIUM_SUB_ACTIVE_UNTIL_{0}");

        /// <summary>
        /// SlowMode is enabled in this chat: wait <c>{0}</c> seconds before sending another message to this chat.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// </code>
        /// </summary>
        public static readonly RpcError SlowModeWaitX = new(ErrorCode, "SLOWMODE_WAIT_{0}");

        /// <summary>
        /// Sorry, for security reasons, you will be able to begin downloading your data in <c>{0}</c> seconds. We have notified all your devices about the export request to make sure it's authorized and to give you time to react if it's not.
        /// <code>
        /// account.initTakeoutSession
        /// </code>
        /// </summary>
        public static readonly RpcError TakeoutInitDelayX = new(ErrorCode, "TAKEOUT_INIT_DELAY_{0}");

        /// <summary>
        /// Please wait <c>{0}</c> seconds before repeating the action.
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError FloodWaitX = new(ErrorCode, "FLOOD_WAIT_{0}");
    }

    /// <summary>
    /// Rpc 500 errors
    /// </summary>
    public static class RpcErrors500
    {
        public const int ErrorCode = 500;
        /// <summary>
        /// Internal error, please repeat the method call.
        /// <code>
        /// auth.checkPassword
        /// </code>
        /// </summary>
        public static readonly RpcError AuthKeyUnsynchronized = new(ErrorCode, "AUTH_KEY_UNSYNCHRONIZED");

        /// <summary>
        /// Restart the authorization process.
        /// <code>
        /// auth.sendCode
        /// auth.signIn
        /// </code>
        /// </summary>
        public static readonly RpcError AuthRestart = new(ErrorCode, "AUTH_RESTART");

        /// <summary>
        /// Internal error (debug info <c>{0}</c>), please repeat the method call.
        /// <code>
        /// auth.sendCode
        /// </code>
        /// </summary>
        public static readonly RpcError AuthRestartX = new(ErrorCode, "AUTH_RESTART_{0}");

        /// <summary>
        /// The call failed because the user is already making another call.
        /// <code>
        /// phone.acceptCall
        /// phone.discardCall
        /// </code>
        /// </summary>
        public static readonly RpcError CallOccupyFailed = new(ErrorCode, "CALL_OCCUPY_FAILED");

        /// <summary>
        /// A server-side timeout occurred while reuploading the file to the CDN DC.
        /// <code>
        /// upload.reuploadCdnFile
        /// </code>
        /// </summary>
        public static readonly RpcError CdnUploadTimeout = new(ErrorCode, "CDN_UPLOAD_TIMEOUT");

        /// <summary>
        /// Failure while generating the chat ID.
        /// <code>
        /// messages.createChat
        /// </code>
        /// </summary>
        public static readonly RpcError ChatIdGenerateFailed = new(ErrorCode, "CHAT_ID_GENERATE_FAILED");

        /// <summary>
        /// Invalid chat.
        /// <code>
        /// channels.createChannel
        /// messages.migrateChat
        /// </code>
        /// </summary>
        public static readonly RpcError ChatInvalid = new(ErrorCode, "CHAT_INVALID");

        /// <summary>
        /// A waiting call returned an error.
        /// <code>
        /// messages.editMessage
        /// messages.receivedQueue
        /// messages.sendEncrypted
        /// messages.sendEncryptedService
        /// messages.sendMessage
        /// </code>
        /// </summary>
        public static readonly RpcError MsgWaitFailed = new(ErrorCode, "MSG_WAIT_FAILED");

        /// <summary>
        /// Channel internal replication issues, try again later (treat this like an RPC_CALL_FAIL).
        /// <code>
        /// updates.getChannelDifference
        /// </code>
        /// </summary>
        public static readonly RpcError PersistentTimestampOutdated = new(ErrorCode, "PERSISTENT_TIMESTAMP_OUTDATED");

        /// <summary>
        /// You provided a random ID that was already used.
        /// <code>
        /// messages.forwardMessages
        /// messages.sendInlineBotResult
        /// messages.sendMedia
        /// messages.sendMessage
        /// messages.sendMultiMedia
        /// messages.sendScheduledMessages
        /// messages.startBot
        /// updates.getDifference
        /// </code>
        /// </summary>
        public static readonly RpcError RandomIdDuplicate = new(ErrorCode, "RANDOM_ID_DUPLICATE");

        /// <summary>
        /// The specified media is invalid.
        /// <code>
        /// messages.sendInlineBotResult
        /// </code>
        /// </summary>
        public static readonly RpcError SendMediaInvalid = new(ErrorCode, "SEND_MEDIA_INVALID");

        /// <summary>
        /// Failure while signing in.
        /// <code>
        /// auth.signIn
        /// </code>
        /// </summary>
        public static readonly RpcError SignInFailed = new(ErrorCode, "SIGN_IN_FAILED");

        /// <summary>
        /// Translation failed, please try again later.
        /// <code>
        /// messages.translateText
        /// </code>
        /// </summary>
        public static readonly RpcError TranslateReqFailed = new(ErrorCode, "TRANSLATE_REQ_FAILED");
    }

    /// <summary>
    /// Rpc -503 errors
    /// </summary>
    public static class RpcErrors_503
    {
        public const int ErrorCode = -503;
        /// <summary>
        /// Timeout while fetching data.
        /// <code>
        /// messages.getBotCallbackAnswer
        /// messages.getInlineBotResults
        /// </code>
        /// </summary>
        public static readonly RpcError Timeout = new(ErrorCode, "Timeout");

        /// <summary>
        /// Spent too much time waiting for a previous query in the invokeAfterMsg request queue, aborting!
        /// <code>

        /// </code>
        /// </summary>
        public static readonly RpcError MsgWaitTimeout = new(ErrorCode, "MSG_WAIT_TIMEOUT");
    }

    // Count: 585
    public static readonly FrozenDictionary<uint, string> UserOnlyHandlers = new Dictionary<uint, string>
    {
       { 0xf3ed4c73, "Acceptauthorizationhandler" }, // account.acceptauthorizationhandler
       { 0x3bd2b4a0, "Acceptcallhandler" }, // phone.acceptcallhandler
       { 0xf831a20f, "Acceptcontacthandler" }, // contacts.acceptcontacthandler
       { 0x3dbc0415, "Acceptencryptionhandler" }, // messages.acceptencryptionhandler
       { 0xe894ad4d, "Acceptlogintokenhandler" }, // auth.acceptlogintokenhandler
       { 0xee72f79a, "Accepttermsofservicehandler" }, // help.accepttermsofservicehandler
       { 0xb12c7125, "Accepturlauthhandler" }, // messages.accepturlauthhandler
       { 0x57bbd166, "Activatestealthmodehandler" }, // stories.activatestealthmodehandler
       { 0xcbc6d107, "Addchatuserhandler" }, // messages.addchatuserhandler
       { 0xe8f463d0, "Addcontacthandler" }, // contacts.addcontacthandler
       { 0x17aeb75a, "Addpreviewmediahandler" }, // bots.addpreviewmediahandler
       { 0xf132e3ef, "Allowsendmessagehandler" }, // bots.allowsendmessagehandler
       { 0x6b7da746, "Applyboosthandler" }, // premium.applyboosthandler
       { 0xf6e26854, "Applygiftcodehandler" }, // payments.applygiftcodehandler
       { 0x80ed747d, "Assignappstoretransactionhandler" }, // payments.assignappstoretransactionhandler
       { 0xdffd50d3, "Assignplaymarkettransactionhandler" }, // payments.assignplaymarkettransactionhandler
       { 0x2e2e8734, "Blockhandler" }, // contacts.blockhandler
       { 0x29a8962c, "Blockfromreplieshandler" }, // contacts.blockfromreplieshandler
       { 0x6dfa0622, "Botcancelstarssubscriptionhandler" }, // payments.botcancelstarssubscriptionhandler
       { 0x1f040578, "Cancelcodehandler" }, // auth.cancelcodehandler
       { 0xc1cbd5b6, "Cancelpasswordemailhandler" }, // account.cancelpasswordemailhandler
       { 0x9fc19eb6, "Canpurchasepremiumhandler" }, // payments.canpurchasepremiumhandler
       { 0x1359f4e6, "Cansendmessagehandler" }, // bots.cansendmessagehandler
       { 0xc7dfdfdd, "Cansendstoryhandler" }, // stories.cansendstoryhandler
       { 0x40f48462, "Changeauthorizationsettingshandler" }, // account.changeauthorizationsettingshandler
       { 0x70c32edb, "Changephonehandler" }, // account.changephonehandler
       { 0xc7770878, "Changestarssubscriptionhandler" }, // payments.changestarssubscriptionhandler
       { 0x3eadb1bb, "Checkchatinvitehandler" }, // messages.checkchatinvitehandler
       { 0x41c10fff, "Checkchatlistinvitehandler" }, // chatlists.checkchatlistinvitehandler
       { 0x50077589, "Checkdownloadfileparamshandler" }, // bots.checkdownloadfileparamshandler
       { 0x8e51b4c1, "Checkgiftcodehandler" }, // payments.checkgiftcodehandler
       { 0xb59cf977, "Checkgroupcallhandler" }, // phone.checkgroupcallhandler
       { 0x43fe19f3, "Checkhistoryimporthandler" }, // messages.checkhistoryimporthandler
       { 0x5dc60f03, "Checkhistoryimportpeerhandler" }, // messages.checkhistoryimportpeerhandler
       { 0xd18b4d16, "Checkpasswordhandler" }, // auth.checkpasswordhandler
       { 0xf1d0fbd3, "Checkquickreplyshortcuthandler" }, // messages.checkquickreplyshortcuthandler
       { 0xd36bf79, "Checkrecoverypasswordhandler" }, // auth.checkrecoverypasswordhandler
       { 0x284b3639, "Checkshortnamehandler" }, // stickers.checkshortnamehandler
       { 0x2714d86c, "Checkusernamehandler" }, // account.checkusernamehandler
       { 0x10e6bd2c, "Checkusernamehandler" }, // channels.checkusernamehandler
       { 0x7e58ee9c, "Clearalldraftshandler" }, // messages.clearalldraftshandler
       { 0x18201aae, "Clearrecentemojistatuseshandler" }, // account.clearrecentemojistatuseshandler
       { 0x9dfeefb4, "Clearrecentreactionshandler" }, // messages.clearrecentreactionshandler
       { 0x8999602d, "Clearrecentstickershandler" }, // messages.clearrecentstickershandler
       { 0xd83d70c1, "Clearsavedinfohandler" }, // payments.clearsavedinfohandler
       { 0xf093465, "Clicksponsoredmessagehandler" }, // messages.clicksponsoredmessagehandler
       { 0x2efe1722, "Confirmcallhandler" }, // phone.confirmcallhandler
       { 0x8fdf1920, "Confirmpasswordemailhandler" }, // account.confirmpasswordemailhandler
       { 0x5f2178c3, "Confirmphonehandler" }, // account.confirmphonehandler
       { 0x7ed5348a, "Connectstarrefbothandler" }, // payments.connectstarrefbothandler
       { 0x421e027, "Convertstargifthandler" }, // payments.convertstargifthandler
       { 0xb290c69, "Converttogigagrouphandler" }, // channels.converttogigagrouphandler
       { 0x8851e68e, "Createbusinesschatlinkhandler" }, // account.createbusinesschatlinkhandler
       { 0x91006707, "Createchannelhandler" }, // channels.createchannelhandler
       { 0x92ceddd4, "Createchathandler" }, // messages.createchathandler
       { 0x48cdc6d8, "Creategroupcallhandler" }, // phone.creategroupcallhandler
       { 0x652e4400, "Createthemehandler" }, // account.createthemehandler
       { 0xa245dd3, "Deactivateallusernameshandler" }, // channels.deactivateallusernameshandler
       { 0x4c9409f6, "Declinepasswordresethandler" }, // account.declinepasswordresethandler
       { 0xa2c0cf74, "Deleteaccounthandler" }, // account.deleteaccounthandler
       { 0x53bc0020, "Deleteautosaveexceptionshandler" }, // account.deleteautosaveexceptionshandler
       { 0x60073674, "Deletebusinesschatlinkhandler" }, // account.deletebusinesschatlinkhandler
       { 0x1013fd9e, "Deletebyphoneshandler" }, // contacts.deletebyphoneshandler
       { 0xc0111fe3, "Deletechannelhandler" }, // channels.deletechannelhandler
       { 0x5bd0ee50, "Deletechathandler" }, // messages.deletechathandler
       { 0x96a0e00, "Deletecontactshandler" }, // contacts.deletecontactshandler
       { 0xd464a42b, "Deleteexportedchatinvitehandler" }, // messages.deleteexportedchatinvitehandler
       { 0x719c5c5e, "Deleteexportedinvitehandler" }, // chatlists.deleteexportedinvitehandler
       { 0xd1da940c, "Deletefactcheckhandler" }, // messages.deletefactcheckhandler
       { 0x9baa9647, "Deletehistoryhandler" }, // channels.deletehistoryhandler
       { 0xb08f922a, "Deletehistoryhandler" }, // messages.deletehistoryhandler
       { 0x367544db, "Deleteparticipanthistoryhandler" }, // channels.deleteparticipanthistoryhandler
       { 0xf9cbe409, "Deletephonecallhistoryhandler" }, // messages.deletephonecallhistoryhandler
       { 0x87cf7f2f, "Deletephotoshandler" }, // photos.deletephotoshandler
       { 0x2d0135b3, "Deletepreviewmediahandler" }, // bots.deletepreviewmediahandler
       { 0xe105e910, "Deletequickreplymessageshandler" }, // messages.deletequickreplymessageshandler
       { 0x3cc04740, "Deletequickreplyshortcuthandler" }, // messages.deletequickreplyshortcuthandler
       { 0x56987bd5, "Deleterevokedexportedchatinviteshandler" }, // messages.deleterevokedexportedchatinviteshandler
       { 0x6e98102b, "Deletesavedhistoryhandler" }, // messages.deletesavedhistoryhandler
       { 0x59ae2b16, "Deletescheduledmessageshandler" }, // messages.deletescheduledmessageshandler
       { 0xb880bc4b, "Deletesecurevaluehandler" }, // account.deletesecurevaluehandler
       { 0xae59db5f, "Deletestorieshandler" }, // stories.deletestorieshandler
       { 0x5e437ed9, "Disablepeerconnectedbothandler" }, // account.disablepeerconnectedbothandler
       { 0xb2cbc1c0, "Discardcallhandler" }, // phone.discardcallhandler
       { 0xf393aea0, "Discardencryptionhandler" }, // messages.discardencryptionhandler
       { 0x7a777135, "Discardgroupcallhandler" }, // phone.discardgroupcallhandler
       { 0xf50dbaa1, "Dismisssuggestionhandler" }, // help.dismisssuggestionhandler
       { 0x8c3410af, "Editbusinesschatlinkhandler" }, // account.editbusinesschatlinkhandler
       { 0xa85bd1c2, "Editchatadminhandler" }, // messages.editchatadminhandler
       { 0xba6705f0, "Editclosefriendshandler" }, // contacts.editclosefriendshandler
       { 0xe4fca4a3, "Editconnectedstarrefbothandler" }, // payments.editconnectedstarrefbothandler
       { 0x8f38cd1f, "Editcreatorhandler" }, // channels.editcreatorhandler
       { 0x653db63d, "Editexportedinvitehandler" }, // chatlists.editexportedinvitehandler
       { 0x589ee75, "Editfactcheckhandler" }, // messages.editfactcheckhandler
       { 0xa5273abf, "Editgroupcallparticipanthandler" }, // phone.editgroupcallparticipanthandler
       { 0x1ca6ac0a, "Editgroupcalltitlehandler" }, // phone.editgroupcalltitlehandler
       { 0x58e63f6d, "Editlocationhandler" }, // channels.editlocationhandler
       { 0x6847d0ab, "Editpeerfoldershandler" }, // folders.editpeerfoldershandler
       { 0x8525606f, "Editpreviewmediahandler" }, // bots.editpreviewmediahandler
       { 0x5c003cef, "Editquickreplyshortcuthandler" }, // messages.editquickreplyshortcuthandler
       { 0xb583ba46, "Editstoryhandler" }, // stories.editstoryhandler
       { 0x66b91b70, "Edituserinfohandler" }, // help.edituserinfohandler
       { 0x8472478e, "Exportchatlistinvitehandler" }, // chatlists.exportchatlistinvitehandler
       { 0xf8654027, "Exportcontacttokenhandler" }, // contacts.exportcontacttokenhandler
       { 0xe6aa647f, "Exportgroupcallinvitehandler" }, // phone.exportgroupcallinvitehandler
       { 0xb7e085fe, "Exportlogintokenhandler" }, // auth.exportlogintokenhandler
       { 0xe63fadeb, "Exportmessagelinkhandler" }, // channels.exportmessagelinkhandler
       { 0x7b8def20, "Exportstorylinkhandler" }, // stories.exportstorylinkhandler
       { 0xb9ffc55b, "Favestickerhandler" }, // messages.favestickerhandler
       { 0x4f1ebf24, "Finishjobhandler" }, // smsjobs.finishjobhandler
       { 0x1d2652ee, "Finishtakeoutsessionhandler" }, // account.finishtakeoutsessionhandler
       { 0xcc5bebb3, "Fulfillstarssubscriptionhandler" }, // payments.fulfillstarssubscriptionhandler
       { 0x8fc711d, "Getaccountttlhandler" }, // account.getaccountttlhandler
       { 0xb0711d83, "Getadminedbotshandler" }, // bots.getadminedbotshandler
       { 0xf8b036af, "Getadminedpublicchannelshandler" }, // channels.getadminedpublicchannelshandler
       { 0x33ddf480, "Getadminloghandler" }, // channels.getadminloghandler
       { 0x3920e6ef, "Getadminswithinviteshandler" }, // messages.getadminswithinviteshandler
       { 0x6a3f8d65, "Getalldraftshandler" }, // messages.getalldraftshandler
       { 0x9b5ae7f9, "Getallreadpeerstorieshandler" }, // stories.getallreadpeerstorieshandler
       { 0xb288bc7d, "Getallsecurevalueshandler" }, // account.getallsecurevalueshandler
       { 0xb8a0a1a8, "Getallstickershandler" }, // messages.getallstickershandler
       { 0xeeb0d625, "Getallstorieshandler" }, // stories.getallstorieshandler
       { 0x9010ef6f, "Getappchangeloghandler" }, // help.getappchangeloghandler
       { 0x61e3f854, "Getappconfighandler" }, // help.getappconfighandler
       { 0x522d5a7d, "Getappupdatehandler" }, // help.getappupdatehandler
       { 0x57f17692, "Getarchivedstickershandler" }, // messages.getarchivedstickershandler
       { 0xcc5b67cc, "Getattachedstickershandler" }, // messages.getattachedstickershandler
       { 0x77216192, "Getattachmenubothandler" }, // messages.getattachmenubothandler
       { 0x16fcc2cb, "Getattachmenubotshandler" }, // messages.getattachmenubotshandler
       { 0xa929597a, "Getauthorizationformhandler" }, // account.getauthorizationformhandler
       { 0xe320c158, "Getauthorizationshandler" }, // account.getauthorizationshandler
       { 0x56da0b3f, "Getautodownloadsettingshandler" }, // account.getautodownloadsettingshandler
       { 0xadcbbcda, "Getautosavesettingshandler" }, // account.getautosavesettingshandler
       { 0xdea20a39, "Getavailableeffectshandler" }, // messages.getavailableeffectshandler
       { 0x18dea0ac, "Getavailablereactionshandler" }, // messages.getavailablereactionshandler
       { 0x2e79d779, "Getbankcarddatahandler" }, // payments.getbankcarddatahandler
       { 0xdaeda864, "Getbirthdayshandler" }, // contacts.getbirthdayshandler
       { 0x9a868f80, "Getblockedhandler" }, // contacts.getblockedhandler
       { 0x60f67660, "Getboostslisthandler" }, // premium.getboostslisthandler
       { 0x42f1f61, "Getboostsstatushandler" }, // premium.getboostsstatushandler
       { 0x34fdc5c3, "Getbotapphandler" }, // messages.getbotapphandler
       { 0x9342ca07, "Getbotcallbackanswerhandler" }, // messages.getbotcallbackanswerhandler
       { 0xf788ee19, "Getbroadcastrevenuestatshandler" }, // stats.getbroadcastrevenuestatshandler
       { 0x70990b6d, "Getbroadcastrevenuetransactionshandler" }, // stats.getbroadcastrevenuetransactionshandler
       { 0x9df4faad, "Getbroadcastrevenuewithdrawalurlhandler" }, // stats.getbroadcastrevenuewithdrawalurlhandler
       { 0xab42441a, "Getbroadcaststatshandler" }, // stats.getbroadcaststatshandler
       { 0x6f70dde1, "Getbusinesschatlinkshandler" }, // account.getbusinesschatlinkshandler
       { 0x55451fa9, "Getcallconfighandler" }, // phone.getcallconfighandler
       { 0x7727a7d5, "Getchanneldefaultemojistatuseshandler" }, // account.getchanneldefaultemojistatuseshandler
       { 0x25a71742, "Getchannelrecommendationshandler" }, // channels.getchannelrecommendationshandler
       { 0x35a9e0d5, "Getchannelrestrictedstatusemojishandler" }, // account.getchannelrestrictedstatusemojishandler
       { 0xdf04dd4e, "Getchatinviteimportershandler" }, // messages.getchatinviteimportershandler
       { 0x89419521, "Getchatlistupdateshandler" }, // chatlists.getchatlistupdateshandler
       { 0xa56a8b60, "Getchatstosendhandler" }, // stories.getchatstosendhandler
       { 0xd638de89, "Getchatthemeshandler" }, // account.getchatthemeshandler
       { 0xbe1e85ba, "Getcollectibleinfohandler" }, // fragment.getcollectibleinfohandler
       { 0xe40ca104, "Getcommonchatshandler" }, // messages.getcommonchatshandler
       { 0x4ea4c80f, "Getconnectedbotshandler" }, // account.getconnectedbotshandler
       { 0xb7d998f0, "Getconnectedstarrefbothandler" }, // payments.getconnectedstarrefbothandler
       { 0x5869a553, "Getconnectedstarrefbotshandler" }, // payments.getconnectedstarrefbotshandler
       { 0x7adc669d, "Getcontactidshandler" }, // contacts.getcontactidshandler
       { 0x5dd69e12, "Getcontactshandler" }, // contacts.getcontactshandler
       { 0x9f07c728, "Getcontactsignupnotificationhandler" }, // account.getcontactsignupnotificationhandler
       { 0x8b9b4dae, "Getcontentsettingshandler" }, // account.getcontentsettingshandler
       { 0x735787a8, "Getcountrieslisthandler" }, // help.getcountrieslisthandler
       { 0x3fedc75f, "Getdeeplinkinfohandler" }, // help.getdeeplinkinfohandler
       { 0xa60ab9ce, "Getdefaultbackgroundemojishandler" }, // account.getdefaultbackgroundemojishandler
       { 0xd6753386, "Getdefaultemojistatuseshandler" }, // account.getdefaultemojistatuseshandler
       { 0x915860ae, "Getdefaultgroupphotoemojishandler" }, // account.getdefaultgroupphotoemojishandler
       { 0x658b7188, "Getdefaulthistoryttlhandler" }, // messages.getdefaulthistoryttlhandler
       { 0xe2750328, "Getdefaultprofilephotoemojishandler" }, // account.getdefaultprofilephotoemojishandler
       { 0xbdf93428, "Getdefaulttagreactionshandler" }, // messages.getdefaulttagreactionshandler
       { 0x26cf8950, "Getdhconfighandler" }, // messages.getdhconfighandler
       { 0xefd48c89, "Getdialogfiltershandler" }, // messages.getdialogfiltershandler
       { 0xa0f4cb4f, "Getdialogshandler" }, // messages.getdialogshandler
       { 0x22e24e22, "Getdialogunreadmarkshandler" }, // messages.getdialogunreadmarkshandler
       { 0xcd984aa5, "Getdifferencehandler" }, // langpack.getdifferencehandler
       { 0x446972fd, "Getdiscussionmessagehandler" }, // messages.getdiscussionmessagehandler
       { 0x7488ce5b, "Getemojigroupshandler" }, // messages.getemojigroupshandler
       { 0x35a0e062, "Getemojikeywordshandler" }, // messages.getemojikeywordshandler
       { 0x1508b6af, "Getemojikeywordsdifferencehandler" }, // messages.getemojikeywordsdifferencehandler
       { 0x4e9963b2, "Getemojikeywordslanguageshandler" }, // messages.getemojikeywordslanguageshandler
       { 0x21a548f3, "Getemojiprofilephotogroupshandler" }, // messages.getemojiprofilephotogroupshandler
       { 0x2ecd56cd, "Getemojistatusgroupshandler" }, // messages.getemojistatusgroupshandler
       { 0x1dd840f5, "Getemojistickergroupshandler" }, // messages.getemojistickergroupshandler
       { 0xfbfca18f, "Getemojistickershandler" }, // messages.getemojistickershandler
       { 0xd5b10c26, "Getemojiurlhandler" }, // messages.getemojiurlhandler
       { 0x73746f5c, "Getexportedchatinvitehandler" }, // messages.getexportedchatinvitehandler
       { 0xa2b5a3f6, "Getexportedchatinviteshandler" }, // messages.getexportedchatinviteshandler
       { 0xce03da83, "Getexportedinviteshandler" }, // chatlists.getexportedinviteshandler
       { 0x84f80814, "Getextendedmediahandler" }, // messages.getextendedmediahandler
       { 0xb9cdc5ee, "Getfactcheckhandler" }, // messages.getfactcheckhandler
       { 0x4f1aaa9, "Getfavedstickershandler" }, // messages.getfavedstickershandler
       { 0xecf6736, "Getfeaturedemojistickershandler" }, // messages.getfeaturedemojistickershandler
       { 0x64780b14, "Getfeaturedstickershandler" }, // messages.getfeaturedstickershandler
       { 0xde560d1, "Getforumtopicshandler" }, // channels.getforumtopicshandler
       { 0xb0831eb9, "Getforumtopicsbyidhandler" }, // channels.getforumtopicsbyidhandler
       { 0xf4239425, "Getgiveawayinfohandler" }, // payments.getgiveawayinfohandler
       { 0xeb2b4cf6, "Getglobalprivacysettingshandler" }, // account.getglobalprivacysettingshandler
       { 0x41845db, "Getgroupcallhandler" }, // phone.getgroupcallhandler
       { 0xef7c213a, "Getgroupcalljoinashandler" }, // phone.getgroupcalljoinashandler
       { 0x1ab21940, "Getgroupcallstreamchannelshandler" }, // phone.getgroupcallstreamchannelshandler
       { 0xdeb3abbf, "Getgroupcallstreamrtmpurlhandler" }, // phone.getgroupcallstreamrtmpurlhandler
       { 0xc558d8ab, "Getgroupparticipantshandler" }, // phone.getgroupparticipantshandler
       { 0xf5dad378, "Getgroupsfordiscussionhandler" }, // channels.getgroupsfordiscussionhandler
       { 0x4423e6c5, "Gethistoryhandler" }, // messages.gethistoryhandler
       { 0x11e831ee, "Getinactivechannelshandler" }, // channels.getinactivechannelshandler
       { 0x514e999d, "Getinlinebotresultshandler" }, // messages.getinlinebotresultshandler
       { 0x4d392343, "Getinvitetexthandler" }, // help.getinvitetexthandler
       { 0xa622aa10, "Getispremiumrequiredtocontacthandler" }, // users.getispremiumrequiredtocontacthandler
       { 0xf2f2330a, "Getlangpackhandler" }, // langpack.getlangpackhandler
       { 0x6a596502, "Getlanguagehandler" }, // langpack.getlanguagehandler
       { 0x42c6978f, "Getlanguageshandler" }, // langpack.getlanguageshandler
       { 0xfdbcd714, "Getleavechatlistsuggestionshandler" }, // chatlists.getleavechatlistsuggestionshandler
       { 0x8341ecc0, "Getleftchannelshandler" }, // channels.getleftchannelshandler
       { 0xd348bc44, "Getlocatedhandler" }, // contacts.getlocatedhandler
       { 0x640f82b8, "Getmaskstickershandler" }, // messages.getmaskstickershandler
       { 0xdcdf8607, "Getmegagroupstatshandler" }, // stats.getmegagroupstatshandler
       { 0xfda68d36, "Getmessageeditdatahandler" }, // messages.getmessageeditdatahandler
       { 0x5f150144, "Getmessagepublicforwardshandler" }, // stats.getmessagepublicforwardshandler
       { 0x461b3f48, "Getmessagereactionslisthandler" }, // messages.getmessagereactionslisthandler
       { 0x31c1c44f, "Getmessagereadparticipantshandler" }, // messages.getmessagereadparticipantshandler
       { 0x8bba90e6, "Getmessagesreactionshandler" }, // messages.getmessagesreactionshandler
       { 0xb6e0a3f5, "Getmessagestatshandler" }, // stats.getmessagestatshandler
       { 0x5784d3e1, "Getmessagesviewshandler" }, // messages.getmessagesviewshandler
       { 0x65ad71dc, "Getmultiwallpapershandler" }, // account.getmultiwallpapershandler
       { 0xbe77b4a, "Getmyboostshandler" }, // premium.getmyboostshandler
       { 0xd0b5e1fc, "Getmystickershandler" }, // messages.getmystickershandler
       { 0x1fb33026, "Getnearestdchandler" }, // help.getnearestdchandler
       { 0x53577479, "Getnotifyexceptionshandler" }, // account.getnotifyexceptionshandler
       { 0x12b3ad31, "Getnotifysettingshandler" }, // account.getnotifysettingshandler
       { 0x7ed094a1, "Getoldfeaturedstickershandler" }, // messages.getoldfeaturedstickershandler
       { 0x6e2be050, "Getonlineshandler" }, // messages.getonlineshandler
       { 0x8c4bfe5d, "Getoutboxreaddatehandler" }, // messages.getoutboxreaddatehandler
       { 0x472455aa, "Getpaidreactionprivacyhandler" }, // messages.getpaidreactionprivacyhandler
       { 0xc661ad08, "Getpassportconfighandler" }, // help.getpassportconfighandler
       { 0x548a30f5, "Getpasswordhandler" }, // account.getpasswordhandler
       { 0x9cd4eaf9, "Getpasswordsettingshandler" }, // account.getpasswordsettingshandler
       { 0x37148dbb, "Getpaymentformhandler" }, // payments.getpaymentformhandler
       { 0x2478d1cc, "Getpaymentreceipthandler" }, // payments.getpaymentreceipthandler
       { 0xda80f42f, "Getpeercolorshandler" }, // help.getpeercolorshandler
       { 0xe470bcfd, "Getpeerdialogshandler" }, // messages.getpeerdialogshandler
       { 0x535983c3, "Getpeermaxidshandler" }, // stories.getpeermaxidshandler
       { 0xabcfa9fd, "Getpeerprofilecolorshandler" }, // help.getpeerprofilecolorshandler
       { 0xefd9a6a2, "Getpeersettingshandler" }, // messages.getpeersettingshandler
       { 0x2c4ada50, "Getpeerstorieshandler" }, // stories.getpeerstorieshandler
       { 0xd6b94df2, "Getpinneddialogshandler" }, // messages.getpinneddialogshandler
       { 0xd63d94e0, "Getpinnedsaveddialogshandler" }, // messages.getpinnedsaveddialogshandler
       { 0x5821a5dc, "Getpinnedstorieshandler" }, // stories.getpinnedstorieshandler
       { 0x73bb643b, "Getpollresultshandler" }, // messages.getpollresultshandler
       { 0xb86e380e, "Getpollvoteshandler" }, // messages.getpollvoteshandler
       { 0xc2510192, "Getpopularappbotshandler" }, // bots.getpopularappbotshandler
       { 0x2757ba54, "Getpremiumgiftcodeoptionshandler" }, // payments.getpremiumgiftcodeoptionshandler
       { 0xb81b93d4, "Getpremiumpromohandler" }, // help.getpremiumpromohandler
       { 0x857ebdb8, "Getpreparedinlinemessagehandler" }, // messages.getpreparedinlinemessagehandler
       { 0x423ab3ad, "Getpreviewinfohandler" }, // bots.getpreviewinfohandler
       { 0xa2a5594d, "Getpreviewmediashandler" }, // bots.getpreviewmediashandler
       { 0xdadbc950, "Getprivacyhandler" }, // account.getprivacyhandler
       { 0xc0977421, "Getpromodatahandler" }, // help.getpromodatahandler
       { 0xd483f2a8, "Getquickreplieshandler" }, // messages.getquickreplieshandler
       { 0x94a495c3, "Getquickreplymessageshandler" }, // messages.getquickreplymessageshandler
       { 0x6dd654c, "Getreactionsnotifysettingshandler" }, // account.getreactionsnotifysettingshandler
       { 0xf578105, "Getrecentemojistatuseshandler" }, // account.getrecentemojistatuseshandler
       { 0x702a40e0, "Getrecentlocationshandler" }, // messages.getrecentlocationshandler
       { 0x3dc0f114, "Getrecentmeurlshandler" }, // help.getrecentmeurlshandler
       { 0x39461db2, "Getrecentreactionshandler" }, // messages.getrecentreactionshandler
       { 0x9da9403b, "Getrecentstickershandler" }, // messages.getrecentstickershandler
       { 0x22ddd30c, "Getreplieshandler" }, // messages.getreplieshandler
       { 0x82f1e39f, "Getsavedhandler" }, // contacts.getsavedhandler
       { 0x5381d21a, "Getsaveddialogshandler" }, // messages.getsaveddialogshandler
       { 0x5cf09635, "Getsavedgifshandler" }, // messages.getsavedgifshandler
       { 0x3d9a414d, "Getsavedhistoryhandler" }, // messages.getsavedhistoryhandler
       { 0x227d824b, "Getsavedinfohandler" }, // payments.getsavedinfohandler
       { 0x3637e05b, "Getsavedreactiontagshandler" }, // messages.getsavedreactiontagshandler
       { 0xe1902288, "Getsavedringtoneshandler" }, // account.getsavedringtoneshandler
       { 0xf516760b, "Getscheduledhistoryhandler" }, // messages.getscheduledhistoryhandler
       { 0xbdbb0464, "Getscheduledmessageshandler" }, // messages.getscheduledmessageshandler
       { 0x1bbcf300, "Getsearchcountershandler" }, // messages.getsearchcountershandler
       { 0x6aa3f6bd, "Getsearchresultscalendarhandler" }, // messages.getsearchresultscalendarhandler
       { 0x9c7f2f10, "Getsearchresultspositionshandler" }, // messages.getsearchresultspositionshandler
       { 0x73665bc2, "Getsecurevaluehandler" }, // account.getsecurevaluehandler
       { 0xdc770ee, "Getsendashandler" }, // channels.getsendashandler
       { 0x778d902f, "Getsmsjobhandler" }, // smsjobs.getsmsjobhandler
       { 0x1cff7e08, "Getsplitrangeshandler" }, // messages.getsplitrangeshandler
       { 0x9bd2f439, "Getsponsoredmessageshandler" }, // messages.getsponsoredmessageshandler
       { 0xc4563590, "Getstargiftshandler" }, // payments.getstargiftshandler
       { 0xd3c96bc8, "Getstarsgiftoptionshandler" }, // payments.getstarsgiftoptionshandler
       { 0xbd1efd3e, "Getstarsgiveawayoptionshandler" }, // payments.getstarsgiveawayoptionshandler
       { 0xd1d7efc5, "Getstarsrevenueadsaccounturlhandler" }, // payments.getstarsrevenueadsaccounturlhandler
       { 0xd91ffad6, "Getstarsrevenuestatshandler" }, // payments.getstarsrevenuestatshandler
       { 0x13bbe8b3, "Getstarsrevenuewithdrawalurlhandler" }, // payments.getstarsrevenuewithdrawalurlhandler
       { 0x104fcfa7, "Getstarsstatushandler" }, // payments.getstarsstatushandler
       { 0x32512c5, "Getstarssubscriptionshandler" }, // payments.getstarssubscriptionshandler
       { 0xc00ec7d3, "Getstarstopupoptionshandler" }, // payments.getstarstopupoptionshandler
       { 0x27842d2e, "Getstarstransactionsbyidhandler" }, // payments.getstarstransactionsbyidhandler
       { 0x10a698e8, "Getstatushandler" }, // smsjobs.getstatushandler
       { 0xc4a353ee, "Getstatuseshandler" }, // contacts.getstatuseshandler
       { 0xd5a5d3a1, "Getstickershandler" }, // messages.getstickershandler
       { 0xb4352016, "Getstoriesarchivehandler" }, // stories.getstoriesarchivehandler
       { 0x5774ca74, "Getstoriesbyidhandler" }, // stories.getstoriesbyidhandler
       { 0x28e16cc8, "Getstoriesviewshandler" }, // stories.getstoriesviewshandler
       { 0xa6437ef6, "Getstorypublicforwardshandler" }, // stats.getstorypublicforwardshandler
       { 0xb9b2881f, "Getstoryreactionslisthandler" }, // stories.getstoryreactionslisthandler
       { 0x374fef40, "Getstorystatshandler" }, // stats.getstorystatshandler
       { 0x7ed23c57, "Getstoryviewslisthandler" }, // stories.getstoryviewslisthandler
       { 0xefea3803, "Getstringshandler" }, // langpack.getstringshandler
       { 0xa29cd42c, "Getsuggesteddialogfiltershandler" }, // messages.getsuggesteddialogfiltershandler
       { 0xd6b48f7, "Getsuggestedstarrefbotshandler" }, // payments.getsuggestedstarrefbotshandler
       { 0x9cdf08cd, "Getsupporthandler" }, // help.getsupporthandler
       { 0xd360e72c, "Getsupportnamehandler" }, // help.getsupportnamehandler
       { 0x2ca51fd1, "Gettermsofserviceupdatehandler" }, // help.gettermsofserviceupdatehandler
       { 0x3a5869ec, "Getthemehandler" }, // account.getthemehandler
       { 0x7206e458, "Getthemeshandler" }, // account.getthemeshandler
       { 0x49b30240, "Gettimezoneslisthandler" }, // help.gettimezoneslisthandler
       { 0x449e0b51, "Gettmppasswordhandler" }, // account.gettmppasswordhandler
       { 0x973478b6, "Gettoppeershandler" }, // contacts.gettoppeershandler
       { 0xbb8125ba, "Gettopreactionshandler" }, // messages.gettopreactionshandler
       { 0xf107e790, "Getunreadmentionshandler" }, // messages.getunreadmentionshandler
       { 0x3223495b, "Getunreadreactionshandler" }, // messages.getunreadreactionshandler
       { 0x38a08d3, "Getuserinfohandler" }, // help.getuserinfohandler
       { 0x5e72c7e1, "Getuserstargiftshandler" }, // payments.getuserstargiftshandler
       { 0xfc8ddbea, "Getwallpaperhandler" }, // account.getwallpaperhandler
       { 0x7967d36, "Getwallpapershandler" }, // account.getwallpapershandler
       { 0x182e6d6f, "Getwebauthorizationshandler" }, // account.getwebauthorizationshandler
       { 0x8d9692a3, "Getwebpagehandler" }, // messages.getwebpagehandler
       { 0x8b68b0cc, "Getwebpagepreviewhandler" }, // messages.getwebpagepreviewhandler
       { 0xe085f4ea, "Hideallchatjoinrequestshandler" }, // messages.hideallchatjoinrequestshandler
       { 0x66e486fb, "Hidechatlistupdateshandler" }, // chatlists.hidechatlistupdateshandler
       { 0x4facb138, "Hidepeersettingsbarhandler" }, // messages.hidepeersettingsbarhandler
       { 0x1e251c95, "Hidepromodatahandler" }, // help.hidepromodatahandler
       { 0x6c50051c, "Importchatinvitehandler" }, // messages.importchatinvitehandler
       { 0x2c800be5, "Importcontactshandler" }, // contacts.importcontactshandler
       { 0x13005788, "Importcontacttokenhandler" }, // contacts.importcontacttokenhandler
       { 0x95ac5ce4, "Importlogintokenhandler" }, // auth.importlogintokenhandler
       { 0x2db873a9, "Importwebtokenauthorizationhandler" }, // auth.importwebtokenauthorizationhandler
       { 0xb2028afb, "Incrementstoryviewshandler" }, // stories.incrementstoryviewshandler
       { 0x34090c3b, "Inithistoryimporthandler" }, // messages.inithistoryimporthandler
       { 0x8ef3eab0, "Inittakeoutsessionhandler" }, // account.inittakeoutsessionhandler
       { 0xc78fe460, "Installstickersethandler" }, // messages.installstickersethandler
       { 0xc727bb3b, "Installthemehandler" }, // account.installthemehandler
       { 0xfeed5769, "Installwallpaperhandler" }, // account.installwallpaperhandler
       { 0xca8ae8ba, "Invalidatesignincodeshandler" }, // account.invalidatesignincodeshandler
       { 0xc9e33d54, "Invitetochannelhandler" }, // channels.invitetochannelhandler
       { 0x7b393160, "Invitetogroupcallhandler" }, // phone.invitetogroupcallhandler
       { 0x87fc5e7, "Invokewebviewcustommethodhandler" }, // bots.invokewebviewcustommethodhandler
       { 0xedc39d0, "Iseligibletojoinhandler" }, // smsjobs.iseligibletojoinhandler
       { 0xa74ece2d, "Joinhandler" }, // smsjobs.joinhandler
       { 0x24b524c5, "Joinchannelhandler" }, // channels.joinchannelhandler
       { 0xa6b1e39a, "Joinchatlistinvitehandler" }, // chatlists.joinchatlistinvitehandler
       { 0xe089f8f5, "Joinchatlistupdateshandler" }, // chatlists.joinchatlistupdateshandler
       { 0xb132ff7b, "Joingroupcallhandler" }, // phone.joingroupcallhandler
       { 0xcbea6bc4, "Joingroupcallpresentationhandler" }, // phone.joingroupcallpresentationhandler
       { 0x5ff58f20, "Launchprepaidgiveawayhandler" }, // payments.launchprepaidgiveawayhandler
       { 0x9898ad73, "Leavehandler" }, // smsjobs.leavehandler
       { 0x74fae13a, "Leavechatlisthandler" }, // chatlists.leavechatlisthandler
       { 0x500377f9, "Leavegroupcallhandler" }, // phone.leavegroupcallhandler
       { 0x1c50d144, "Leavegroupcallpresentationhandler" }, // phone.leavegroupcallpresentationhandler
       { 0x621d5fa0, "Loadasyncgraphhandler" }, // stats.loadasyncgraphhandler
       { 0xc286d98f, "Markdialogunreadhandler" }, // messages.markdialogunreadhandler
       { 0xa2875319, "Migratechathandler" }, // messages.migratechathandler
       { 0xb0d81a83, "Prolongwebviewhandler" }, // messages.prolongwebviewhandler
       { 0x7f1d072f, "Ratetranscribedaudiohandler" }, // messages.ratetranscribedaudiohandler
       { 0xf731a9f4, "Readdiscussionhandler" }, // messages.readdiscussionhandler
       { 0x7f4b690a, "Readencryptedhistoryhandler" }, // messages.readencryptedhistoryhandler
       { 0x5b118126, "Readfeaturedstickershandler" }, // messages.readfeaturedstickershandler
       { 0xcc104937, "Readhistoryhandler" }, // channels.readhistoryhandler
       { 0xe306d3a, "Readhistoryhandler" }, // messages.readhistoryhandler
       { 0x36e5bf4d, "Readmentionshandler" }, // messages.readmentionshandler
       { 0xeab5dc38, "Readmessagecontentshandler" }, // channels.readmessagecontentshandler
       { 0x36a73f77, "Readmessagecontentshandler" }, // messages.readmessagecontentshandler
       { 0x54aa7f8e, "Readreactionshandler" }, // messages.readreactionshandler
       { 0xa556dac8, "Readstorieshandler" }, // stories.readstorieshandler
       { 0x17d54f61, "Receivedcallhandler" }, // phone.receivedcallhandler
       { 0x5a954c0, "Receivedmessageshandler" }, // messages.receivedmessageshandler
       { 0x55a5bb66, "Receivedqueuehandler" }, // messages.receivedqueuehandler
       { 0x37096c70, "Recoverpasswordhandler" }, // auth.recoverpasswordhandler
       { 0xec86017a, "Registerdevicehandler" }, // account.registerdevicehandler
       { 0x3b1adf37, "Reorderpinneddialogshandler" }, // messages.reorderpinneddialogshandler
       { 0x2950a18f, "Reorderpinnedforumtopicshandler" }, // channels.reorderpinnedforumtopicshandler
       { 0x8b716587, "Reorderpinnedsaveddialogshandler" }, // messages.reorderpinnedsaveddialogshandler
       { 0xb627f3aa, "Reorderpreviewmediashandler" }, // bots.reorderpreviewmediashandler
       { 0x60331907, "Reorderquickreplieshandler" }, // messages.reorderquickreplieshandler
       { 0x78337739, "Reorderstickersetshandler" }, // messages.reorderstickersetshandler
       { 0xef500eab, "Reorderusernameshandler" }, // account.reorderusernameshandler
       { 0x9709b1c2, "Reorderusernameshandler" }, // bots.reorderusernameshandler
       { 0xb45ced1d, "Reorderusernameshandler" }, // channels.reorderusernameshandler
       { 0xfc78af9b, "Reporthandler" }, // messages.reporthandler
       { 0x19d8eb45, "Reporthandler" }, // stories.reporthandler
       { 0xa850a693, "Reportantispamfalsepositivehandler" }, // channels.reportantispamfalsepositivehandler
       { 0x4b0c8c0f, "Reportencryptedspamhandler" }, // messages.reportencryptedspamhandler
       { 0xcb9deff6, "Reportmissingcodehandler" }, // auth.reportmissingcodehandler
       { 0xc5ba3d86, "Reportpeerhandler" }, // account.reportpeerhandler
       { 0xfa8cc6f5, "Reportprofilephotohandler" }, // account.reportprofilephotohandler
       { 0x3f64c076, "Reportreactionhandler" }, // messages.reportreactionhandler
       { 0xf44a8315, "Reportspamhandler" }, // channels.reportspamhandler
       { 0xcf1592db, "Reportspamhandler" }, // messages.reportspamhandler
       { 0x1af3dbb8, "Reportsponsoredmessagehandler" }, // messages.reportsponsoredmessagehandler
       { 0x53618bce, "Requestappwebviewhandler" }, // messages.requestappwebviewhandler
       { 0x42ff96ed, "Requestcallhandler" }, // phone.requestcallhandler
       { 0xf64daf43, "Requestencryptionhandler" }, // messages.requestencryptionhandler
       { 0x8e39261e, "Requestfirebasesmshandler" }, // auth.requestfirebasesmshandler
       { 0xc9e01e7b, "Requestmainwebviewhandler" }, // messages.requestmainwebviewhandler
       { 0xd897bc66, "Requestpasswordrecoveryhandler" }, // auth.requestpasswordrecoveryhandler
       { 0x413a3e73, "Requestsimplewebviewhandler" }, // messages.requestsimplewebviewhandler
       { 0x198fb446, "Requesturlauthhandler" }, // messages.requesturlauthhandler
       { 0x269dc2c1, "Requestwebviewhandler" }, // messages.requestwebviewhandler
       { 0xcae47523, "Resendcodehandler" }, // auth.resendcodehandler
       { 0x7a7f2a15, "Resendpasswordemailhandler" }, // account.resendpasswordemailhandler
       { 0xdf77f3bc, "Resetauthorizationhandler" }, // account.resetauthorizationhandler
       { 0x9fab0d1a, "Resetauthorizationshandler" }, // auth.resetauthorizationshandler
       { 0x7e960193, "Resetloginemailhandler" }, // auth.resetloginemailhandler
       { 0xdb7e1747, "Resetnotifysettingshandler" }, // account.resetnotifysettingshandler
       { 0x9308ce1b, "Resetpasswordhandler" }, // account.resetpasswordhandler
       { 0x879537f1, "Resetsavedhandler" }, // contacts.resetsavedhandler
       { 0x1ae373ac, "Resettoppeerratinghandler" }, // contacts.resettoppeerratinghandler
       { 0xbb3b9804, "Resetwallpapershandler" }, // account.resetwallpapershandler
       { 0x2d01b9ef, "Resetwebauthorizationhandler" }, // account.resetwebauthorizationhandler
       { 0x682d2594, "Resetwebauthorizationshandler" }, // account.resetwebauthorizationshandler
       { 0x5492e5ee, "Resolvebusinesschatlinkhandler" }, // account.resolvebusinesschatlinkhandler
       { 0x8af94344, "Resolvephonehandler" }, // contacts.resolvephonehandler
       { 0x9ae91519, "Restrictsponsoredmessageshandler" }, // channels.restrictsponsoredmessageshandler
       { 0x6f02f748, "Saveapploghandler" }, // help.saveapploghandler
       { 0x76f36233, "Saveautodownloadsettingshandler" }, // account.saveautodownloadsettingshandler
       { 0xd69b8361, "Saveautosavesettingshandler" }, // account.saveautosavesettingshandler
       { 0x277add7e, "Savecalldebughandler" }, // phone.savecalldebughandler
       { 0x41248786, "Savecallloghandler" }, // phone.savecallloghandler
       { 0x575e1f8c, "Savedefaultgroupcalljoinashandler" }, // phone.savedefaultgroupcalljoinashandler
       { 0xccfddf96, "Savedefaultsendashandler" }, // messages.savedefaultsendashandler
       { 0xd372c5ce, "Savedrafthandler" }, // messages.savedrafthandler
       { 0x327a30cb, "Savegifhandler" }, // messages.savegifhandler
       { 0x392718f8, "Saverecentstickerhandler" }, // messages.saverecentstickerhandler
       { 0x3dea5b03, "Saveringtonehandler" }, // account.saveringtonehandler
       { 0x899fe31d, "Savesecurevaluehandler" }, // account.savesecurevaluehandler
       { 0x87acf08e, "Savestargifthandler" }, // payments.savestargifthandler
       { 0xf257106c, "Savethemehandler" }, // account.savethemehandler
       { 0x6c5a5b37, "Savewallpaperhandler" }, // account.savewallpaperhandler
       { 0x11f812d8, "Searchhandler" }, // contacts.searchhandler
       { 0x29ee847a, "Searchhandler" }, // messages.searchhandler
       { 0x2c11c0d7, "Searchcustomemojihandler" }, // messages.searchcustomemojihandler
       { 0x92b4494c, "Searchemojistickersetshandler" }, // messages.searchemojistickersetshandler
       { 0x4bc6589a, "Searchglobalhandler" }, // messages.searchglobalhandler
       { 0xd19f987b, "Searchpostshandler" }, // channels.searchpostshandler
       { 0xd1810907, "Searchpostshandler" }, // stories.searchpostshandler
       { 0x107e31a0, "Searchsentmediahandler" }, // messages.searchsentmediahandler
       { 0x29b1c66a, "Searchstickershandler" }, // messages.searchstickershandler
       { 0x35705b8a, "Searchstickersetshandler" }, // messages.searchstickersetshandler
       { 0x91b2d060, "Sendbotrequestedpeerhandler" }, // messages.sendbotrequestedpeerhandler
       { 0x82574ae5, "Sendchangephonecodehandler" }, // account.sendchangephonecodehandler
       { 0xa677244f, "Sendcodehandler" }, // auth.sendcodehandler
       { 0x1b3faa88, "Sendconfirmphonecodehandler" }, // account.sendconfirmphonecodehandler
       { 0x44fa7a15, "Sendencryptedhandler" }, // messages.sendencryptedhandler
       { 0x5559481d, "Sendencryptedfilehandler" }, // messages.sendencryptedfilehandler
       { 0x32d439a4, "Sendencryptedservicehandler" }, // messages.sendencryptedservicehandler
       { 0x3ebee86a, "Sendinlinebotresulthandler" }, // messages.sendinlinebotresulthandler
       { 0x9dd6a67b, "Sendpaidreactionhandler" }, // messages.sendpaidreactionhandler
       { 0x2d03522f, "Sendpaymentformhandler" }, // payments.sendpaymentformhandler
       { 0x6c750de1, "Sendquickreplymessageshandler" }, // messages.sendquickreplymessageshandler
       { 0xd30d78d4, "Sendreactionhandler" }, // messages.sendreactionhandler
       { 0x7fd736b2, "Sendreactionhandler" }, // stories.sendreactionhandler
       { 0xbd38850a, "Sendscheduledmessageshandler" }, // messages.sendscheduledmessageshandler
       { 0xa1405817, "Sendscreenshotnotificationhandler" }, // messages.sendscreenshotnotificationhandler
       { 0xff7a9383, "Sendsignalingdatahandler" }, // phone.sendsignalingdatahandler
       { 0x7998c914, "Sendstarsformhandler" }, // payments.sendstarsformhandler
       { 0xe4e6694b, "Sendstoryhandler" }, // stories.sendstoryhandler
       { 0x98e037bb, "Sendverifyemailcodehandler" }, // account.sendverifyemailcodehandler
       { 0xa5a356f9, "Sendverifyphonecodehandler" }, // account.sendverifyphonecodehandler
       { 0x10ea6184, "Sendvotehandler" }, // messages.sendvotehandler
       { 0xdc0242c8, "Sendwebviewdatahandler" }, // messages.sendwebviewdatahandler
       { 0x2442485e, "Setaccountttlhandler" }, // account.setaccountttlhandler
       { 0xbf899aa0, "Setauthorizationttlhandler" }, // account.setauthorizationttlhandler
       { 0x94c65c76, "Setblockedhandler" }, // contacts.setblockedhandler
       { 0xad399cee, "Setbooststounblockrestrictionshandler" }, // channels.setbooststounblockrestrictionshandler
       { 0x59ead627, "Setcallratinghandler" }, // phone.setcallratinghandler
       { 0x864b2581, "Setchatavailablereactionshandler" }, // messages.setchatavailablereactionshandler
       { 0xe63be13f, "Setchatthemehandler" }, // messages.setchatthemehandler
       { 0x8ffacae1, "Setchatwallpaperhandler" }, // messages.setchatwallpaperhandler
       { 0xcff43f61, "Setcontactsignupnotificationhandler" }, // account.setcontactsignupnotificationhandler
       { 0xb574b16b, "Setcontentsettingshandler" }, // account.setcontentsettingshandler
       { 0x9eb51445, "Setdefaulthistoryttlhandler" }, // messages.setdefaulthistoryttlhandler
       { 0x4f47a016, "Setdefaultreactionhandler" }, // messages.setdefaultreactionhandler
       { 0x40582bb2, "Setdiscussiongrouphandler" }, // channels.setdiscussiongrouphandler
       { 0x3cd930b7, "Setemojistickershandler" }, // channels.setemojistickershandler
       { 0x791451ed, "Setencryptedtypinghandler" }, // messages.setencryptedtypinghandler
       { 0x1edaaac2, "Setglobalprivacysettingshandler" }, // account.setglobalprivacysettingshandler
       { 0xb80e5fe4, "Sethistoryttlhandler" }, // messages.sethistoryttlhandler
       { 0xc9f81ce8, "Setprivacyhandler" }, // account.setprivacyhandler
       { 0x316ce548, "Setreactionsnotifysettingshandler" }, // account.setreactionsnotifysettingshandler
       { 0x8d52a951, "Signinhandler" }, // auth.signinhandler
       { 0xaac7b717, "Signuphandler" }, // auth.signuphandler
       { 0xe6df7378, "Startbothandler" }, // messages.startbothandler
       { 0xb43df344, "Starthistoryimporthandler" }, // messages.starthistoryimporthandler
       { 0x5680e342, "Startscheduledgroupcallhandler" }, // phone.startscheduledgroupcallhandler
       { 0x4dafc503, "Suggestshortnamehandler" }, // stickers.suggestshortnamehandler
       { 0x7c2557c4, "Toggleallstorieshiddenhandler" }, // stories.toggleallstorieshiddenhandler
       { 0x68f3e4eb, "Toggleantispamhandler" }, // channels.toggleantispamhandler
       { 0x69f59d69, "Togglebotinattachmenuhandler" }, // messages.togglebotinattachmenuhandler
       { 0x646e1097, "Toggleconnectedbotpausedhandler" }, // account.toggleconnectedbotpausedhandler
       { 0xfd2dda49, "Toggledialogfiltertagshandler" }, // messages.toggledialogfiltertagshandler
       { 0xa731e257, "Toggledialogpinhandler" }, // messages.toggledialogpinhandler
       { 0xa4298b29, "Toggleforumhandler" }, // channels.toggleforumhandler
       { 0xf128c708, "Togglegroupcallrecordhandler" }, // phone.togglegroupcallrecordhandler
       { 0x74bbb43d, "Togglegroupcallsettingshandler" }, // phone.togglegroupcallsettingshandler
       { 0x219c34e6, "Togglegroupcallstartsubscriptionhandler" }, // phone.togglegroupcallstartsubscriptionhandler
       { 0x4c2985b6, "Togglejoinrequesthandler" }, // channels.togglejoinrequesthandler
       { 0xe4cb9580, "Togglejointosendhandler" }, // channels.togglejointosendhandler
       { 0xb11eafa2, "Togglenoforwardshandler" }, // messages.togglenoforwardshandler
       { 0x849ad397, "Togglepaidreactionprivacyhandler" }, // messages.togglepaidreactionprivacyhandler
       { 0x6a6e7854, "Toggleparticipantshiddenhandler" }, // channels.toggleparticipantshiddenhandler
       { 0xbd0415c4, "Togglepeerstorieshiddenhandler" }, // stories.togglepeerstorieshiddenhandler
       { 0xe47cb579, "Togglepeertranslationshandler" }, // messages.togglepeertranslationshandler
       { 0x9a75a1ef, "Togglepinnedhandler" }, // stories.togglepinnedhandler
       { 0xb297e9b, "Togglepinnedtotophandler" }, // stories.togglepinnedtotophandler
       { 0xeabbb94c, "Toggleprehistoryhiddenhandler" }, // channels.toggleprehistoryhiddenhandler
       { 0xac81bbde, "Togglesaveddialogpinhandler" }, // messages.togglesaveddialogpinhandler
       { 0x418d549c, "Togglesignatureshandler" }, // channels.togglesignatureshandler
       { 0xedd49ef0, "Toggleslowmodehandler" }, // channels.toggleslowmodehandler
       { 0xb9d9a38d, "Togglesponsoredmessageshandler" }, // account.togglesponsoredmessageshandler
       { 0xb5052fea, "Togglestickersetshandler" }, // messages.togglestickersetshandler
       { 0x8514bdda, "Toggletoppeershandler" }, // contacts.toggletoppeershandler
       { 0x6de6392, "Toggleuseremojistatuspermissionhandler" }, // bots.toggleuseremojistatuspermissionhandler
       { 0x58d6b376, "Toggleusernamehandler" }, // account.toggleusernamehandler
       { 0x53ca973, "Toggleusernamehandler" }, // bots.toggleusernamehandler
       { 0x50f24105, "Toggleusernamehandler" }, // channels.toggleusernamehandler
       { 0x9738bb15, "Toggleviewforumasmessageshandler" }, // channels.toggleviewforumasmessageshandler
       { 0x269e9a49, "Transcribeaudiohandler" }, // messages.transcribeaudiohandler
       { 0x63183030, "Translatetexthandler" }, // messages.translatetexthandler
       { 0xb550d328, "Unblockhandler" }, // contacts.unblockhandler
       { 0xf96e55de, "Uninstallstickersethandler" }, // messages.uninstallstickersethandler
       { 0x6a0d3206, "Unregisterdevicehandler" }, // account.unregisterdevicehandler
       { 0xcc6e0c11, "Updatebirthdayhandler" }, // account.updatebirthdayhandler
       { 0xa26a7fa5, "Updatebusinessawaymessagehandler" }, // account.updatebusinessawaymessagehandler
       { 0x66cdafc4, "Updatebusinessgreetingmessagehandler" }, // account.updatebusinessgreetingmessagehandler
       { 0xa614d034, "Updatebusinessintrohandler" }, // account.updatebusinessintrohandler
       { 0x9e6b131a, "Updatebusinesslocationhandler" }, // account.updatebusinesslocationhandler
       { 0x4b00e066, "Updatebusinessworkhourshandler" }, // account.updatebusinessworkhourshandler
       { 0x7cefa15d, "Updatecolorhandler" }, // account.updatecolorhandler
       { 0xd8aa3671, "Updatecolorhandler" }, // channels.updatecolorhandler
       { 0x43d8521d, "Updateconnectedbothandler" }, // account.updateconnectedbothandler
       { 0x38df3532, "Updatedevicelockedhandler" }, // account.updatedevicelockedhandler
       { 0x1ad4a04a, "Updatedialogfilterhandler" }, // messages.updatedialogfilterhandler
       { 0xc563c1e4, "Updatedialogfiltersorderhandler" }, // messages.updatedialogfiltersorderhandler
       { 0xfbd3de6b, "Updateemojistatushandler" }, // account.updateemojistatushandler
       { 0xf0d3e6a8, "Updateemojistatushandler" }, // channels.updateemojistatushandler
       { 0x84be5b93, "Updatenotifysettingshandler" }, // account.updatenotifysettingshandler
       { 0xa59b102f, "Updatepasswordsettingshandler" }, // account.updatepasswordsettingshandler
       { 0xd94305e0, "Updatepersonalchannelhandler" }, // account.updatepersonalchannelhandler
       { 0x6c2d9026, "Updatepinnedforumtopichandler" }, // channels.updatepinnedforumtopichandler
       { 0x78515775, "Updateprofilehandler" }, // account.updateprofilehandler
       { 0x60297dec, "Updatesavedreactiontaghandler" }, // messages.updatesavedreactiontaghandler
       { 0x93fa0bf, "Updatesettingshandler" }, // smsjobs.updatesettingshandler
       { 0x778b5ab3, "Updatestarrefprogramhandler" }, // bots.updatestarrefprogramhandler
       { 0x6628562c, "Updatestatushandler" }, // account.updatestatushandler
       { 0x2bf40ccc, "Updatethemehandler" }, // account.updatethemehandler
       { 0x3e0bdd7c, "Updateusernamehandler" }, // account.updateusernamehandler
       { 0x3514b3de, "Updateusernamehandler" }, // channels.updateusernamehandler
       { 0xe14c4a71, "Uploadcontactprofilephotohandler" }, // photos.uploadcontactprofilephotohandler
       { 0x5057c497, "Uploadencryptedfilehandler" }, // messages.uploadencryptedfilehandler
       { 0x2a862092, "Uploadimportedmediahandler" }, // messages.uploadimportedmediahandler
       { 0x831a83a2, "Uploadringtonehandler" }, // account.uploadringtonehandler
       { 0x1c3db333, "Uploadthemehandler" }, // account.uploadthemehandler
       { 0xe39a8f03, "Uploadwallpaperhandler" }, // account.uploadwallpaperhandler
       { 0xb6c8f12b, "Validaterequestedinfohandler" }, // payments.validaterequestedinfohandler
       { 0x32da4cf, "Verifyemailhandler" }, // account.verifyemailhandler
       { 0x4dd3a7f6, "Verifyphonehandler" }, // account.verifyphonehandler
       { 0x673ad8f1, "Viewsponsoredmessagehandler" }, // messages.viewsponsoredmessagehandler
    }.ToFrozenDictionary();

    // Count: 23
    public static readonly FrozenDictionary<uint, string> BotOnlyHandlers = new Dictionary<uint, string>
    {
       { 0xe6213f4d, "Answerwebhookjsonqueryhandler" }, // bots.answerwebhookjsonqueryhandler
       { 0xe34c0dd6, "Getbotcommandshandler" }, // bots.getbotcommandshandler
       { 0x9c60eb28, "Getbotmenubuttonhandler" }, // bots.getbotmenubuttonhandler
       { 0xe822649d, "Getgamehighscoreshandler" }, // messages.getgamehighscoreshandler
       { 0xf635e1b, "Getinlinegamehighscoreshandler" }, // messages.getinlinegamehighscoreshandler
       { 0x25ae8f4a, "Refundstarschargehandler" }, // payments.refundstarschargehandler
       { 0x3d8de0f9, "Resetbotcommandshandler" }, // bots.resetbotcommandshandler
       { 0xf21f7f2f, "Savepreparedinlinemessagehandler" }, // messages.savepreparedinlinemessagehandler
       { 0xaa2769ed, "Sendcustomrequesthandler" }, // bots.sendcustomrequesthandler
       { 0xa4314f5, "Sendwebviewresultmessagehandler" }, // messages.sendwebviewresultmessagehandler
       { 0x788464e1, "Setbotbroadcastdefaultadminrightshandler" }, // bots.setbotbroadcastdefaultadminrightshandler
       { 0xd58f130a, "Setbotcallbackanswerhandler" }, // messages.setbotcallbackanswerhandler
       { 0x517165a, "Setbotcommandshandler" }, // bots.setbotcommandshandler
       { 0x925ec9ea, "Setbotgroupdefaultadminrightshandler" }, // bots.setbotgroupdefaultadminrightshandler
       { 0x4504d54f, "Setbotmenubuttonhandler" }, // bots.setbotmenubuttonhandler
       { 0x9c2dd95, "Setbotprecheckoutresultshandler" }, // messages.setbotprecheckoutresultshandler
       { 0xe5f672fa, "Setbotshippingresultshandler" }, // messages.setbotshippingresultshandler
       { 0xec22cfcd, "Setbotupdatesstatushandler" }, // help.setbotupdatesstatushandler
       { 0x8ef8ecc0, "Setgamescorehandler" }, // messages.setgamescorehandler
       { 0xbb12a419, "Setinlinebotresultshandler" }, // messages.setinlinebotresultshandler
       { 0x15ad9f64, "Setinlinegamescorehandler" }, // messages.setinlinegamescorehandler
       { 0x90c894b5, "Setsecurevalueerrorshandler" }, // users.setsecurevalueerrorshandler
       { 0xed9f30c5, "Updateuseremojistatushandler" }, // bots.updateuseremojistatushandler
    }.ToFrozenDictionary();
}
