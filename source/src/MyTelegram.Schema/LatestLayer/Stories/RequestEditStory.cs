// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Stories;

///<summary>
/// Edit an uploaded <a href="https://corefork.telegram.org/api/stories">story</a>
/// <para>Possible errors</para>
/// Code Type Description
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// 400 STORY_NOT_MODIFIED The new story information you passed is equal to the previous story information, thus it wasn't modified.
/// See <a href="https://corefork.telegram.org/method/stories.editStory" />
///</summary>
[TlObject(0xb583ba46)]
public sealed class RequestEditStory : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0xb583ba46;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Peer where the story was posted.
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// ID of story to edit.
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// If specified, replaces the story media.
    /// See <a href="https://corefork.telegram.org/type/InputMedia" />
    ///</summary>
    public MyTelegram.Schema.IInputMedia? Media { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/stories#media-areas">Media areas</a> associated to the story, see <a href="https://corefork.telegram.org/api/stories#media-areas">here »</a> for more info.
    ///</summary>
    public TVector<MyTelegram.Schema.IMediaArea>? MediaAreas { get; set; }

    ///<summary>
    /// If specified, replaces the story caption.
    ///</summary>
    public string? Caption { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/entities">Message entities for styled text in the caption</a>, if allowed by the <a href="https://corefork.telegram.org/api/config#stories-entities"><code>stories_entities</code> client configuration parameter »</a>.
    ///</summary>
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }

    ///<summary>
    /// If specified, alters the <a href="https://corefork.telegram.org/api/privacy">privacy settings »</a> of the story, changing who can or can't view the story.
    ///</summary>
    public TVector<MyTelegram.Schema.IInputPrivacyRule>? PrivacyRules { get; set; }

    public void ComputeFlag()
    {
        if (Media != null) { Flags[0] = true; }
        if (MediaAreas?.Count > 0) { Flags[3] = true; }
        if (Caption != null) { Flags[1] = true; }
        if (Entities?.Count > 0) { Flags[1] = true; }
        if (PrivacyRules?.Count > 0) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Peer);
        writer.Write(Id);
        if (Flags[0]) { writer.Write(Media); }
        if (Flags[3]) { writer.Write(MediaAreas); }
        if (Flags[1]) { writer.Write(Caption); }
        if (Flags[1]) { writer.Write(Entities); }
        if (Flags[2]) { writer.Write(PrivacyRules); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Peer = reader.Read<MyTelegram.Schema.IInputPeer>();
        Id = reader.ReadInt32();
        if (Flags[0]) { Media = reader.Read<MyTelegram.Schema.IInputMedia>(); }
        if (Flags[3]) { MediaAreas = reader.Read<TVector<MyTelegram.Schema.IMediaArea>>(); }
        if (Flags[1]) { Caption = reader.ReadString(); }
        if (Flags[1]) { Entities = reader.Read<TVector<MyTelegram.Schema.IMessageEntity>>(); }
        if (Flags[2]) { PrivacyRules = reader.Read<TVector<MyTelegram.Schema.IInputPrivacyRule>>(); }
    }
}
