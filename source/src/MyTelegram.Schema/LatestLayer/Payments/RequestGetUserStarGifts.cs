// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Payments;

///<summary>
/// Get the <a href="https://corefork.telegram.org/api/gifts">gifts »</a> pinned on a specific user's profile.May also be used to fetch all gifts received by the current user.
/// See <a href="https://corefork.telegram.org/method/payments.getUserStarGifts" />
///</summary>
[TlObject(0x5e72c7e1)]
public sealed class RequestGetUserStarGifts : IRequest<MyTelegram.Schema.Payments.IUserStarGifts>
{
    public uint ConstructorId => 0x5e72c7e1;
    ///<summary>
    /// Identifier of the user (can be the current user to fetch all gifts received by the current user).
    /// See <a href="https://corefork.telegram.org/type/InputUser" />
    ///</summary>
    public MyTelegram.Schema.IInputUser UserId { get; set; }

    ///<summary>
    /// Offset for <a href="https://corefork.telegram.org/api/offsets">pagination</a>, taken from <a href="https://corefork.telegram.org/constructor/payments.userStarGifts">payments.userStarGifts</a> (initially empty).
    ///</summary>
    public string Offset { get; set; }

    ///<summary>
    /// Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a>
    ///</summary>
    public int Limit { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(UserId);
        writer.Write(Offset);
        writer.Write(Limit);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        UserId = reader.Read<MyTelegram.Schema.IInputUser>();
        Offset = reader.ReadString();
        Limit = reader.ReadInt32();
    }
}
