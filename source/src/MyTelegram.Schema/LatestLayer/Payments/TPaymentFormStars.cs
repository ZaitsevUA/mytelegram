// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Payments;

///<summary>
/// Represents a payment form, for payments to be using <a href="https://corefork.telegram.org/api/stars">Telegram Stars, see here »</a> for more info.
/// See <a href="https://corefork.telegram.org/constructor/payments.paymentFormStars" />
///</summary>
[TlObject(0x7bf6b15c)]
public sealed class TPaymentFormStars : IPaymentForm
{
    public uint ConstructorId => 0x7bf6b15c;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Form ID.
    ///</summary>
    public long FormId { get; set; }

    ///<summary>
    /// Bot ID.
    ///</summary>
    public long BotId { get; set; }

    ///<summary>
    /// Form title
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// Description
    ///</summary>
    public string Description { get; set; }

    ///<summary>
    /// Product photo
    /// See <a href="https://corefork.telegram.org/type/WebDocument" />
    ///</summary>
    public MyTelegram.Schema.IWebDocument? Photo { get; set; }

    ///<summary>
    /// Invoice
    /// See <a href="https://corefork.telegram.org/type/Invoice" />
    ///</summary>
    public MyTelegram.Schema.IInvoice Invoice { get; set; }

    ///<summary>
    /// Info about users mentioned in the other fields.
    ///</summary>
    public TVector<MyTelegram.Schema.IUser> Users { get; set; }

    public void ComputeFlag()
    {
        if (Photo != null) { Flags[5] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(FormId);
        writer.Write(BotId);
        writer.Write(Title);
        writer.Write(Description);
        if (Flags[5]) { writer.Write(Photo); }
        writer.Write(Invoice);
        writer.Write(Users);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        FormId = reader.ReadInt64();
        BotId = reader.ReadInt64();
        Title = reader.ReadString();
        Description = reader.ReadString();
        if (Flags[5]) { Photo = reader.Read<MyTelegram.Schema.IWebDocument>(); }
        Invoice = reader.Read<MyTelegram.Schema.IInvoice>();
        Users = reader.Read<TVector<MyTelegram.Schema.IUser>>();
    }
}