// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Payments;

///<summary>
/// Info about the current <a href="https://corefork.telegram.org/api/stars#balance-and-transaction-history">Telegram Star subscriptions, balance and transaction history »</a>.
/// See <a href="https://corefork.telegram.org/constructor/payments.starsStatus" />
///</summary>
[TlObject(0x6c9ce8ed)]
public sealed class TStarsStatus : IStarsStatus
{
    public uint ConstructorId => 0x6c9ce8ed;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Current Telegram Star balance.
    /// See <a href="https://corefork.telegram.org/type/StarsAmount" />
    ///</summary>
    public MyTelegram.Schema.IStarsAmount Balance { get; set; }

    ///<summary>
    /// Info about current Telegram Star subscriptions, only returned when invoking <a href="https://corefork.telegram.org/method/payments.getStarsTransactions">payments.getStarsTransactions</a> and <a href="https://corefork.telegram.org/method/payments.getStarsSubscriptions">payments.getStarsSubscriptions</a>.
    ///</summary>
    public TVector<MyTelegram.Schema.IStarsSubscription>? Subscriptions { get; set; }

    ///<summary>
    /// Offset for pagination of subscriptions: only usable and returned when invoking <a href="https://corefork.telegram.org/method/payments.getStarsSubscriptions">payments.getStarsSubscriptions</a>.
    ///</summary>
    public string? SubscriptionsNextOffset { get; set; }

    ///<summary>
    /// The number of Telegram Stars the user should buy to be able to extend expired subscriptions soon (i.e. the current balance is not enough to extend all expired subscriptions).
    ///</summary>
    public long? SubscriptionsMissingBalance { get; set; }

    ///<summary>
    /// List of Telegram Star transactions (partial if <code>next_offset</code> is set).
    ///</summary>
    public TVector<MyTelegram.Schema.IStarsTransaction>? History { get; set; }

    ///<summary>
    /// Offset to use to fetch more transactions from the transaction history using <a href="https://corefork.telegram.org/method/payments.getStarsTransactions">payments.getStarsTransactions</a>.
    ///</summary>
    public string? NextOffset { get; set; }

    ///<summary>
    /// Chats mentioned in <code>history</code>.
    ///</summary>
    public TVector<MyTelegram.Schema.IChat> Chats { get; set; }

    ///<summary>
    /// Users mentioned in <code>history</code>.
    ///</summary>
    public TVector<MyTelegram.Schema.IUser> Users { get; set; }

    public void ComputeFlag()
    {
        if (Subscriptions?.Count > 0) { Flags[1] = true; }
        if (SubscriptionsNextOffset != null) { Flags[2] = true; }
        if (/*SubscriptionsMissingBalance != 0 &&*/ SubscriptionsMissingBalance.HasValue) { Flags[4] = true; }
        if (History?.Count > 0) { Flags[3] = true; }
        if (NextOffset != null) { Flags[0] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Balance);
        if (Flags[1]) { writer.Write(Subscriptions); }
        if (Flags[2]) { writer.Write(SubscriptionsNextOffset); }
        if (Flags[4]) { writer.Write(SubscriptionsMissingBalance.Value); }
        if (Flags[3]) { writer.Write(History); }
        if (Flags[0]) { writer.Write(NextOffset); }
        writer.Write(Chats);
        writer.Write(Users);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Balance = reader.Read<MyTelegram.Schema.IStarsAmount>();
        if (Flags[1]) { Subscriptions = reader.Read<TVector<MyTelegram.Schema.IStarsSubscription>>(); }
        if (Flags[2]) { SubscriptionsNextOffset = reader.ReadString(); }
        if (Flags[4]) { SubscriptionsMissingBalance = reader.ReadInt64(); }
        if (Flags[3]) { History = reader.Read<TVector<MyTelegram.Schema.IStarsTransaction>>(); }
        if (Flags[0]) { NextOffset = reader.ReadString(); }
        Chats = reader.Read<TVector<MyTelegram.Schema.IChat>>();
        Users = reader.Read<TVector<MyTelegram.Schema.IUser>>();
    }
}