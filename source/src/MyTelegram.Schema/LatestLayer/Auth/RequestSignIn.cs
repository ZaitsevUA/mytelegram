// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Auth;

///<summary>
/// Signs in a user with a validated phone number.
/// <para>Possible errors</para>
/// Code Type Description
/// 500 AUTH_RESTART Restart the authorization process.
/// 400 PHONE_CODE_EMPTY phone_code is missing.
/// 400 PHONE_CODE_EXPIRED The phone code you provided has expired.
/// 400 PHONE_CODE_INVALID The provided phone code is invalid.
/// 406 PHONE_NUMBER_INVALID The phone number is invalid.
/// 400 PHONE_NUMBER_UNOCCUPIED The phone number is not yet being used.
/// 500 SIGN_IN_FAILED Failure while signing in.
/// 406 UPDATE_APP_TO_LOGIN Please update your client to login.
/// See <a href="https://corefork.telegram.org/method/auth.signIn" />
///</summary>
[TlObject(0x8d52a951)]
public sealed class RequestSignIn : IRequest<MyTelegram.Schema.Auth.IAuthorization>
{
    public uint ConstructorId => 0x8d52a951;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Phone number in the international format
    ///</summary>
    public string PhoneNumber { get; set; }

    ///<summary>
    /// SMS-message ID, obtained from <a href="https://corefork.telegram.org/method/auth.sendCode">auth.sendCode</a>
    ///</summary>
    public string PhoneCodeHash { get; set; }

    ///<summary>
    /// Valid numerical code from the SMS-message
    ///</summary>
    public string? PhoneCode { get; set; }

    ///<summary>
    /// Email verification code or token
    /// See <a href="https://corefork.telegram.org/type/EmailVerification" />
    ///</summary>
    public MyTelegram.Schema.IEmailVerification? EmailVerification { get; set; }

    public void ComputeFlag()
    {
        if (PhoneCode != null) { Flags[0] = true; }
        if (EmailVerification != null) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(PhoneNumber);
        writer.Write(PhoneCodeHash);
        if (Flags[0]) { writer.Write(PhoneCode); }
        if (Flags[1]) { writer.Write(EmailVerification); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        PhoneNumber = reader.ReadString();
        PhoneCodeHash = reader.ReadString();
        if (Flags[0]) { PhoneCode = reader.ReadString(); }
        if (Flags[1]) { EmailVerification = reader.Read<MyTelegram.Schema.IEmailVerification>(); }
    }
}
