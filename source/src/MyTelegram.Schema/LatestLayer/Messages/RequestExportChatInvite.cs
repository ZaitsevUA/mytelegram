// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Export an invite link for a chat
/// <para>Possible errors</para>
/// Code Type Description
/// 400 CHANNEL_INVALID The provided channel is invalid.
/// 400 CHANNEL_PRIVATE You haven't joined this channel/supergroup.
/// 400 CHAT_ADMIN_REQUIRED You must be an admin in this chat to do this.
/// 400 CHAT_ID_INVALID The provided chat id is invalid.
/// 403 CHAT_WRITE_FORBIDDEN You can't write in this chat.
/// 400 EXPIRE_DATE_INVALID The specified expiration date is invalid.
/// 400 MSG_ID_INVALID Invalid message ID provided.
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// 400 USAGE_LIMIT_INVALID The specified usage limit is invalid.
/// See <a href="https://corefork.telegram.org/method/messages.exportChatInvite" />
///</summary>
[TlObject(0xa455de90)]
public sealed class RequestExportChatInvite : IRequest<MyTelegram.Schema.IExportedChatInvite>
{
    public uint ConstructorId => 0xa455de90;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Legacy flag, reproducing legacy behavior of this method: if set, revokes all previous links before creating a new one. Kept for bot API BC, should not be used by modern clients.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool LegacyRevokePermanent { get; set; }

    ///<summary>
    /// Whether admin confirmation is required before admitting each separate user into the chat
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool RequestNeeded { get; set; }

    ///<summary>
    /// Chat
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// Expiration date
    ///</summary>
    public int? ExpireDate { get; set; }

    ///<summary>
    /// Maximum number of users that can join using this link
    ///</summary>
    public int? UsageLimit { get; set; }

    ///<summary>
    /// Description of the invite link, visible only to administrators
    ///</summary>
    public string? Title { get; set; }

    ///<summary>
    /// For <a href="https://corefork.telegram.org/api/stars#star-subscriptions">Telegram Star subscriptions »</a>, contains the pricing of the subscription the user must activate to join the private channel.
    /// See <a href="https://corefork.telegram.org/type/StarsSubscriptionPricing" />
    ///</summary>
    public MyTelegram.Schema.IStarsSubscriptionPricing? SubscriptionPricing { get; set; }

    public void ComputeFlag()
    {
        if (LegacyRevokePermanent) { Flags[2] = true; }
        if (RequestNeeded) { Flags[3] = true; }
        if (/*ExpireDate != 0 && */ExpireDate.HasValue) { Flags[0] = true; }
        if (/*UsageLimit != 0 && */UsageLimit.HasValue) { Flags[1] = true; }
        if (Title != null) { Flags[4] = true; }
        if (SubscriptionPricing != null) { Flags[5] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Peer);
        if (Flags[0]) { writer.Write(ExpireDate.Value); }
        if (Flags[1]) { writer.Write(UsageLimit.Value); }
        if (Flags[4]) { writer.Write(Title); }
        if (Flags[5]) { writer.Write(SubscriptionPricing); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[2]) { LegacyRevokePermanent = true; }
        if (Flags[3]) { RequestNeeded = true; }
        Peer = reader.Read<MyTelegram.Schema.IInputPeer>();
        if (Flags[0]) { ExpireDate = reader.ReadInt32(); }
        if (Flags[1]) { UsageLimit = reader.ReadInt32(); }
        if (Flags[4]) { Title = reader.ReadString(); }
        if (Flags[5]) { SubscriptionPricing = reader.Read<MyTelegram.Schema.IStarsSubscriptionPricing>(); }
    }
}
