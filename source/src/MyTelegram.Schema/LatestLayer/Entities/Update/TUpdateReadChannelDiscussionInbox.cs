// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Incoming comments in a <a href="https://corefork.telegram.org/api/threads">discussion thread</a> were marked as read
/// See <a href="https://corefork.telegram.org/constructor/updateReadChannelDiscussionInbox" />
///</summary>
[TlObject(0xd6b19546)]
public sealed class TUpdateReadChannelDiscussionInbox : IUpdate
{
    public uint ConstructorId => 0xd6b19546;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/channel">Discussion group ID</a>
    ///</summary>
    public long ChannelId { get; set; }

    ///<summary>
    /// ID of the group message that started the <a href="https://corefork.telegram.org/api/threads">thread</a> (message in linked discussion group)
    ///</summary>
    public int TopMsgId { get; set; }

    ///<summary>
    /// Message ID of latest read incoming message for this <a href="https://corefork.telegram.org/api/threads">thread</a>
    ///</summary>
    public int ReadMaxId { get; set; }

    ///<summary>
    /// If set, contains the ID of the <a href="https://corefork.telegram.org/api/channel">channel</a> that contains the post that started the <a href="https://corefork.telegram.org/api/threads">comment thread</a> in the discussion group (<code>channel_id</code>)
    ///</summary>
    public long? BroadcastId { get; set; }

    ///<summary>
    /// If set, contains the ID of the channel post that started the <a href="https://corefork.telegram.org/api/threads">comment thread</a>
    ///</summary>
    public int? BroadcastPost { get; set; }

    public void ComputeFlag()
    {
        if (/*BroadcastId != 0 &&*/ BroadcastId.HasValue) { Flags[0] = true; }
        if (/*BroadcastPost != 0 && */BroadcastPost.HasValue) { Flags[0] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ChannelId);
        writer.Write(TopMsgId);
        writer.Write(ReadMaxId);
        if (Flags[0]) { writer.Write(BroadcastId.Value); }
        if (Flags[0]) { writer.Write(BroadcastPost.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        ChannelId = reader.ReadInt64();
        TopMsgId = reader.ReadInt32();
        ReadMaxId = reader.ReadInt32();
        if (Flags[0]) { BroadcastId = reader.ReadInt64(); }
        if (Flags[0]) { BroadcastPost = reader.ReadInt32(); }
    }
}