// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// A participant has left, joined, was banned or admined in a <a href="https://corefork.telegram.org/api/channel">channel or supergroup</a>.
/// See <a href="https://corefork.telegram.org/constructor/updateChannelParticipant" />
///</summary>
[TlObject(0x985d3abb)]
public sealed class TUpdateChannelParticipant : IUpdate
{
    public uint ConstructorId => 0x985d3abb;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the participant joined using a <a href="https://corefork.telegram.org/api/links#chat-folder-links">chat folder deep link »</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ViaChatlist { get; set; }

    ///<summary>
    /// Channel ID
    ///</summary>
    public long ChannelId { get; set; }

    ///<summary>
    /// Date of the event
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// User that triggered the change (inviter, admin that kicked the user, or the even the <strong>user_id</strong> itself)
    ///</summary>
    public long ActorId { get; set; }

    ///<summary>
    /// User that was affected by the change
    ///</summary>
    public long UserId { get; set; }

    ///<summary>
    /// Previous participant status
    /// See <a href="https://corefork.telegram.org/type/ChannelParticipant" />
    ///</summary>
    public MyTelegram.Schema.IChannelParticipant? PrevParticipant { get; set; }

    ///<summary>
    /// New participant status
    /// See <a href="https://corefork.telegram.org/type/ChannelParticipant" />
    ///</summary>
    public MyTelegram.Schema.IChannelParticipant? NewParticipant { get; set; }

    ///<summary>
    /// Chat invite used to join the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>
    /// See <a href="https://corefork.telegram.org/type/ExportedChatInvite" />
    ///</summary>
    public MyTelegram.Schema.IExportedChatInvite? Invite { get; set; }

    ///<summary>
    /// New <strong>qts</strong> value, see <a href="https://corefork.telegram.org/api/updates">updates »</a> for more info.
    ///</summary>
    public int Qts { get; set; }

    public void ComputeFlag()
    {
        if (ViaChatlist) { Flags[3] = true; }
        if (PrevParticipant != null) { Flags[0] = true; }
        if (NewParticipant != null) { Flags[1] = true; }
        if (Invite != null) { Flags[2] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ChannelId);
        writer.Write(Date);
        writer.Write(ActorId);
        writer.Write(UserId);
        if (Flags[0]) { writer.Write(PrevParticipant); }
        if (Flags[1]) { writer.Write(NewParticipant); }
        if (Flags[2]) { writer.Write(Invite); }
        writer.Write(Qts);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[3]) { ViaChatlist = true; }
        ChannelId = reader.ReadInt64();
        Date = reader.ReadInt32();
        ActorId = reader.ReadInt64();
        UserId = reader.ReadInt64();
        if (Flags[0]) { PrevParticipant = reader.Read<MyTelegram.Schema.IChannelParticipant>(); }
        if (Flags[1]) { NewParticipant = reader.Read<MyTelegram.Schema.IChannelParticipant>(); }
        if (Flags[2]) { Invite = reader.Read<MyTelegram.Schema.IExportedChatInvite>(); }
        Qts = reader.ReadInt32();
    }
}