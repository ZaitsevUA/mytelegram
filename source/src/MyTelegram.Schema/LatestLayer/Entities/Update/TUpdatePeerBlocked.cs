// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// We blocked a peer, see <a href="https://corefork.telegram.org/api/block">here »</a> for more info on blocklists.
/// See <a href="https://corefork.telegram.org/constructor/updatePeerBlocked" />
///</summary>
[TlObject(0xebe07752)]
public sealed class TUpdatePeerBlocked : IUpdate
{
    public uint ConstructorId => 0xebe07752;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the peer was blocked or unblocked
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Blocked { get; set; }

    ///<summary>
    /// Whether the peer was added/removed to/from the story blocklist; if not set, this update affects the main blocklist, see <a href="https://corefork.telegram.org/api/block">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BlockedMyStoriesFrom { get; set; }

    ///<summary>
    /// The (un)blocked peer
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer PeerId { get; set; }

    public void ComputeFlag()
    {
        if (Blocked) { Flags[0] = true; }
        if (BlockedMyStoriesFrom) { Flags[1] = true; }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(PeerId);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Blocked = true; }
        if (Flags[1]) { BlockedMyStoriesFrom = true; }
        PeerId = reader.Read<MyTelegram.Schema.IPeer>();
    }
}