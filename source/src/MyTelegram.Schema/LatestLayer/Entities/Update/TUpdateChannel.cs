// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Channel/supergroup (<a href="https://corefork.telegram.org/constructor/channel">channel</a> and/or <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a>) information was updated.This update can only be received through getDifference or in <a href="https://corefork.telegram.org/constructor/updates">updates</a>/<a href="https://corefork.telegram.org/constructor/updatesCombined">updatesCombined</a> constructors, so it will <strong>always</strong> come bundled with the updated <a href="https://corefork.telegram.org/constructor/channel">channel</a>, that should be applied <a href="https://corefork.telegram.org/api/peers">as usual »</a>, <strong>without</strong> re-fetching the info manually.However, full peer information will not come bundled in updates, so the full peer cache (<a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a>) must be invalidated for <code>channel_id</code> when receiving this update.
/// See <a href="https://corefork.telegram.org/constructor/updateChannel" />
///</summary>
[TlObject(0x635b4c09)]
public sealed class TUpdateChannel : IUpdate
{
    public uint ConstructorId => 0x635b4c09;
    ///<summary>
    /// Channel ID
    ///</summary>
    public long ChannelId { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(ChannelId);
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        ChannelId = reader.ReadInt64();
    }
}