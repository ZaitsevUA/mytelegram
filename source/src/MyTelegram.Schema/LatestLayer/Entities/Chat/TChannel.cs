// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Channel/supergroup infoWhen updating the <a href="https://corefork.telegram.org/api/peers">local peer database</a>, all fields from the newly received constructor take priority over the old constructor cached locally (including by removing fields that aren't set in the new constructor).The only exception to the above rule is when the <code>min</code> flag is set, in which case <strong>only</strong> the following fields must be applied over any locally stored version:See <a href="https://github.com/tdlib/td/blob/a24af0992245f838f2b4b418a0a2d5fa9caa27b5/td/telegram/ChatManager.cpp#L8329">here »</a> for an implementation of the logic to use when updating the <a href="https://corefork.telegram.org/api/peers">local user peer database</a>.
/// See <a href="https://corefork.telegram.org/constructor/channel" />
///</summary>
[TlObject(0xfe4478bd)]
public sealed class TChannel : MyTelegram.Schema.IChat, ILayeredChannel
{
    public uint ConstructorId => 0xfe4478bd;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the current user is the creator of this channel
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Creator { get; set; }

    ///<summary>
    /// Whether the current user has left or is not a member of this channel
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Left { get; set; }

    ///<summary>
    /// Is this a channel?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Broadcast { get; set; }

    ///<summary>
    /// Is this channel verified by telegram?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Verified { get; set; }

    ///<summary>
    /// Is this a supergroup? <br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Megagroup { get; set; }

    ///<summary>
    /// Whether viewing/writing in this channel for a reason (see <code>restriction_reason</code>)
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Restricted { get; set; }

    ///<summary>
    /// Whether signatures are enabled (channels)
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Signatures { get; set; }

    ///<summary>
    /// See <a href="https://corefork.telegram.org/api/min">min</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Min { get; set; }

    ///<summary>
    /// This channel/supergroup is probably a scam <br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Scam { get; set; }

    ///<summary>
    /// Whether this channel has a linked <a href="https://corefork.telegram.org/api/discussion">discussion group »</a> (or this supergroup is a channel's discussion group). The actual ID of the linked channel/supergroup is contained in <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a>.<code>linked_chat_id</code>. <br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasLink { get; set; }

    ///<summary>
    /// Whether this chanel has a geoposition
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasGeo { get; set; }

    ///<summary>
    /// Whether slow mode is enabled for groups to prevent flood in chat. <br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool SlowmodeEnabled { get; set; }

    ///<summary>
    /// Whether a group call or livestream is currently active
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CallActive { get; set; }

    ///<summary>
    /// Whether there's anyone in the group call or livestream
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CallNotEmpty { get; set; }

    ///<summary>
    /// If set, this <a href="https://corefork.telegram.org/api/channel">supergroup/channel</a> was reported by many users as a fake or scam: be careful when interacting with it. <br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Fake { get; set; }

    ///<summary>
    /// Whether this <a href="https://corefork.telegram.org/api/channel">supergroup</a> is a gigagroup<br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Gigagroup { get; set; }

    ///<summary>
    /// Whether this channel or group is <a href="https://telegram.org/blog/protected-content-delete-by-date-and-more">protected</a>, thus does not allow forwarding messages from it
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Noforwards { get; set; }

    ///<summary>
    /// Whether a user needs to join the supergroup before they can send messages: can be false only for <a href="https://corefork.telegram.org/api/discussion">discussion groups »</a>, toggle using <a href="https://corefork.telegram.org/method/channels.toggleJoinToSend">channels.toggleJoinToSend</a><br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool JoinToSend { get; set; }

    ///<summary>
    /// Whether a user's join request will have to be <a href="https://corefork.telegram.org/api/invites#join-requests">approved by administrators</a>, toggle using <a href="https://corefork.telegram.org/method/channels.toggleJoinRequest">channels.toggleJoinToSend</a><br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool JoinRequest { get; set; }

    ///<summary>
    /// Whether this supergroup is a <a href="https://corefork.telegram.org/api/forum">forum</a>. <br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Forum { get; set; }

    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags2 { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether we have <a href="https://corefork.telegram.org/api/stories#hiding-stories-of-other-users">hidden all stories posted by this channel »</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesHidden { get; set; }

    ///<summary>
    /// If set, indicates that the <code>stories_hidden</code> flag was not populated, and its value must cannot be relied on; use the previously cached value, or re-fetch the constructor using <a href="https://corefork.telegram.org/method/channels.getChannels">channels.getChannels</a> to obtain the latest value of the <code>stories_hidden</code> flag.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesHiddenMin { get; set; }

    ///<summary>
    /// No stories from the channel are visible.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesUnavailable { get; set; }

    ///<summary>
    /// If set, messages sent by admins to this channel will link to the admin's profile (just like with groups).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool SignatureProfiles { get; set; }

    ///<summary>
    /// ID of the channel, see <a href="https://corefork.telegram.org/api/peers#peer-id">here »</a> for more info
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Access hash, see <a href="https://corefork.telegram.org/api/peers#access-hash">here »</a> for more info
    ///</summary>
    public long? AccessHash { get; set; }

    ///<summary>
    /// Title
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// Main active username.
    ///</summary>
    public string? Username { get; set; }

    ///<summary>
    /// Profile photo
    /// See <a href="https://corefork.telegram.org/type/ChatPhoto" />
    ///</summary>
    public MyTelegram.Schema.IChatPhoto Photo { get; set; }

    ///<summary>
    /// Date when the user joined the supergroup/channel, or if the user isn't a member, its creation date
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// Contains the reason why access to this channel must be restricted. <br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    ///</summary>
    public TVector<MyTelegram.Schema.IRestrictionReason>? RestrictionReason { get; set; }

    ///<summary>
    /// Admin rights of the user in this channel (see <a href="https://corefork.telegram.org/api/rights">rights</a>)
    /// See <a href="https://corefork.telegram.org/type/ChatAdminRights" />
    ///</summary>
    public MyTelegram.Schema.IChatAdminRights? AdminRights { get; set; }

    ///<summary>
    /// Banned rights of the user in this channel (see <a href="https://corefork.telegram.org/api/rights">rights</a>)
    /// See <a href="https://corefork.telegram.org/type/ChatBannedRights" />
    ///</summary>
    public MyTelegram.Schema.IChatBannedRights? BannedRights { get; set; }

    ///<summary>
    /// Default chat rights (see <a href="https://corefork.telegram.org/api/rights">rights</a>)
    /// See <a href="https://corefork.telegram.org/type/ChatBannedRights" />
    ///</summary>
    public MyTelegram.Schema.IChatBannedRights? DefaultBannedRights { get; set; }

    ///<summary>
    /// Participant count
    ///</summary>
    public int? ParticipantsCount { get; set; }

    ///<summary>
    /// Additional usernames
    ///</summary>
    public TVector<MyTelegram.Schema.IUsername>? Usernames { get; set; }

    ///<summary>
    /// ID of the maximum read <a href="https://corefork.telegram.org/api/stories">story</a>.
    ///</summary>
    public int? StoriesMaxId { get; set; }

    ///<summary>
    /// The channel's <a href="https://corefork.telegram.org/api/colors">accent color</a>.
    /// See <a href="https://corefork.telegram.org/type/PeerColor" />
    ///</summary>
    public MyTelegram.Schema.IPeerColor? Color { get; set; }

    ///<summary>
    /// The channel's <a href="https://corefork.telegram.org/api/colors">profile color</a>.
    /// See <a href="https://corefork.telegram.org/type/PeerColor" />
    ///</summary>
    public MyTelegram.Schema.IPeerColor? ProfileColor { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/emoji-status">Emoji status</a>
    /// See <a href="https://corefork.telegram.org/type/EmojiStatus" />
    ///</summary>
    public MyTelegram.Schema.IEmojiStatus? EmojiStatus { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/boost">Boost level</a>. <br>Changes to this flag should invalidate the local <a href="https://corefork.telegram.org/constructor/channelFull">channelFull</a> cache for this channel/supergroup ID, see <a href="https://corefork.telegram.org/api/peers#full-info-database">here »</a> for more info.
    ///</summary>
    public int? Level { get; set; }

    ///<summary>
    /// Expiration date of the <a href="https://corefork.telegram.org/api/stars#star-subscriptions">Telegram Star subscription »</a> the current user has bought to gain access to this channel.
    ///</summary>
    public int? SubscriptionUntilDate { get; set; }

    public void ComputeFlag()
    {
        if (Creator) { Flags[0] = true; }
        if (Left) { Flags[2] = true; }
        if (Broadcast) { Flags[5] = true; }
        if (Verified) { Flags[7] = true; }
        if (Megagroup) { Flags[8] = true; }
        if (Restricted) { Flags[9] = true; }
        if (Signatures) { Flags[11] = true; }
        if (Min) { Flags[12] = true; }
        if (Scam) { Flags[19] = true; }
        if (HasLink) { Flags[20] = true; }
        if (HasGeo) { Flags[21] = true; }
        if (SlowmodeEnabled) { Flags[22] = true; }
        if (CallActive) { Flags[23] = true; }
        if (CallNotEmpty) { Flags[24] = true; }
        if (Fake) { Flags[25] = true; }
        if (Gigagroup) { Flags[26] = true; }
        if (Noforwards) { Flags[27] = true; }
        if (JoinToSend) { Flags[28] = true; }
        if (JoinRequest) { Flags[29] = true; }
        if (Forum) { Flags[30] = true; }
        if (StoriesHidden) { Flags2[1] = true; }
        if (StoriesHiddenMin) { Flags2[2] = true; }
        if (StoriesUnavailable) { Flags2[3] = true; }
        if (SignatureProfiles) { Flags2[12] = true; }
        if (/*AccessHash != 0 &&*/ AccessHash.HasValue) { Flags[13] = true; }
        if (Username != null) { Flags[6] = true; }
        if (RestrictionReason?.Count > 0) { Flags[9] = true; }
        if (AdminRights != null) { Flags[14] = true; }
        if (BannedRights != null) { Flags[15] = true; }
        if (DefaultBannedRights != null) { Flags[18] = true; }
        if (/*ParticipantsCount != 0 && */ParticipantsCount.HasValue) { Flags[17] = true; }
        if (Usernames?.Count > 0) { Flags2[0] = true; }
        if (/*StoriesMaxId != 0 && */StoriesMaxId.HasValue) { Flags2[4] = true; }
        if (Color != null) { Flags2[7] = true; }
        if (ProfileColor != null) { Flags2[8] = true; }
        if (EmojiStatus != null) { Flags2[9] = true; }
        if (/*Level != 0 && */Level.HasValue) { Flags2[10] = true; }
        if (/*SubscriptionUntilDate != 0 && */SubscriptionUntilDate.HasValue) { Flags2[11] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Flags2);
        writer.Write(Id);
        if (Flags[13]) { writer.Write(AccessHash.Value); }
        writer.Write(Title);
        if (Flags[6]) { writer.Write(Username); }
        writer.Write(Photo);
        writer.Write(Date);
        if (Flags[9]) { writer.Write(RestrictionReason); }
        if (Flags[14]) { writer.Write(AdminRights); }
        if (Flags[15]) { writer.Write(BannedRights); }
        if (Flags[18]) { writer.Write(DefaultBannedRights); }
        if (Flags[17]) { writer.Write(ParticipantsCount.Value); }
        if (Flags2[0]) { writer.Write(Usernames); }
        if (Flags2[4]) { writer.Write(StoriesMaxId.Value); }
        if (Flags2[7]) { writer.Write(Color); }
        if (Flags2[8]) { writer.Write(ProfileColor); }
        if (Flags2[9]) { writer.Write(EmojiStatus); }
        if (Flags2[10]) { writer.Write(Level.Value); }
        if (Flags2[11]) { writer.Write(SubscriptionUntilDate.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Creator = true; }
        if (Flags[2]) { Left = true; }
        if (Flags[5]) { Broadcast = true; }
        if (Flags[7]) { Verified = true; }
        if (Flags[8]) { Megagroup = true; }
        if (Flags[9]) { Restricted = true; }
        if (Flags[11]) { Signatures = true; }
        if (Flags[12]) { Min = true; }
        if (Flags[19]) { Scam = true; }
        if (Flags[20]) { HasLink = true; }
        if (Flags[21]) { HasGeo = true; }
        if (Flags[22]) { SlowmodeEnabled = true; }
        if (Flags[23]) { CallActive = true; }
        if (Flags[24]) { CallNotEmpty = true; }
        if (Flags[25]) { Fake = true; }
        if (Flags[26]) { Gigagroup = true; }
        if (Flags[27]) { Noforwards = true; }
        if (Flags[28]) { JoinToSend = true; }
        if (Flags[29]) { JoinRequest = true; }
        if (Flags[30]) { Forum = true; }
        Flags2 = reader.ReadBitArray();
        if (Flags2[1]) { StoriesHidden = true; }
        if (Flags2[2]) { StoriesHiddenMin = true; }
        if (Flags2[3]) { StoriesUnavailable = true; }
        if (Flags2[12]) { SignatureProfiles = true; }
        Id = reader.ReadInt64();
        if (Flags[13]) { AccessHash = reader.ReadInt64(); }
        Title = reader.ReadString();
        if (Flags[6]) { Username = reader.ReadString(); }
        Photo = reader.Read<MyTelegram.Schema.IChatPhoto>();
        Date = reader.ReadInt32();
        if (Flags[9]) { RestrictionReason = reader.Read<TVector<MyTelegram.Schema.IRestrictionReason>>(); }
        if (Flags[14]) { AdminRights = reader.Read<MyTelegram.Schema.IChatAdminRights>(); }
        if (Flags[15]) { BannedRights = reader.Read<MyTelegram.Schema.IChatBannedRights>(); }
        if (Flags[18]) { DefaultBannedRights = reader.Read<MyTelegram.Schema.IChatBannedRights>(); }
        if (Flags[17]) { ParticipantsCount = reader.ReadInt32(); }
        if (Flags2[0]) { Usernames = reader.Read<TVector<MyTelegram.Schema.IUsername>>(); }
        if (Flags2[4]) { StoriesMaxId = reader.ReadInt32(); }
        if (Flags2[7]) { Color = reader.Read<MyTelegram.Schema.IPeerColor>(); }
        if (Flags2[8]) { ProfileColor = reader.Read<MyTelegram.Schema.IPeerColor>(); }
        if (Flags2[9]) { EmojiStatus = reader.Read<MyTelegram.Schema.IEmojiStatus>(); }
        if (Flags2[10]) { Level = reader.ReadInt32(); }
        if (Flags2[11]) { SubscriptionUntilDate = reader.ReadInt32(); }
    }
}