// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// A <a href="https://corefork.telegram.org/api/forum#forum-topics">forum topic</a> was created.
/// See <a href="https://corefork.telegram.org/constructor/messageActionTopicCreate" />
///</summary>
[TlObject(0xd999256)]
public sealed class TMessageActionTopicCreate : IMessageAction
{
    public uint ConstructorId => 0xd999256;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Topic name.
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of <code>0x6FB9F0</code>, <code>0xFFD67E</code>, <code>0xCB86DB</code>, <code>0x8EEE98</code>, <code>0xFF93B2</code>, or <code>0xFB6F5F</code>.
    ///</summary>
    public int IconColor { get; set; }

    ///<summary>
    /// ID of the <a href="https://corefork.telegram.org/api/custom-emoji">custom emoji</a> used as topic icon.
    ///</summary>
    public long? IconEmojiId { get; set; }

    public void ComputeFlag()
    {
        if (/*IconEmojiId != 0 &&*/ IconEmojiId.HasValue) { Flags[0] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Title);
        writer.Write(IconColor);
        if (Flags[0]) { writer.Write(IconEmojiId.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Title = reader.ReadString();
        IconColor = reader.ReadInt32();
        if (Flags[0]) { IconEmojiId = reader.ReadInt64(); }
    }
}