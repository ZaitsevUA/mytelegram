// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// The group call has ended
/// See <a href="https://corefork.telegram.org/constructor/messageActionGroupCall" />
///</summary>
[TlObject(0x7a0d7f42)]
public sealed class TMessageActionGroupCall : IMessageAction
{
    public uint ConstructorId => 0x7a0d7f42;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Group call
    /// See <a href="https://corefork.telegram.org/type/InputGroupCall" />
    ///</summary>
    public MyTelegram.Schema.IInputGroupCall Call { get; set; }

    ///<summary>
    /// Group call duration
    ///</summary>
    public int? Duration { get; set; }

    public void ComputeFlag()
    {
        if (/*Duration != 0 && */Duration.HasValue) { Flags[0] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Call);
        if (Flags[0]) { writer.Write(Duration.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        Call = reader.Read<MyTelegram.Schema.IInputGroupCall>();
        if (Flags[0]) { Duration = reader.ReadInt32(); }
    }
}