// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Admin
/// See <a href="https://corefork.telegram.org/constructor/channelParticipantAdmin" />
///</summary>
[TlObject(0x34c3bb53)]
public sealed class TChannelParticipantAdmin : IChannelParticipant
{
    public uint ConstructorId => 0x34c3bb53;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Can this admin promote other admins with the same permissions?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanEdit { get; set; }

    ///<summary>
    /// Is this the current user
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Self { get; set; }

    ///<summary>
    /// Admin user ID
    ///</summary>
    public long UserId { get; set; }

    ///<summary>
    /// User that invited the admin to the channel/group
    ///</summary>
    public long? InviterId { get; set; }

    ///<summary>
    /// User that promoted the user to admin
    ///</summary>
    public long PromotedBy { get; set; }

    ///<summary>
    /// When did the user join
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// Admin <a href="https://corefork.telegram.org/api/rights">rights</a>
    /// See <a href="https://corefork.telegram.org/type/ChatAdminRights" />
    ///</summary>
    public MyTelegram.Schema.IChatAdminRights AdminRights { get; set; }

    ///<summary>
    /// The role (rank) of the admin in the group: just an arbitrary string, <code>admin</code> by default
    ///</summary>
    public string? Rank { get; set; }

    public void ComputeFlag()
    {
        if (CanEdit) { Flags[0] = true; }
        if (Self) { Flags[1] = true; }
        if (/*InviterId != 0 &&*/ InviterId.HasValue) { Flags[1] = true; }
        if (Rank != null) { Flags[2] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(UserId);
        if (Flags[1]) { writer.Write(InviterId.Value); }
        writer.Write(PromotedBy);
        writer.Write(Date);
        writer.Write(AdminRights);
        if (Flags[2]) { writer.Write(Rank); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { CanEdit = true; }
        if (Flags[1]) { Self = true; }
        UserId = reader.ReadInt64();
        if (Flags[1]) { InviterId = reader.ReadInt64(); }
        PromotedBy = reader.ReadInt64();
        Date = reader.ReadInt32();
        AdminRights = reader.Read<MyTelegram.Schema.IChatAdminRights>();
        if (Flags[2]) { Rank = reader.ReadString(); }
    }
}