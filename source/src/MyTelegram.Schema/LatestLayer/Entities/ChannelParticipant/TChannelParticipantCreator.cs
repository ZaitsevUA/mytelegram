// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Channel/supergroup creator
/// See <a href="https://corefork.telegram.org/constructor/channelParticipantCreator" />
///</summary>
[TlObject(0x2fe601d3)]
public sealed class TChannelParticipantCreator : IChannelParticipant
{
    public uint ConstructorId => 0x2fe601d3;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// User ID
    ///</summary>
    public long UserId { get; set; }

    ///<summary>
    /// Creator admin rights
    /// See <a href="https://corefork.telegram.org/type/ChatAdminRights" />
    ///</summary>
    public MyTelegram.Schema.IChatAdminRights AdminRights { get; set; }

    ///<summary>
    /// The role (rank) of the group creator in the group: just an arbitrary string, <code>admin</code> by default
    ///</summary>
    public string? Rank { get; set; }

    public void ComputeFlag()
    {
        if (Rank != null) { Flags[0] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(UserId);
        writer.Write(AdminRights);
        if (Flags[0]) { writer.Write(Rank); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        UserId = reader.ReadInt64();
        AdminRights = reader.Read<MyTelegram.Schema.IChatAdminRights>();
        if (Flags[0]) { Rank = reader.ReadString(); }
    }
}