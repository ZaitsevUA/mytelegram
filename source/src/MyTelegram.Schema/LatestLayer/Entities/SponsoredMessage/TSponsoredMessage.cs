// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// A <a href="https://corefork.telegram.org/api/sponsored-messages">sponsored message</a>.
/// See <a href="https://corefork.telegram.org/constructor/sponsoredMessage" />
///</summary>
[TlObject(0x4d93a990)]
public sealed class TSponsoredMessage : ISponsoredMessage
{
    public uint ConstructorId => 0x4d93a990;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether the message needs to be labeled as "recommended" instead of "sponsored"
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Recommended { get; set; }

    ///<summary>
    /// Whether this message can be <a href="https://corefork.telegram.org/api/sponsored-messages#reporting-sponsored-messages">reported as specified here »</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanReport { get; set; }

    ///<summary>
    /// Message ID
    ///</summary>
    public byte[] RandomId { get; set; }

    ///<summary>
    /// Contains the URL to open when the user clicks on the sponsored message.
    ///</summary>
    public string Url { get; set; }

    ///<summary>
    /// Contains the title of the sponsored message.
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// Sponsored message
    ///</summary>
    public string Message { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/entities">Message entities for styled text</a> in <code>message</code>.
    ///</summary>
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }

    ///<summary>
    /// If set, contains a custom profile photo bubble that should be displayed for the sponsored message, like for messages sent in groups.
    /// See <a href="https://corefork.telegram.org/type/Photo" />
    ///</summary>
    public MyTelegram.Schema.IPhoto? Photo { get; set; }

    ///<summary>
    /// If set, contains some media.
    /// See <a href="https://corefork.telegram.org/type/MessageMedia" />
    ///</summary>
    public MyTelegram.Schema.IMessageMedia? Media { get; set; }

    ///<summary>
    /// If set, the sponsored message should use the <a href="https://corefork.telegram.org/api/colors">message accent color »</a> specified in <code>color</code>.
    /// See <a href="https://corefork.telegram.org/type/PeerColor" />
    ///</summary>
    public MyTelegram.Schema.IPeerColor? Color { get; set; }

    ///<summary>
    /// Label of the sponsored message button.
    ///</summary>
    public string ButtonText { get; set; }

    ///<summary>
    /// If set, contains additional information about the sponsor to be shown along with the message.
    ///</summary>
    public string? SponsorInfo { get; set; }

    ///<summary>
    /// If set, contains additional information about the sponsored message to be shown along with the message.
    ///</summary>
    public string? AdditionalInfo { get; set; }

    public void ComputeFlag()
    {
        if (Recommended) { Flags[5] = true; }
        if (CanReport) { Flags[12] = true; }
        if (Entities?.Count > 0) { Flags[1] = true; }
        if (Photo != null) { Flags[6] = true; }
        if (Media != null) { Flags[14] = true; }
        if (Color != null) { Flags[13] = true; }
        if (SponsorInfo != null) { Flags[7] = true; }
        if (AdditionalInfo != null) { Flags[8] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(RandomId);
        writer.Write(Url);
        writer.Write(Title);
        writer.Write(Message);
        if (Flags[1]) { writer.Write(Entities); }
        if (Flags[6]) { writer.Write(Photo); }
        if (Flags[14]) { writer.Write(Media); }
        if (Flags[13]) { writer.Write(Color); }
        writer.Write(ButtonText);
        if (Flags[7]) { writer.Write(SponsorInfo); }
        if (Flags[8]) { writer.Write(AdditionalInfo); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[5]) { Recommended = true; }
        if (Flags[12]) { CanReport = true; }
        RandomId = reader.ReadBytes();
        Url = reader.ReadString();
        Title = reader.ReadString();
        Message = reader.ReadString();
        if (Flags[1]) { Entities = reader.Read<TVector<MyTelegram.Schema.IMessageEntity>>(); }
        if (Flags[6]) { Photo = reader.Read<MyTelegram.Schema.IPhoto>(); }
        if (Flags[14]) { Media = reader.Read<MyTelegram.Schema.IMessageMedia>(); }
        if (Flags[13]) { Color = reader.Read<MyTelegram.Schema.IPeerColor>(); }
        ButtonText = reader.ReadString();
        if (Flags[7]) { SponsorInfo = reader.ReadString(); }
        if (Flags[8]) { AdditionalInfo = reader.ReadString(); }
    }
}