// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// <a href="https://corefork.telegram.org/api/reactions">Message reactions »</a>
/// See <a href="https://corefork.telegram.org/constructor/messageReactions" />
///</summary>
[TlObject(0xa339f0b)]
public sealed class TMessageReactions : IMessageReactions
{
    public uint ConstructorId => 0xa339f0b;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Similar to <a href="https://corefork.telegram.org/api/min">min</a> objects, used for <a href="https://corefork.telegram.org/api/reactions">message reaction »</a> constructors that are the same for all users so they don't have the reactions sent by the current user (you can use <a href="https://corefork.telegram.org/method/messages.getMessagesReactions">messages.getMessagesReactions</a> to get the full reaction info).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Min { get; set; }

    ///<summary>
    /// Whether <a href="https://corefork.telegram.org/method/messages.getMessageReactionsList">messages.getMessageReactionsList</a> can be used to see how each specific peer reacted to the message
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanSeeList { get; set; }

    ///<summary>
    /// If set or if there are no reactions, all present and future reactions should be treated as <a href="https://corefork.telegram.org/api/saved-messages#tags">message tags, see here » for more info</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ReactionsAsTags { get; set; }

    ///<summary>
    /// Reactions
    ///</summary>
    public TVector<MyTelegram.Schema.IReactionCount> Results { get; set; }

    ///<summary>
    /// List of recent peers and their reactions
    ///</summary>
    public TVector<MyTelegram.Schema.IMessagePeerReaction>? RecentReactions { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/reactions#paid-reactions">Paid Telegram Star reactions leaderboard »</a> for this message.
    ///</summary>
    public TVector<MyTelegram.Schema.IMessageReactor>? TopReactors { get; set; }

    public void ComputeFlag()
    {
        if (Min) { Flags[0] = true; }
        if (CanSeeList) { Flags[2] = true; }
        if (ReactionsAsTags) { Flags[3] = true; }
        if (RecentReactions?.Count > 0) { Flags[1] = true; }
        if (TopReactors?.Count > 0) { Flags[4] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Results);
        if (Flags[1]) { writer.Write(RecentReactions); }
        if (Flags[4]) { writer.Write(TopReactors); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Min = true; }
        if (Flags[2]) { CanSeeList = true; }
        if (Flags[3]) { ReactionsAsTags = true; }
        Results = reader.Read<TVector<MyTelegram.Schema.IReactionCount>>();
        if (Flags[1]) { RecentReactions = reader.Read<TVector<MyTelegram.Schema.IMessagePeerReaction>>(); }
        if (Flags[4]) { TopReactors = reader.Read<TVector<MyTelegram.Schema.IMessageReactor>>(); }
    }
}