// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Chat invite info
/// See <a href="https://corefork.telegram.org/constructor/chatInvite" />
///</summary>
[TlObject(0xfe65389d)]
public sealed class TChatInvite : IChatInvite
{
    public uint ConstructorId => 0xfe65389d;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether this is a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a> or a <a href="https://corefork.telegram.org/api/channel">normal group</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Channel { get; set; }

    ///<summary>
    /// Whether this is a <a href="https://corefork.telegram.org/api/channel">channel</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Broadcast { get; set; }

    ///<summary>
    /// Whether this is a public <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Public { get; set; }

    ///<summary>
    /// Whether this is a <a href="https://corefork.telegram.org/api/channel">supergroup</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Megagroup { get; set; }

    ///<summary>
    /// Whether the <a href="https://corefork.telegram.org/api/invites#join-requests">join request »</a> must be first approved by an administrator
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool RequestNeeded { get; set; }

    ///<summary>
    /// Is this chat or channel verified by Telegram?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Verified { get; set; }

    ///<summary>
    /// This chat is probably a scam
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Scam { get; set; }

    ///<summary>
    /// If set, this chat was reported by many users as a fake or scam: be careful when interacting with it.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Fake { get; set; }

    ///<summary>
    /// If set, indicates that the user has already paid for the associated <a href="https://corefork.telegram.org/api/stars#star-subscriptions">Telegram Star subscriptions »</a> and it hasn't expired yet, so they may re-join the channel using <a href="https://corefork.telegram.org/method/messages.importChatInvite">messages.importChatInvite</a> without repeating the payment.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanRefulfillSubscription { get; set; }

    ///<summary>
    /// Chat/supergroup/channel title
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// Description of the group of channel
    ///</summary>
    public string? About { get; set; }

    ///<summary>
    /// Chat/supergroup/channel photo
    /// See <a href="https://corefork.telegram.org/type/Photo" />
    ///</summary>
    public MyTelegram.Schema.IPhoto Photo { get; set; }

    ///<summary>
    /// Participant count
    ///</summary>
    public int ParticipantsCount { get; set; }

    ///<summary>
    /// A few of the participants that are in the group
    ///</summary>
    public TVector<MyTelegram.Schema.IUser>? Participants { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/colors">Profile color palette ID</a>
    ///</summary>
    public int Color { get; set; }

    ///<summary>
    /// For <a href="https://corefork.telegram.org/api/stars#star-subscriptions">Telegram Star subscriptions »</a>, contains the pricing of the subscription the user must activate to join the private channel.
    /// See <a href="https://corefork.telegram.org/type/StarsSubscriptionPricing" />
    ///</summary>
    public MyTelegram.Schema.IStarsSubscriptionPricing? SubscriptionPricing { get; set; }

    ///<summary>
    /// For <a href="https://corefork.telegram.org/api/stars#star-subscriptions">Telegram Star subscriptions »</a>, the ID of the payment form for the subscription.
    ///</summary>
    public long? SubscriptionFormId { get; set; }

    public void ComputeFlag()
    {
        if (Channel) { Flags[0] = true; }
        if (Broadcast) { Flags[1] = true; }
        if (Public) { Flags[2] = true; }
        if (Megagroup) { Flags[3] = true; }
        if (RequestNeeded) { Flags[6] = true; }
        if (Verified) { Flags[7] = true; }
        if (Scam) { Flags[8] = true; }
        if (Fake) { Flags[9] = true; }
        if (CanRefulfillSubscription) { Flags[11] = true; }
        if (About != null) { Flags[5] = true; }
        if (Participants?.Count > 0) { Flags[4] = true; }
        if (SubscriptionPricing != null) { Flags[10] = true; }
        if (/*SubscriptionFormId != 0 &&*/ SubscriptionFormId.HasValue) { Flags[12] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Title);
        if (Flags[5]) { writer.Write(About); }
        writer.Write(Photo);
        writer.Write(ParticipantsCount);
        if (Flags[4]) { writer.Write(Participants); }
        writer.Write(Color);
        if (Flags[10]) { writer.Write(SubscriptionPricing); }
        if (Flags[12]) { writer.Write(SubscriptionFormId.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Channel = true; }
        if (Flags[1]) { Broadcast = true; }
        if (Flags[2]) { Public = true; }
        if (Flags[3]) { Megagroup = true; }
        if (Flags[6]) { RequestNeeded = true; }
        if (Flags[7]) { Verified = true; }
        if (Flags[8]) { Scam = true; }
        if (Flags[9]) { Fake = true; }
        if (Flags[11]) { CanRefulfillSubscription = true; }
        Title = reader.ReadString();
        if (Flags[5]) { About = reader.ReadString(); }
        Photo = reader.Read<MyTelegram.Schema.IPhoto>();
        ParticipantsCount = reader.ReadInt32();
        if (Flags[4]) { Participants = reader.Read<TVector<MyTelegram.Schema.IUser>>(); }
        Color = reader.ReadInt32();
        if (Flags[10]) { SubscriptionPricing = reader.Read<MyTelegram.Schema.IStarsSubscriptionPricing>(); }
        if (Flags[12]) { SubscriptionFormId = reader.ReadInt64(); }
    }
}