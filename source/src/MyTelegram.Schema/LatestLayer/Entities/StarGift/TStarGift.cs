// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents a <a href="https://corefork.telegram.org/api/gifts">star gift, see here »</a> for more info.
/// See <a href="https://corefork.telegram.org/constructor/starGift" />
///</summary>
[TlObject(0x49c577cd)]
public sealed class TStarGift : IStarGift
{
    public uint ConstructorId => 0x49c577cd;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether this is a limited-supply gift.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Limited { get; set; }

    ///<summary>
    /// Whether this gift sold out and cannot be bought anymore.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool SoldOut { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Birthday { get; set; }

    ///<summary>
    /// Identifier of the gift
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/stickers">Sticker</a> that represents the gift.
    /// See <a href="https://corefork.telegram.org/type/Document" />
    ///</summary>
    public MyTelegram.Schema.IDocument Sticker { get; set; }

    ///<summary>
    /// Price of the gift in <a href="https://corefork.telegram.org/api/stars">Telegram Stars</a>.
    ///</summary>
    public long Stars { get; set; }

    ///<summary>
    /// For limited-supply gifts: the remaining number of gifts that may be bought.
    ///</summary>
    public int? AvailabilityRemains { get; set; }

    ///<summary>
    /// For limited-supply gifts: the total number of gifts that was available in the initial supply.
    ///</summary>
    public int? AvailabilityTotal { get; set; }

    ///<summary>
    /// The receiver of this gift may convert it to this many Telegram Stars, instead of displaying it on their profile page.<br><code>convert_stars</code> will be equal to <code>stars</code> only if the gift was bought using recently bought Telegram Stars, otherwise it will be less than <code>stars</code>.
    ///</summary>
    public long ConvertStars { get; set; }

    ///<summary>
    /// For sold out gifts only: when was the gift first bought.
    ///</summary>
    public int? FirstSaleDate { get; set; }

    ///<summary>
    /// For sold out gifts only: when was the gift last bought.
    ///</summary>
    public int? LastSaleDate { get; set; }

    public void ComputeFlag()
    {
        if (Limited) { Flags[0] = true; }
        if (SoldOut) { Flags[1] = true; }
        if (Birthday) { Flags[2] = true; }
        if (/*AvailabilityRemains != 0 && */AvailabilityRemains.HasValue) { Flags[0] = true; }
        if (/*AvailabilityTotal != 0 && */AvailabilityTotal.HasValue) { Flags[0] = true; }
        if (/*FirstSaleDate != 0 && */FirstSaleDate.HasValue) { Flags[1] = true; }
        if (/*LastSaleDate != 0 && */LastSaleDate.HasValue) { Flags[1] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Sticker);
        writer.Write(Stars);
        if (Flags[0]) { writer.Write(AvailabilityRemains.Value); }
        if (Flags[0]) { writer.Write(AvailabilityTotal.Value); }
        writer.Write(ConvertStars);
        if (Flags[1]) { writer.Write(FirstSaleDate.Value); }
        if (Flags[1]) { writer.Write(LastSaleDate.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { Limited = true; }
        if (Flags[1]) { SoldOut = true; }
        if (Flags[2]) { Birthday = true; }
        Id = reader.ReadInt64();
        Sticker = reader.Read<MyTelegram.Schema.IDocument>();
        Stars = reader.ReadInt64();
        if (Flags[0]) { AvailabilityRemains = reader.ReadInt32(); }
        if (Flags[0]) { AvailabilityTotal = reader.ReadInt32(); }
        ConvertStars = reader.ReadInt64();
        if (Flags[1]) { FirstSaleDate = reader.ReadInt32(); }
        if (Flags[1]) { LastSaleDate = reader.ReadInt32(); }
    }
}