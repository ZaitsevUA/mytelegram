// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents a <a href="https://corefork.telegram.org/api/stars">Telegram Stars transaction »</a>.
/// See <a href="https://corefork.telegram.org/constructor/starsTransaction" />
///</summary>
[TlObject(0x64dfc926)]
public sealed class TStarsTransaction : IStarsTransaction
{
    public uint ConstructorId => 0x64dfc926;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// Whether this transaction is a refund.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Refund { get; set; }

    ///<summary>
    /// The transaction is currently pending.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Pending { get; set; }

    ///<summary>
    /// This transaction has failed.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Failed { get; set; }

    ///<summary>
    /// This transaction was a gift from the user in <code>peer.peer</code>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Gift { get; set; }

    ///<summary>
    /// This transaction is a <a href="https://corefork.telegram.org/api/reactions#paid-reactions">paid reaction »</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Reaction { get; set; }

    ///<summary>
    /// Transaction ID.
    ///</summary>
    public string Id { get; set; }

    ///<summary>
    /// Amount of Stars (negative for outgoing transactions).
    /// See <a href="https://corefork.telegram.org/type/StarsAmount" />
    ///</summary>
    public MyTelegram.Schema.IStarsAmount Stars { get; set; }

    ///<summary>
    /// Date of the transaction (unixtime).
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// Source of the incoming transaction, or its recipient for outgoing transactions.
    /// See <a href="https://corefork.telegram.org/type/StarsTransactionPeer" />
    ///</summary>
    public MyTelegram.Schema.IStarsTransactionPeer Peer { get; set; }

    ///<summary>
    /// For transactions with bots, title of the bought product.
    ///</summary>
    public string? Title { get; set; }

    ///<summary>
    /// For transactions with bots, description of the bought product.
    ///</summary>
    public string? Description { get; set; }

    ///<summary>
    /// For transactions with bots, photo of the bought product.
    /// See <a href="https://corefork.telegram.org/type/WebDocument" />
    ///</summary>
    public MyTelegram.Schema.IWebDocument? Photo { get; set; }

    ///<summary>
    /// If neither <code>pending</code> nor <code>failed</code> are set, the transaction was completed successfully, and this field will contain the point in time (Unix timestamp) when the withdrawal was completed successfully.
    ///</summary>
    public int? TransactionDate { get; set; }

    ///<summary>
    /// If neither <code>pending</code> nor <code>failed</code> are set, the transaction was completed successfully, and this field will contain a URL where the withdrawal transaction can be viewed.
    ///</summary>
    public string? TransactionUrl { get; set; }

    ///<summary>
    /// Bot specified invoice payload (i.e. the <code>payload</code> passed to <a href="https://corefork.telegram.org/constructor/inputMediaInvoice">inputMediaInvoice</a> when <a href="https://corefork.telegram.org/api/payments">creating the invoice</a>).
    ///</summary>
    public byte[]? BotPayload { get; set; }

    ///<summary>
    /// For <a href="https://corefork.telegram.org/api/paid-media">paid media transactions »</a>, message ID of the paid media posted to <code>peer.peer</code> (can point to a deleted message; either way, <code>extended_media</code> will always contain the bought media).
    ///</summary>
    public int? MsgId { get; set; }

    ///<summary>
    /// The purchased <a href="https://corefork.telegram.org/api/paid-media">paid media »</a>.
    ///</summary>
    public TVector<MyTelegram.Schema.IMessageMedia>? ExtendedMedia { get; set; }

    ///<summary>
    /// The number of seconds between consecutive Telegram Star debiting for <a href="https://corefork.telegram.org/api/stars#star-subscriptions">Telegram Star subscriptions »</a>.
    ///</summary>
    public int? SubscriptionPeriod { get; set; }

    ///<summary>
    /// ID of the message containing the <a href="https://corefork.telegram.org/constructor/messageMediaGiveaway">messageMediaGiveaway</a>, for incoming <a href="https://corefork.telegram.org/api/giveaways#star-giveaways">star giveaway prizes</a>.
    ///</summary>
    public int? GiveawayPostId { get; set; }

    ///<summary>
    /// This transaction indicates a purchase or a sale (conversion back to Stars) of a <a href="https://corefork.telegram.org/api/stars">gift »</a>.
    /// See <a href="https://corefork.telegram.org/type/StarGift" />
    ///</summary>
    public MyTelegram.Schema.IStarGift? Stargift { get; set; }

    ///<summary>
    /// This transaction is payment for <a href="https://corefork.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">paid bot broadcasts</a>.  <br>Paid broadcasts are only allowed if the <code>allow_paid_floodskip</code> parameter of <a href="https://corefork.telegram.org/method/messages.sendMessage">messages.sendMessage</a> and other message sending methods is set while trying to broadcast more than 30 messages per second to bot users. <br>The integer value returned by this flag indicates the number of billed API calls.
    ///</summary>
    public int? FloodskipNumber { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? StarrefCommissionPermille { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? StarrefPeer { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/StarsAmount" />
    ///</summary>
    public MyTelegram.Schema.IStarsAmount? StarrefAmount { get; set; }

    public void ComputeFlag()
    {
        if (Refund) { Flags[3] = true; }
        if (Pending) { Flags[4] = true; }
        if (Failed) { Flags[6] = true; }
        if (Gift) { Flags[10] = true; }
        if (Reaction) { Flags[11] = true; }
        if (Title != null) { Flags[0] = true; }
        if (Description != null) { Flags[1] = true; }
        if (Photo != null) { Flags[2] = true; }
        if (/*TransactionDate != 0 && */TransactionDate.HasValue) { Flags[5] = true; }
        if (TransactionUrl != null) { Flags[5] = true; }
        if (BotPayload != null) { Flags[7] = true; }
        if (/*MsgId != 0 && */MsgId.HasValue) { Flags[8] = true; }
        if (ExtendedMedia?.Count > 0) { Flags[9] = true; }
        if (/*SubscriptionPeriod != 0 && */SubscriptionPeriod.HasValue) { Flags[12] = true; }
        if (/*GiveawayPostId != 0 && */GiveawayPostId.HasValue) { Flags[13] = true; }
        if (Stargift != null) { Flags[14] = true; }
        if (/*FloodskipNumber != 0 && */FloodskipNumber.HasValue) { Flags[15] = true; }
        if (/*StarrefCommissionPermille != 0 && */StarrefCommissionPermille.HasValue) { Flags[16] = true; }
        if (StarrefPeer != null) { Flags[17] = true; }
        if (StarrefAmount != null) { Flags[17] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Stars);
        writer.Write(Date);
        writer.Write(Peer);
        if (Flags[0]) { writer.Write(Title); }
        if (Flags[1]) { writer.Write(Description); }
        if (Flags[2]) { writer.Write(Photo); }
        if (Flags[5]) { writer.Write(TransactionDate.Value); }
        if (Flags[5]) { writer.Write(TransactionUrl); }
        if (Flags[7]) { writer.Write(BotPayload); }
        if (Flags[8]) { writer.Write(MsgId.Value); }
        if (Flags[9]) { writer.Write(ExtendedMedia); }
        if (Flags[12]) { writer.Write(SubscriptionPeriod.Value); }
        if (Flags[13]) { writer.Write(GiveawayPostId.Value); }
        if (Flags[14]) { writer.Write(Stargift); }
        if (Flags[15]) { writer.Write(FloodskipNumber.Value); }
        if (Flags[16]) { writer.Write(StarrefCommissionPermille.Value); }
        if (Flags[17]) { writer.Write(StarrefPeer); }
        if (Flags[17]) { writer.Write(StarrefAmount); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[3]) { Refund = true; }
        if (Flags[4]) { Pending = true; }
        if (Flags[6]) { Failed = true; }
        if (Flags[10]) { Gift = true; }
        if (Flags[11]) { Reaction = true; }
        Id = reader.ReadString();
        Stars = reader.Read<MyTelegram.Schema.IStarsAmount>();
        Date = reader.ReadInt32();
        Peer = reader.Read<MyTelegram.Schema.IStarsTransactionPeer>();
        if (Flags[0]) { Title = reader.ReadString(); }
        if (Flags[1]) { Description = reader.ReadString(); }
        if (Flags[2]) { Photo = reader.Read<MyTelegram.Schema.IWebDocument>(); }
        if (Flags[5]) { TransactionDate = reader.ReadInt32(); }
        if (Flags[5]) { TransactionUrl = reader.ReadString(); }
        if (Flags[7]) { BotPayload = reader.ReadBytes(); }
        if (Flags[8]) { MsgId = reader.ReadInt32(); }
        if (Flags[9]) { ExtendedMedia = reader.Read<TVector<MyTelegram.Schema.IMessageMedia>>(); }
        if (Flags[12]) { SubscriptionPeriod = reader.ReadInt32(); }
        if (Flags[13]) { GiveawayPostId = reader.ReadInt32(); }
        if (Flags[14]) { Stargift = reader.Read<MyTelegram.Schema.IStarGift>(); }
        if (Flags[15]) { FloodskipNumber = reader.ReadInt32(); }
        if (Flags[16]) { StarrefCommissionPermille = reader.ReadInt32(); }
        if (Flags[17]) { StarrefPeer = reader.Read<MyTelegram.Schema.IPeer>(); }
        if (Flags[17]) { StarrefAmount = reader.Read<MyTelegram.Schema.IStarsAmount>(); }
    }
}