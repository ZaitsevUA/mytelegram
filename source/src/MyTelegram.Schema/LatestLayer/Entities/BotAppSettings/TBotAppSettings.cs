// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/botAppSettings" />
///</summary>
[TlObject(0xc99b1950)]
public sealed class TBotAppSettings : IBotAppSettings
{
    public uint ConstructorId => 0xc99b1950;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// &nbsp;
    ///</summary>
    public byte[]? PlaceholderPath { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? BackgroundColor { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? BackgroundDarkColor { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? HeaderColor { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? HeaderDarkColor { get; set; }

    public void ComputeFlag()
    {
        if (PlaceholderPath != null) { Flags[0] = true; }
        if (/*BackgroundColor != 0 && */BackgroundColor.HasValue) { Flags[1] = true; }
        if (/*BackgroundDarkColor != 0 && */BackgroundDarkColor.HasValue) { Flags[2] = true; }
        if (/*HeaderColor != 0 && */HeaderColor.HasValue) { Flags[3] = true; }
        if (/*HeaderDarkColor != 0 && */HeaderDarkColor.HasValue) { Flags[4] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[0]) { writer.Write(PlaceholderPath); }
        if (Flags[1]) { writer.Write(BackgroundColor.Value); }
        if (Flags[2]) { writer.Write(BackgroundDarkColor.Value); }
        if (Flags[3]) { writer.Write(HeaderColor.Value); }
        if (Flags[4]) { writer.Write(HeaderDarkColor.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { PlaceholderPath = reader.ReadBytes(); }
        if (Flags[1]) { BackgroundColor = reader.ReadInt32(); }
        if (Flags[2]) { BackgroundDarkColor = reader.ReadInt32(); }
        if (Flags[3]) { HeaderColor = reader.ReadInt32(); }
        if (Flags[4]) { HeaderDarkColor = reader.ReadInt32(); }
    }
}