// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents a <a href="https://corefork.telegram.org/api/gifts">gift</a>, displayed on a user's profile page.
/// See <a href="https://corefork.telegram.org/constructor/userStarGift" />
///</summary>
[TlObject(0xeea49a6e)]
public sealed class TUserStarGift : IUserStarGift
{
    public uint ConstructorId => 0xeea49a6e;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public BitArray Flags { get; set; } = new BitArray(32);

    ///<summary>
    /// If set, <code>from_id</code> will not be visible to users (it will still be visible to the receiver of the gift).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NameHidden { get; set; }

    ///<summary>
    /// If set, indicates this is a gift sent by <code>from_id</code>, received by the current user and currently hidden from our profile page.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Unsaved { get; set; }

    ///<summary>
    /// Sender of the gift (may be empty for anonymous senders; will always be set if this gift was sent to us).
    ///</summary>
    public long? FromId { get; set; }

    ///<summary>
    /// When was this gift sent.
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// The gift.
    /// See <a href="https://corefork.telegram.org/type/StarGift" />
    ///</summary>
    public MyTelegram.Schema.IStarGift Gift { get; set; }

    ///<summary>
    /// Message attached to the gift by the sender.
    /// See <a href="https://corefork.telegram.org/type/TextWithEntities" />
    ///</summary>
    public MyTelegram.Schema.ITextWithEntities? Message { get; set; }

    ///<summary>
    /// Only visible to the receiver of the gift, contains the ID of the <a href="https://corefork.telegram.org/constructor/messageService">messageService</a> with the <a href="https://corefork.telegram.org/constructor/messageActionStarGift">messageActionStarGift</a> in the chat with <code>from_id</code>.
    ///</summary>
    public int? MsgId { get; set; }

    ///<summary>
    /// The receiver of this gift may convert it to this many Telegram Stars, instead of displaying it on their profile page.<br><code>convert_stars</code> will be equal to the buying price of the gift only if the gift was bought using recently bought Telegram Stars, otherwise it will be less than <code>stars</code>.
    ///</summary>
    public long? ConvertStars { get; set; }

    public void ComputeFlag()
    {
        if (NameHidden) { Flags[0] = true; }
        if (Unsaved) { Flags[5] = true; }
        if (/*FromId != 0 &&*/ FromId.HasValue) { Flags[1] = true; }
        if (Message != null) { Flags[2] = true; }
        if (/*MsgId != 0 && */MsgId.HasValue) { Flags[3] = true; }
        if (/*ConvertStars != 0 &&*/ ConvertStars.HasValue) { Flags[4] = true; }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags[1]) { writer.Write(FromId.Value); }
        writer.Write(Date);
        writer.Write(Gift);
        if (Flags[2]) { writer.Write(Message); }
        if (Flags[3]) { writer.Write(MsgId.Value); }
        if (Flags[4]) { writer.Write(ConvertStars.Value); }
    }

    public void Deserialize(ref SequenceReader<byte> reader)
    {
        Flags = reader.ReadBitArray();
        if (Flags[0]) { NameHidden = true; }
        if (Flags[5]) { Unsaved = true; }
        if (Flags[1]) { FromId = reader.ReadInt64(); }
        Date = reader.ReadInt32();
        Gift = reader.Read<MyTelegram.Schema.IStarGift>();
        if (Flags[2]) { Message = reader.Read<MyTelegram.Schema.ITextWithEntities>(); }
        if (Flags[3]) { MsgId = reader.ReadInt32(); }
        if (Flags[4]) { ConvertStars = reader.ReadInt64(); }
    }
}